

Microchip Technology PIC18 LITE Macro Assembler V1.43 build -156212558 
                                                                                               Mon Oct 26 12:46:15 2020

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=2
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=2
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=2
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=2
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=2
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=2
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=2
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=2
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1
    47                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    48                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	text40,global,reloc=2,class=CODE,delta=1
    54                           	psect	text41,global,reloc=2,class=CODE,delta=1
    55                           	psect	text42,global,reloc=2,class=CODE,delta=1
    56                           	psect	text43,global,reloc=2,class=CODE,delta=1
    57                           	psect	text44,global,reloc=2,class=CODE,delta=1
    58                           	psect	text45,global,reloc=2,class=CODE,delta=1
    59                           	psect	text46,global,reloc=2,class=CODE,delta=1
    60                           	psect	text47,global,reloc=2,class=CODE,delta=1
    61                           	psect	text48,global,reloc=2,class=CODE,delta=1
    62                           	psect	text49,global,reloc=2,class=CODE,delta=1
    63                           	psect	text50,global,reloc=2,class=CODE,delta=1
    64                           	psect	text51,global,reloc=2,class=CODE,delta=1
    65                           	psect	text52,global,reloc=2,class=CODE,delta=1
    66                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    69                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    70  0000                     
    71                           ; Version 1.43
    72                           ; Generated 25/07/2017 GMT
    73                           ; 
    74                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    75                           ; All rights reserved.
    76                           ; 
    77                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    78                           ; 
    79                           ; Redistribution and use in source and binary forms, with or without modification, are
    80                           ; permitted provided that the following conditions are met:
    81                           ; 
    82                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    83                           ;        conditions and the following disclaimer.
    84                           ; 
    85                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    86                           ;        of conditions and the following disclaimer in the documentation and/or other
    87                           ;        materials provided with the distribution.
    88                           ; 
    89                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    90                           ;        software without specific prior written permission.
    91                           ; 
    92                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    93                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    94                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    95                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    96                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    97                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    98                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    99                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   100                           ; 
   101                           ; 
   102                           ; Code-generator required, PIC18F4550 Definitions
   103                           ; 
   104                           ; SFR Addresses
   105  0000                     
   106                           	psect	smallconst
   107  000800                     __psmallconst:
   108                           	opt stack 0
   109  000800  00                 	db	0
   110  000801                     _dpowers:
   111                           	opt stack 0
   112  000801  0001               	dw	1
   113  000803  0000               	dw	0
   114  000805  000A               	dw	10
   115  000807  0000               	dw	0
   116  000809  0064               	dw	100
   117  00080B  0000               	dw	0
   118  00080D  03E8               	dw	1000
   119  00080F  0000               	dw	0
   120  000811  2710               	dw	10000
   121  000813  0000               	dw	0
   122  000815  86A0               	dw	34464
   123  000817  0001               	dw	1
   124  000819  4240               	dw	16960
   125  00081B  000F               	dw	15
   126  00081D  9680               	dw	38528
   127  00081F  0098               	dw	152
   128  000821  E100               	dw	57600
   129  000823  05F5               	dw	1525
   130  000825  CA00               	dw	51712
   131  000827  3B9A               	dw	15258
   132  000829                     __end_of_dpowers:
   133                           	opt stack 0
   134  000829                     __powers_:
   135                           	opt stack 0
   136  000829  00                 	db	0
   137  00082A  80                 	db	128
   138  00082B  3F                 	db	63
   139  00082C  00                 	db	0
   140  00082D  20                 	db	32
   141  00082E  41                 	db	65
   142  00082F  00                 	db	0
   143  000830  C8                 	db	200
   144  000831  42                 	db	66
   145  000832  00                 	db	0
   146  000833  7A                 	db	122
   147  000834  44                 	db	68
   148  000835  40                 	db	64
   149  000836  1C                 	db	28
   150  000837  46                 	db	70
   151  000838  50                 	db	80
   152  000839  C3                 	db	195
   153  00083A  47                 	db	71
   154  00083B  24                 	db	36
   155  00083C  74                 	db	116
   156  00083D  49                 	db	73
   157  00083E  97                 	db	151
   158  00083F  18                 	db	24
   159  000840  4B                 	db	75
   160  000841  BC                 	db	188
   161  000842  BE                 	db	190
   162  000843  4C                 	db	76
   163  000844  6B                 	db	107
   164  000845  6E                 	db	110
   165  000846  4E                 	db	78
   166  000847  03                 	db	3
   167  000848  15                 	db	21
   168  000849  50                 	db	80
   169  00084A  79                 	db	121
   170  00084B  AD                 	db	173
   171  00084C  60                 	db	96
   172  00084D  F3                 	db	243
   173  00084E  49                 	db	73
   174  00084F  71                 	db	113
   175  000850                     __end_of__powers_:
   176                           	opt stack 0
   177  000850                     __npowers_:
   178                           	opt stack 0
   179  000850  00                 	db	0
   180  000851  80                 	db	128
   181  000852  3F                 	db	63
   182  000853  CD                 	db	205
   183  000854  CC                 	db	204
   184  000855  3D                 	db	61
   185  000856  D7                 	db	215
   186  000857  23                 	db	35
   187  000858  3C                 	db	60
   188  000859  12                 	db	18
   189  00085A  83                 	db	131
   190  00085B  3A                 	db	58
   191  00085C  B7                 	db	183
   192  00085D  D1                 	db	209
   193  00085E  38                 	db	56
   194  00085F  C6                 	db	198
   195  000860  27                 	db	39
   196  000861  37                 	db	55
   197  000862  38                 	db	56
   198  000863  86                 	db	134
   199  000864  35                 	db	53
   200  000865  C0                 	db	192
   201  000866  D6                 	db	214
   202  000867  33                 	db	51
   203  000868  CC                 	db	204
   204  000869  2B                 	db	43
   205  00086A  32                 	db	50
   206  00086B  70                 	db	112
   207  00086C  89                 	db	137
   208  00086D  30                 	db	48
   209  00086E  E7                 	db	231
   210  00086F  DB                 	db	219
   211  000870  2E                 	db	46
   212  000871  E5                 	db	229
   213  000872  3C                 	db	60
   214  000873  1E                 	db	30
   215  000874  42                 	db	66
   216  000875  A2                 	db	162
   217  000876  0D                 	db	13
   218  000877                     __end_of__npowers_:
   219                           	opt stack 0
   220  0000                     _TMR3	set	4018
   221  0000                     _TMR3L	set	4018
   222  0000                     _TMR3H	set	4019
   223  0000                     _T3CON	set	4017
   224  0000                     _T2CONbits	set	4042
   225  0000                     _TMR2	set	4044
   226  0000                     _PR2	set	4043
   227  0000                     _T2CON	set	4042
   228  0000                     _T3CONbits	set	4017
   229  0000                     _CCPR2H	set	4028
   230  0000                     _CCPR2L	set	4027
   231  0000                     _CCP2CON	set	4026
   232  0000                     _TMR1H	set	4047
   233  0000                     _TMR1L	set	4046
   234  0000                     _T1CONbits	set	4045
   235  0000                     _T1CON	set	4045
   236  0000                     _TMR0H	set	4055
   237  0000                     _TMR0L	set	4054
   238  0000                     _T0CONbits	set	4053
   239  0000                     _T0CON	set	4053
   240  0000                     _SSPSTATbits	set	4039
   241  0000                     _TRISAbits	set	3986
   242  0000                     _EEDATA	set	4008
   243  0000                     _EEADR	set	4009
   244  0000                     _EECON2	set	4007
   245  0000                     _EECON1bits	set	4006
   246  0000                     _TABLAT	set	4085
   247  0000                     _TBLPTRL	set	4086
   248  0000                     _TBLPTRH	set	4087
   249  0000                     _TBLPTRU	set	4088
   250  0000                     _OSCTUNE	set	3995
   251  0000                     _OSCCON	set	4051
   252  0000                     _INTCON3bits	set	4080
   253  0000                     _PORTB	set	3969
   254  0000                     _PIR2bits	set	4001
   255  0000                     _PIE2bits	set	4000
   256  0000                     _INTCONbits	set	4082
   257  0000                     _IPR2bits	set	4002
   258  0000                     _INTCON2bits	set	4081
   259  0000                     _IPR1bits	set	3999
   260  0000                     _SSPBUF	set	4041
   261  0000                     _SSPCON2bits	set	4037
   262  0000                     _SSPCON1bits	set	4038
   263  0000                     _SSPCON2	set	4037
   264  0000                     _SSPADD	set	4040
   265  0000                     _SSPCON1	set	4038
   266  0000                     _SSPSTAT	set	4039
   267  0000                     _TXREG1	set	4013
   268  0000                     _RCSTA1bits	set	4011
   269  0000                     _SPBRGH	set	4016
   270  0000                     _SPBRG1	set	4015
   271  0000                     _TXSTA1	set	4012
   272  0000                     _RCSTA1	set	4011
   273  0000                     _BAUDCON	set	4024
   274  0000                     _PIE1bits	set	3997
   275  0000                     _ADCON0bits	set	4034
   276  0000                     _PIR1bits	set	3998
   277  0000                     _ADRESH	set	4036
   278  0000                     _ADRESL	set	4035
   279  0000                     _ADCON2	set	4032
   280  0000                     _ADCON1bits	set	4033
   281  0000                     _ADCON0	set	4034
   282  0000                     _TRISDbits	set	3989
   283  0000                     _TRISD	set	3989
   284  0000                     _PORTD	set	3971
   285  0000                     _LATDbits	set	3980
   286  0000                     _TRISBbits	set	3987
   287  0000                     _PORTBbits	set	3969
   288  0000                     _IPEN	set	32391
   289  000877                     STR_1:
   290  000877  25                 	db	37
   291  000878  2E                 	db	46
   292  000879  30                 	db	48	;'0'
   293  00087A  66                 	db	102	;'f'
   294  00087B  25                 	db	37
   295  00087C  63                 	db	99	;'c'
   296  00087D  20                 	db	32
   297  00087E  00                 	db	0
   298                           
   299                           ; #config settings
   300  00087F  00                 	db	0	; dummy byte at the end
   301  0000                     
   302                           	psect	cinit
   303  00292C                     __pcinit:
   304                           	opt stack 0
   305  00292C                     start_initialization:
   306                           	opt stack 0
   307  00292C                     __initialization:
   308                           	opt stack 0
   309                           
   310                           ; Clear objects allocated to BANK1 (50 bytes)
   311  00292C  EE01  F000         	lfsr	0,__pbssBANK1
   312  002930  0E32               	movlw	50
   313  002932                     clear_0:
   314  002932  6AEE               	clrf	postinc0,c
   315  002934  06E8               	decf	wreg,f,c
   316  002936  E1FD               	bnz	clear_0
   317                           
   318                           ; Clear objects allocated to BANK0 (57 bytes)
   319  002938  EE00  F0AB         	lfsr	0,__pbssBANK0
   320  00293C  0E39               	movlw	57
   321  00293E                     clear_1:
   322  00293E  6AEE               	clrf	postinc0,c
   323  002940  06E8               	decf	wreg,f,c
   324  002942  E1FD               	bnz	clear_1
   325                           
   326                           ; Clear objects allocated to COMRAM (21 bytes)
   327  002944  EE00  F035         	lfsr	0,__pbssCOMRAM
   328  002948  0E15               	movlw	21
   329  00294A                     clear_2:
   330  00294A  6AEE               	clrf	postinc0,c
   331  00294C  06E8               	decf	wreg,f,c
   332  00294E  E1FD               	bnz	clear_2
   333  002950                     end_of_initialization:
   334                           	opt stack 0
   335  002950                     __end_of__initialization:
   336                           	opt stack 0
   337  002950  904A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   338  002952  924A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   339  002954  0E00               	movlw	low (__Lmediumconst shr (0+16))
   340  002956  6EF8               	movwf	tblptru,c
   341  002958  0100               	movlb	0
   342  00295A  EF3B  F011         	goto	_main	;jump to C main() function
   343                           tblptru	equ	0xFF8
   344                           postinc0	equ	0xFEE
   345                           wreg	equ	0xFE8
   346                           
   347                           	psect	bssCOMRAM
   348  000035                     __pbssCOMRAM:
   349                           	opt stack 0
   350  000035                     _timer3ReloadVal:
   351                           	opt stack 0
   352  000035                     	ds	2
   353  000037                     _timer1ReloadVal:
   354                           	opt stack 0
   355  000037                     	ds	2
   356  000039                     _timer0ReloadVal:
   357                           	opt stack 0
   358  000039                     	ds	2
   359  00003B                     _p_i2c1_trb_current:
   360                           	opt stack 0
   361  00003B                     	ds	2
   362  00003D                     _timer0ReloadVal8bit:
   363                           	opt stack 0
   364  00003D                     	ds	1
   365  00003E                     I2C1_ISR@i2c_10bit_address_restart:
   366                           	opt stack 0
   367  00003E                     	ds	1
   368  00003F                     I2C1_ISR@i2c_bytes_left:
   369                           	opt stack 0
   370  00003F                     	ds	1
   371  000040                     _i2c1_trb_count:
   372                           	opt stack 0
   373  000040                     	ds	1
   374  000041                     _i2c1_state:
   375                           	opt stack 0
   376  000041                     	ds	1
   377  000042                     _eusart1RxCount:
   378                           	opt stack 0
   379  000042                     	ds	1
   380  000043                     _eusart1RxTail:
   381                           	opt stack 0
   382  000043                     	ds	1
   383  000044                     _eusart1TxBufferRemaining:
   384                           	opt stack 0
   385  000044                     	ds	1
   386  000045                     _eusart1TxTail:
   387                           	opt stack 0
   388  000045                     	ds	1
   389  000046                     _eusart1TxHead:
   390                           	opt stack 0
   391  000046                     	ds	1
   392  000047                     WriteSWSPI@input:
   393                           	opt stack 0
   394  000047                     	ds	1
   395  000048                     I2C1_ISR@i2c_address:
   396                           	opt stack 0
   397  000048                     	ds	2
   398                           tblptru	equ	0xFF8
   399                           postinc0	equ	0xFEE
   400                           wreg	equ	0xFE8
   401                           
   402                           	psect	bssBANK0
   403  0000AB                     __pbssBANK0:
   404                           	opt stack 0
   405  0000AB                     _eusart1TxBuffer:
   406                           	opt stack 0
   407  0000AB                     	ds	8
   408  0000B3                     _i2c1_object:
   409                           	opt stack 0
   410  0000B3                     	ds	7
   411  0000BA                     _ADC_Value:
   412                           	opt stack 0
   413  0000BA                     	ds	3
   414  0000BD                     I2C1_ISR@pi2c_buf_ptr:
   415                           	opt stack 0
   416  0000BD                     	ds	2
   417  0000BF                     _p_i2c1_current:
   418                           	opt stack 0
   419  0000BF                     	ds	2
   420  0000C1                     _TMR3_InterruptHandler:
   421                           	opt stack 0
   422  0000C1                     	ds	2
   423  0000C3                     _TMR2_InterruptHandler:
   424                           	opt stack 0
   425  0000C3                     	ds	2
   426  0000C5                     _TMR1_InterruptHandler:
   427                           	opt stack 0
   428  0000C5                     	ds	2
   429  0000C7                     	ds	1
   430  0000C8                     _ADC_Buffer:
   431                           	opt stack 0
   432  0000C8                     	ds	10
   433  0000D2                     I2C1_MasterRead@trBlock:
   434                           	opt stack 0
   435  0000D2                     	ds	6
   436  0000D8                     I2C1_MasterWrite@trBlock:
   437                           	opt stack 0
   438  0000D8                     	ds	6
   439  0000DE                     _i2c1_tr_queue:
   440                           	opt stack 0
   441  0000DE                     	ds	6
   442                           tblptru	equ	0xFF8
   443                           postinc0	equ	0xFEE
   444                           wreg	equ	0xFE8
   445                           
   446                           	psect	bssBANK1
   447  000100                     __pbssBANK1:
   448                           	opt stack 0
   449  000100                     _eusart1RxBuffer:
   450                           	opt stack 0
   451  000100                     	ds	50
   452                           tblptru	equ	0xFF8
   453                           postinc0	equ	0xFEE
   454                           wreg	equ	0xFE8
   455                           
   456                           	psect	cstackBANK0
   457  000060                     __pcstackBANK0:
   458                           	opt stack 0
   459  000060                     ___ftmul@exp:
   460                           	opt stack 0
   461                           
   462                           ; 1 bytes @ 0x0
   463  000060                     	ds	1
   464  000061                     ___ftmul@f3_as_product:
   465                           	opt stack 0
   466                           
   467                           ; 3 bytes @ 0x1
   468  000061                     	ds	3
   469  000064                     ___ftmul@cntr:
   470                           	opt stack 0
   471                           
   472                           ; 1 bytes @ 0x4
   473  000064                     	ds	1
   474  000065                     ___ftmul@sign:
   475                           	opt stack 0
   476                           
   477                           ; 1 bytes @ 0x5
   478  000065                     	ds	1
   479  000066                     ?_fround:
   480                           	opt stack 0
   481  000066                     ?_scale:
   482                           	opt stack 0
   483                           
   484                           ; 3 bytes @ 0x6
   485  000066                     	ds	3
   486  000069                     _fround$4059:
   487                           	opt stack 0
   488  000069                     _scale$4060:
   489                           	opt stack 0
   490                           
   491                           ; 3 bytes @ 0x9
   492  000069                     	ds	3
   493  00006C                     scale@scl:
   494                           	opt stack 0
   495  00006C                     _fround$4058:
   496                           	opt stack 0
   497                           
   498                           ; 3 bytes @ 0xC
   499  00006C                     	ds	1
   500  00006D                     ?___fttol:
   501                           	opt stack 0
   502  00006D                     ___fttol@f1:
   503                           	opt stack 0
   504                           
   505                           ; 3 bytes @ 0xD
   506  00006D                     	ds	2
   507  00006F                     fround@prec:
   508                           	opt stack 0
   509                           
   510                           ; 1 bytes @ 0xF
   511  00006F                     	ds	1
   512  000070                     ?___ftadd:
   513                           	opt stack 0
   514  000070                     ___ftadd@f1:
   515                           	opt stack 0
   516                           
   517                           ; 3 bytes @ 0x10
   518  000070                     	ds	1
   519  000071                     ??___fttol:
   520                           
   521                           ; 1 bytes @ 0x11
   522  000071                     	ds	2
   523  000073                     ___ftadd@f2:
   524                           	opt stack 0
   525                           
   526                           ; 3 bytes @ 0x13
   527  000073                     	ds	3
   528  000076                     ??___ftadd:
   529  000076                     ___fttol@sign1:
   530                           	opt stack 0
   531                           
   532                           ; 1 bytes @ 0x16
   533  000076                     	ds	1
   534  000077                     ___fttol@lval:
   535                           	opt stack 0
   536                           
   537                           ; 4 bytes @ 0x17
   538  000077                     	ds	2
   539  000079                     ___ftadd@sign:
   540                           	opt stack 0
   541                           
   542                           ; 1 bytes @ 0x19
   543  000079                     	ds	1
   544  00007A                     ___ftadd@exp2:
   545                           	opt stack 0
   546                           
   547                           ; 1 bytes @ 0x1A
   548  00007A                     	ds	1
   549  00007B                     ___ftadd@exp1:
   550                           	opt stack 0
   551  00007B                     ___fttol@exp1:
   552                           	opt stack 0
   553                           
   554                           ; 1 bytes @ 0x1B
   555  00007B                     	ds	1
   556  00007C                     ?___ftsub:
   557                           	opt stack 0
   558  00007C                     ___ftsub@f1:
   559                           	opt stack 0
   560                           
   561                           ; 3 bytes @ 0x1C
   562  00007C                     	ds	3
   563  00007F                     ___ftsub@f2:
   564                           	opt stack 0
   565                           
   566                           ; 3 bytes @ 0x1F
   567  00007F                     	ds	3
   568  000082                     ?_sprintf:
   569                           	opt stack 0
   570  000082                     sprintf@sp:
   571                           	opt stack 0
   572                           
   573                           ; 2 bytes @ 0x22
   574  000082                     	ds	2
   575  000084                     sprintf@f:
   576                           	opt stack 0
   577                           
   578                           ; 2 bytes @ 0x24
   579  000084                     	ds	5
   580  000089                     ??_sprintf:
   581                           
   582                           ; 1 bytes @ 0x29
   583  000089                     	ds	6
   584  00008F                     _sprintf$4061:
   585                           	opt stack 0
   586                           
   587                           ; 3 bytes @ 0x2F
   588  00008F                     	ds	3
   589  000092                     sprintf@cp:
   590                           	opt stack 0
   591                           
   592                           ; 2 bytes @ 0x32
   593  000092                     	ds	2
   594  000094                     sprintf@len:
   595                           	opt stack 0
   596                           
   597                           ; 2 bytes @ 0x34
   598  000094                     	ds	2
   599  000096                     sprintf@ap:
   600                           	opt stack 0
   601                           
   602                           ; 2 bytes @ 0x36
   603  000096                     	ds	2
   604  000098                     sprintf@flag:
   605                           	opt stack 0
   606                           
   607                           ; 2 bytes @ 0x38
   608  000098                     	ds	2
   609  00009A                     sprintf@val:
   610                           	opt stack 0
   611                           
   612                           ; 4 bytes @ 0x3A
   613  00009A                     	ds	4
   614  00009E                     sprintf@exp:
   615                           	opt stack 0
   616                           
   617                           ; 2 bytes @ 0x3E
   618  00009E                     	ds	2
   619  0000A0                     sprintf@tmpval:
   620                           	opt stack 0
   621                           
   622                           ; 4 bytes @ 0x40
   623  0000A0                     	ds	4
   624  0000A4                     sprintf@fval:
   625                           	opt stack 0
   626                           
   627                           ; 3 bytes @ 0x44
   628  0000A4                     	ds	3
   629  0000A7                     sprintf@prec:
   630                           	opt stack 0
   631                           
   632                           ; 2 bytes @ 0x47
   633  0000A7                     	ds	2
   634  0000A9                     sprintf@c:
   635                           	opt stack 0
   636                           
   637                           ; 1 bytes @ 0x49
   638  0000A9                     	ds	1
   639  0000AA                     main@uwu:
   640                           	opt stack 0
   641                           
   642                           ; 1 bytes @ 0x4A
   643  0000AA                     	ds	1
   644                           tblptru	equ	0xFF8
   645                           postinc0	equ	0xFEE
   646                           wreg	equ	0xFE8
   647                           
   648                           	psect	cstackCOMRAM
   649  000001                     __pcstackCOMRAM:
   650                           	opt stack 0
   651  000001                     ??_I2C1_ISR:
   652  000001                     
   653                           ; 1 bytes @ 0x0
   654  000001                     	ds	2
   655  000003                     ??_INTERRUPT_InterruptManager:
   656                           
   657                           ; 1 bytes @ 0x2
   658  000003                     	ds	18
   659  000015                     INTERRUPT_InterruptManager@__portb__:
   660                           	opt stack 0
   661                           
   662                           ; 1 bytes @ 0x14
   663  000015                     	ds	1
   664  000016                     ??_DelayPORXLCD:
   665  000016                     ??_Delay10KTCYx:
   666  000016                     ??_SetDDRamAddr:
   667  000016                     ??_isdigit:
   668  000016                     ?_ADC_GetConversion:
   669                           	opt stack 0
   670  000016                     ?___awmod:
   671                           	opt stack 0
   672  000016                     ?___ftpack:
   673                           	opt stack 0
   674  000016                     ?___ftneg:
   675                           	opt stack 0
   676  000016                     ?__tdiv_to_l_:
   677                           	opt stack 0
   678  000016                     ?__div_to_l_:
   679                           	opt stack 0
   680  000016                     ?___lldiv:
   681                           	opt stack 0
   682  000016                     ?___llmod:
   683                           	opt stack 0
   684  000016                     WriteCmdXLCD@cmd:
   685                           	opt stack 0
   686  000016                     WriteDataXLCD@data:
   687                           	opt stack 0
   688  000016                     ___awmod@dividend:
   689                           	opt stack 0
   690  000016                     __div_to_l_@f1:
   691                           	opt stack 0
   692  000016                     ___ftpack@arg:
   693                           	opt stack 0
   694  000016                     __tdiv_to_l_@f1:
   695                           	opt stack 0
   696  000016                     ___ftge@ff1:
   697                           	opt stack 0
   698  000016                     ___ftneg@f1:
   699                           	opt stack 0
   700  000016                     ___lldiv@dividend:
   701                           	opt stack 0
   702  000016                     ___llmod@dividend:
   703                           	opt stack 0
   704                           
   705                           ; 4 bytes @ 0x15
   706  000016                     	ds	1
   707  000017                     Delay10KTCYx@unit:
   708                           	opt stack 0
   709  000017                     _isdigit$3475:
   710                           	opt stack 0
   711                           
   712                           ; 1 bytes @ 0x16
   713  000017                     	ds	1
   714  000018                     ??_ADC_GetConversion:
   715  000018                     isdigit@c:
   716                           	opt stack 0
   717  000018                     ___awmod@divisor:
   718                           	opt stack 0
   719                           
   720                           ; 2 bytes @ 0x17
   721  000018                     	ds	1
   722  000019                     SetDDRamAddr@DDaddr:
   723                           	opt stack 0
   724  000019                     ___ftpack@exp:
   725                           	opt stack 0
   726  000019                     __div_to_l_@f2:
   727                           	opt stack 0
   728  000019                     __tdiv_to_l_@f2:
   729                           	opt stack 0
   730  000019                     ___ftge@ff2:
   731                           	opt stack 0
   732                           
   733                           ; 3 bytes @ 0x18
   734  000019                     	ds	1
   735  00001A                     OpenXLCD@lcdtype:
   736                           	opt stack 0
   737  00001A                     ADC_GetConversion@channel:
   738                           	opt stack 0
   739  00001A                     ___awmod@counter:
   740                           	opt stack 0
   741  00001A                     ___ftpack@sign:
   742                           	opt stack 0
   743  00001A                     ___lldiv@divisor:
   744                           	opt stack 0
   745  00001A                     ___llmod@divisor:
   746                           	opt stack 0
   747                           
   748                           ; 4 bytes @ 0x19
   749  00001A                     	ds	1
   750  00001B                     ??___ftpack:
   751  00001B                     ___awmod@sign:
   752                           	opt stack 0
   753                           
   754                           ; 1 bytes @ 0x1A
   755  00001B                     	ds	1
   756  00001C                     ??__tdiv_to_l_:
   757  00001C                     ??___ftge:
   758  00001C                     ?___awdiv:
   759                           	opt stack 0
   760  00001C                     ___awdiv@dividend:
   761                           	opt stack 0
   762  00001C                     __div_to_l_@quot:
   763                           	opt stack 0
   764                           
   765                           ; 4 bytes @ 0x1B
   766  00001C                     	ds	2
   767  00001E                     ?___lltoft:
   768                           	opt stack 0
   769  00001E                     ?___lwtoft:
   770                           	opt stack 0
   771  00001E                     ___llmod@counter:
   772                           	opt stack 0
   773  00001E                     ___awdiv@divisor:
   774                           	opt stack 0
   775  00001E                     ___lwtoft@c:
   776                           	opt stack 0
   777  00001E                     ___lldiv@quotient:
   778                           	opt stack 0
   779  00001E                     ___lltoft@c:
   780                           	opt stack 0
   781                           
   782                           ; 4 bytes @ 0x1D
   783  00001E                     	ds	1
   784  00001F                     __tdiv_to_l_@quot:
   785                           	opt stack 0
   786                           
   787                           ; 4 bytes @ 0x1E
   788  00001F                     	ds	1
   789  000020                     ___awdiv@counter:
   790                           	opt stack 0
   791  000020                     __div_to_l_@cntr:
   792                           	opt stack 0
   793                           
   794                           ; 1 bytes @ 0x1F
   795  000020                     	ds	1
   796  000021                     ___awdiv@sign:
   797                           	opt stack 0
   798  000021                     __div_to_l_@exp1:
   799                           	opt stack 0
   800                           
   801                           ; 1 bytes @ 0x20
   802  000021                     	ds	1
   803  000022                     ??___lltoft:
   804  000022                     ___lldiv@counter:
   805                           	opt stack 0
   806  000022                     ___awdiv@quotient:
   807                           	opt stack 0
   808                           
   809                           ; 2 bytes @ 0x21
   810  000022                     	ds	1
   811  000023                     __tdiv_to_l_@cntr:
   812                           	opt stack 0
   813                           
   814                           ; 1 bytes @ 0x22
   815  000023                     	ds	1
   816  000024                     ?___wmul:
   817                           	opt stack 0
   818  000024                     __tdiv_to_l_@exp1:
   819                           	opt stack 0
   820  000024                     ___wmul@multiplier:
   821                           	opt stack 0
   822                           
   823                           ; 2 bytes @ 0x23
   824  000024                     	ds	2
   825  000026                     ___lltoft@exp:
   826                           	opt stack 0
   827  000026                     ___wmul@multiplicand:
   828                           	opt stack 0
   829                           
   830                           ; 2 bytes @ 0x25
   831  000026                     	ds	2
   832  000028                     ___wmul@product:
   833                           	opt stack 0
   834                           
   835                           ; 2 bytes @ 0x27
   836  000028                     	ds	2
   837  00002A                     ?___ftmul:
   838                           	opt stack 0
   839  00002A                     ___ftmul@f1:
   840                           	opt stack 0
   841                           
   842                           ; 3 bytes @ 0x29
   843  00002A                     	ds	3
   844  00002D                     ___ftmul@f2:
   845                           	opt stack 0
   846                           
   847                           ; 3 bytes @ 0x2C
   848  00002D                     	ds	3
   849  000030                     ??___ftmul:
   850                           
   851                           ; 1 bytes @ 0x2F
   852  000030                     	ds	3
   853  000033                     ??_main:
   854  000033                     
   855                           ; 1 bytes @ 0x32
   856  000033                     	ds	2
   857                           tblptru	equ	0xFF8
   858                           postinc0	equ	0xFEE
   859                           wreg	equ	0xFE8
   860                           
   861 ;;
   862 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   863 ;;
   864 ;; *************** function _main *****************
   865 ;; Defined at:
   866 ;;		line 57 in file "main.c"
   867 ;; Parameters:    Size  Location     Type
   868 ;;		None
   869 ;; Auto vars:     Size  Location     Type
   870 ;;  uwu             1   74[BANK0 ] unsigned char 
   871 ;; Return value:  Size  Location     Type
   872 ;;                  1    wreg      void 
   873 ;; Registers used:
   874 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   875 ;; Tracked objects:
   876 ;;		On entry : 0/0
   877 ;;		On exit  : 0/0
   878 ;;		Unchanged: 0/0
   879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   880 ;;      Params:         0       0       0       0       0       0       0       0       0
   881 ;;      Locals:         0       1       0       0       0       0       0       0       0
   882 ;;      Temps:          2       0       0       0       0       0       0       0       0
   883 ;;      Totals:         2       1       0       0       0       0       0       0       0
   884 ;;Total ram usage:        3 bytes
   885 ;; Hardware stack levels required when called:    8
   886 ;; This function calls:
   887 ;;		_ADC_GetConversion
   888 ;;		_BusyXLCD
   889 ;;		_SYSTEM_Initialize
   890 ;;		_SetDDRamAddr
   891 ;;		_WriteCmdXLCD
   892 ;;		_WriteDataXLCD
   893 ;;		___lwtoft
   894 ;;		_sprintf
   895 ;; This function is called by:
   896 ;;		Startup code after reset
   897 ;; This function uses a non-reentrant model
   898 ;;
   899                           
   900                           	psect	text0
   901  002276                     __ptext0:
   902                           	opt stack 0
   903  002276                     _main:
   904                           	opt stack 23
   905                           
   906                           ;main.c: 60: SYSTEM_Initialize();
   907                           
   908                           ;incstack = 0
   909  002276  EC5E  F015         	call	_SYSTEM_Initialize	;wreg free
   910  00227A                     
   911                           ;main.c: 80: {
   912                           ;main.c: 81: unsigned char uwu = 0x00;
   913  00227A  0E00               	movlw	0
   914  00227C  0100               	movlb	0	; () banked
   915  00227E  6FAA               	movwf	main@uwu& (0+255),b
   916  002280                     
   917                           ; BSR set to: 0
   918                           
   919                           ; BSR set to: 0
   920  002280  EC79  F014         	call	_BusyXLCD	;wreg free
   921  002284  0900               	iorlw	0
   922  002286  A4D8               	btfss	status,2,c
   923  002288  D7FB               	goto	l563
   924                           
   925                           ;main.c: 84: SetDDRamAddr(uwu);
   926  00228A  0100               	movlb	0	; () banked
   927  00228C  51AA               	movf	main@uwu& (0+255),w,b
   928  00228E  ECCE  F013         	call	_SetDDRamAddr
   929  002292  EC79  F014         	call	_BusyXLCD	;wreg free
   930  002296  0900               	iorlw	0
   931  002298  A4D8               	btfss	status,2,c
   932  00229A  D7FB               	goto	l566
   933                           
   934                           ;main.c: 86: WriteDataXLCD(62);
   935  00229C  0E3E               	movlw	62
   936  00229E  EC1D  F014         	call	_WriteDataXLCD
   937  0022A2  EC79  F014         	call	_BusyXLCD	;wreg free
   938  0022A6  0900               	iorlw	0
   939  0022A8  A4D8               	btfss	status,2,c
   940  0022AA  D7FB               	goto	l569
   941                           
   942                           ;main.c: 89: SetDDRamAddr(0x01);
   943  0022AC  0E01               	movlw	1
   944  0022AE  ECCE  F013         	call	_SetDDRamAddr
   945  0022B2  EC79  F014         	call	_BusyXLCD	;wreg free
   946  0022B6  0900               	iorlw	0
   947  0022B8  A4D8               	btfss	status,2,c
   948  0022BA  D7FB               	goto	l572
   949                           
   950                           ;main.c: 91: WriteDataXLCD(35);
   951  0022BC  0E23               	movlw	35
   952  0022BE  EC1D  F014         	call	_WriteDataXLCD
   953  0022C2  EC79  F014         	call	_BusyXLCD	;wreg free
   954  0022C6  0900               	iorlw	0
   955  0022C8  A4D8               	btfss	status,2,c
   956  0022CA  D7FB               	goto	l575
   957                           
   958                           ;main.c: 94: SetDDRamAddr(0x02);
   959  0022CC  0E02               	movlw	2
   960  0022CE  ECCE  F013         	call	_SetDDRamAddr
   961  0022D2  EC79  F014         	call	_BusyXLCD	;wreg free
   962  0022D6  0900               	iorlw	0
   963  0022D8  A4D8               	btfss	status,2,c
   964  0022DA  D7FB               	goto	l578
   965                           
   966                           ;main.c: 96: WriteDataXLCD(38);
   967  0022DC  0E26               	movlw	38
   968  0022DE  EC1D  F014         	call	_WriteDataXLCD
   969  0022E2  EC79  F014         	call	_BusyXLCD	;wreg free
   970  0022E6  0900               	iorlw	0
   971  0022E8  A4D8               	btfss	status,2,c
   972  0022EA  D7FB               	goto	l581
   973                           
   974                           ;main.c: 99: SetDDRamAddr(0x03);
   975  0022EC  0E03               	movlw	3
   976  0022EE  ECCE  F013         	call	_SetDDRamAddr
   977  0022F2  EC79  F014         	call	_BusyXLCD	;wreg free
   978  0022F6  0900               	iorlw	0
   979  0022F8  A4D8               	btfss	status,2,c
   980  0022FA  D7FB               	goto	l584
   981                           
   982                           ;main.c: 101: WriteDataXLCD(60);
   983  0022FC  0E3C               	movlw	60
   984  0022FE  EC1D  F014         	call	_WriteDataXLCD
   985                           
   986                           ;main.c: 103: ADC_Value = ADC_GetConversion(0);
   987  002302  0E00               	movlw	0
   988  002304  ECAF  F014         	call	_ADC_GetConversion
   989  002308  C016  F01E         	movff	?_ADC_GetConversion,___lwtoft@c
   990  00230C  C017  F01F         	movff	?_ADC_GetConversion+1,___lwtoft@c+1
   991  002310  EC1A  F015         	call	___lwtoft	;wreg free
   992  002314  C01E  F0BA         	movff	?___lwtoft,_ADC_Value
   993  002318  C01F  F0BB         	movff	?___lwtoft+1,_ADC_Value+1
   994  00231C  C020  F0BC         	movff	?___lwtoft+2,_ADC_Value+2
   995                           
   996                           ;main.c: 108: sprintf(ADC_Buffer, "%.0f%c ", ADC_Value);
   997  002320  0EC8               	movlw	low _ADC_Buffer
   998  002322  0100               	movlb	0	; () banked
   999  002324  6F82               	movwf	sprintf@sp& (0+255),b
  1000  002326  0E00               	movlw	high _ADC_Buffer
  1001  002328  0100               	movlb	0	; () banked
  1002  00232A  6F83               	movwf	(sprintf@sp+1)& (0+255),b
  1003  00232C  0E77               	movlw	low STR_1
  1004  00232E  0100               	movlb	0	; () banked
  1005  002330  6F84               	movwf	sprintf@f& (0+255),b
  1006  002332  0E08               	movlw	high STR_1
  1007  002334  0100               	movlb	0	; () banked
  1008  002336  6F85               	movwf	(sprintf@f+1)& (0+255),b
  1009  002338  C0BA  F086         	movff	_ADC_Value,?_sprintf+4
  1010  00233C  C0BB  F087         	movff	_ADC_Value+1,?_sprintf+5
  1011  002340  C0BC  F088         	movff	_ADC_Value+2,?_sprintf+6
  1012  002344  EC40  F004         	call	_sprintf	;wreg free
  1013  002348  EC79  F014         	call	_BusyXLCD	;wreg free
  1014  00234C  0900               	iorlw	0
  1015  00234E  A4D8               	btfss	status,2,c
  1016  002350  D7FB               	goto	l587
  1017                           
  1018                           ;main.c: 111: SetDDRamAddr(0x05);
  1019  002352  0E05               	movlw	5
  1020  002354  ECCE  F013         	call	_SetDDRamAddr
  1021                           
  1022                           ;main.c: 116: _delay((unsigned long)((35)*(24000000ul/4000.0)));
  1023  002358  0E02               	movlw	2
  1024  00235A  6E34               	movwf	(??_main+1)& (0+255),c
  1025  00235C  0E11               	movlw	17
  1026  00235E  6E33               	movwf	??_main& (0+255),c
  1027  002360  0EB7               	movlw	183
  1028  002362                     u7227:
  1029  002362  2EE8               	decfsz	wreg,f,c
  1030  002364  D7FE               	bra	u7227
  1031  002366  2E33               	decfsz	??_main& (0+255),f,c
  1032  002368  D7FC               	bra	u7227
  1033  00236A  2E34               	decfsz	(??_main+1)& (0+255),f,c
  1034  00236C  D7FA               	bra	u7227
  1035  00236E  F000               	nop	
  1036  002370  EC79  F014         	call	_BusyXLCD	;wreg free
  1037  002374  0900               	iorlw	0
  1038  002376  A4D8               	btfss	status,2,c
  1039  002378  D7FB               	goto	l590
  1040                           
  1041                           ;main.c: 119: WriteCmdXLCD(0b00000001);
  1042  00237A  0E01               	movlw	1
  1043  00237C  EC3C  F014         	call	_WriteCmdXLCD
  1044  002380  D77C               	goto	l561
  1045  002382                     __end_of_main:
  1046                           	opt stack 0
  1047                           tblptru	equ	0xFF8
  1048                           postinc0	equ	0xFEE
  1049                           wreg	equ	0xFE8
  1050                           status	equ	0xFD8
  1051                           
  1052 ;; *************** function _sprintf *****************
  1053 ;; Defined at:
  1054 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
  1055 ;; Parameters:    Size  Location     Type
  1056 ;;  sp              2   34[BANK0 ] PTR unsigned char 
  1057 ;;		 -> ADC_Buffer(10), 
  1058 ;;  f               2   36[BANK0 ] PTR const unsigned char 
  1059 ;;		 -> STR_1(8), 
  1060 ;; Auto vars:     Size  Location     Type
  1061 ;;  tmpval          4   64[BANK0 ] struct .
  1062 ;;  val             4   58[BANK0 ] unsigned long 
  1063 ;;  fval            3   68[BANK0 ] unsigned long 
  1064 ;;  prec            2   71[BANK0 ] int 
  1065 ;;  exp             2   62[BANK0 ] int 
  1066 ;;  flag            2   56[BANK0 ] unsigned short 
  1067 ;;  ap              2   54[BANK0 ] PTR void [1]
  1068 ;;		 -> ?_sprintf(2), 
  1069 ;;  len             2   52[BANK0 ] unsigned int 
  1070 ;;  cp              2   50[BANK0 ] PTR const unsigned char 
  1071 ;;		 -> sprintf@c(1), 
  1072 ;;  width           2    0        int 
  1073 ;;  c               1   73[BANK0 ] char 
  1074 ;;  d               1    0        unsigned char 
  1075 ;; Return value:  Size  Location     Type
  1076 ;;                  2   34[BANK0 ] int 
  1077 ;; Registers used:
  1078 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1079 ;; Tracked objects:
  1080 ;;		On entry : 0/0
  1081 ;;		On exit  : 0/0
  1082 ;;		Unchanged: 0/0
  1083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1084 ;;      Params:         0       7       0       0       0       0       0       0       0
  1085 ;;      Locals:         0      27       0       0       0       0       0       0       0
  1086 ;;      Temps:          0       6       0       0       0       0       0       0       0
  1087 ;;      Totals:         0      40       0       0       0       0       0       0       0
  1088 ;;Total ram usage:       40 bytes
  1089 ;; Hardware stack levels used:    1
  1090 ;; Hardware stack levels required when called:    6
  1091 ;; This function calls:
  1092 ;;		___awdiv
  1093 ;;		___ftadd
  1094 ;;		___ftge
  1095 ;;		___ftmul
  1096 ;;		___ftneg
  1097 ;;		___ftsub
  1098 ;;		___fttol
  1099 ;;		___lldiv
  1100 ;;		___llmod
  1101 ;;		___lltoft
  1102 ;;		___wmul
  1103 ;;		__div_to_l_
  1104 ;;		__tdiv_to_l_
  1105 ;;		_fround
  1106 ;;		_isdigit
  1107 ;;		_scale
  1108 ;; This function is called by:
  1109 ;;		_main
  1110 ;; This function uses a non-reentrant model
  1111 ;;
  1112                           
  1113                           	psect	text1
  1114  000880                     __ptext1:
  1115                           	opt stack 0
  1116  000880                     _sprintf:
  1117                           	opt stack 24
  1118                           
  1119                           ;doprnt.c: 494: va_list ap;
  1120                           ;doprnt.c: 499: signed char c;
  1121                           ;doprnt.c: 501: int width;
  1122                           ;doprnt.c: 504: int prec;
  1123                           ;doprnt.c: 508: unsigned short flag;
  1124                           ;doprnt.c: 515: char d;
  1125                           ;doprnt.c: 516: double fval;
  1126                           ;doprnt.c: 517: int exp;
  1127                           ;doprnt.c: 523: union {
  1128                           ;doprnt.c: 524: unsigned long vd;
  1129                           ;doprnt.c: 525: double integ;
  1130                           ;doprnt.c: 526: } tmpval;
  1131                           ;doprnt.c: 528: unsigned long val;
  1132                           ;doprnt.c: 529: unsigned len;
  1133                           ;doprnt.c: 530: const char * cp;
  1134                           ;doprnt.c: 533: *ap = __va_start();
  1135                           
  1136                           ;incstack = 0
  1137  000880  0E86               	movlw	low (?_sprintf+4)
  1138  000882  0100               	movlb	0	; () banked
  1139  000884  6F96               	movwf	sprintf@ap& (0+255),b
  1140  000886  0E00               	movlw	high (?_sprintf+4)
  1141  000888  0100               	movlb	0	; () banked
  1142  00088A  6F97               	movwf	(sprintf@ap+1)& (0+255),b
  1143                           
  1144                           ;doprnt.c: 536: while(c = *f++) {
  1145  00088C  EF75  F008         	goto	l1478
  1146  000890                     
  1147                           ; BSR set to: 0
  1148                           ;doprnt.c: 538: if(c != '%')
  1149                           
  1150                           ; BSR set to: 0
  1151  000890  0E25               	movlw	37
  1152  000892  0100               	movlb	0	; () banked
  1153  000894  19A9               	xorwf	sprintf@c& (0+255),w,b
  1154  000896  B4D8               	btfsc	status,2,c
  1155  000898  D008               	goto	l1418
  1156                           
  1157                           ; BSR set to: 0
  1158                           ;doprnt.c: 540: {
  1159                           ;doprnt.c: 541: ((*sp++ = (c)));
  1160  00089A  C082  FFD9         	movff	sprintf@sp,fsr2l
  1161  00089E  C083  FFDA         	movff	sprintf@sp+1,fsr2h
  1162  0008A2  C0A9  FFDF         	movff	sprintf@c,indf2
  1163  0008A6  EF72  F008         	goto	l6862
  1164  0008AA                     l1418:
  1165                           
  1166                           ; BSR set to: 0
  1167                           ;doprnt.c: 543: }
  1168                           ;doprnt.c: 548: flag = 0;
  1169                           
  1170                           ; BSR set to: 0
  1171  0008AA  0E00               	movlw	0
  1172  0008AC  0100               	movlb	0	; () banked
  1173  0008AE  6F99               	movwf	(sprintf@flag+1)& (0+255),b
  1174  0008B0  0E00               	movlw	0
  1175  0008B2  6F98               	movwf	sprintf@flag& (0+255),b
  1176                           
  1177                           ; BSR set to: 0
  1178                           ;doprnt.c: 611: if(*f == '.') {
  1179  0008B4  C084  FFF6         	movff	sprintf@f,tblptrl
  1180  0008B8  C085  FFF7         	movff	sprintf@f+1,tblptrh
  1181  0008BC                     	if	0	;tblptru may be non-zero
  1182  0008BC                     	endif
  1183  0008BC                     	if	0	;tblptru may be non-zero
  1184  0008BC                     	endif
  1185  0008BC  0008               	tblrd		*
  1186  0008BE  50F5               	movf	tablat,w,c
  1187  0008C0  0A2E               	xorlw	46
  1188  0008C2  A4D8               	btfss	status,2,c
  1189  0008C4  D034               	goto	l1419
  1190                           
  1191                           ; BSR set to: 0
  1192                           ;doprnt.c: 612: flag |= 0x4000;
  1193  0008C6  0100               	movlb	0	; () banked
  1194  0008C8  8D99               	bsf	(sprintf@flag+1)& (0+255),6,b
  1195                           
  1196                           ;doprnt.c: 613: f++;
  1197  0008CA  0100               	movlb	0	; () banked
  1198  0008CC  4B84               	infsnz	sprintf@f& (0+255),f,b
  1199  0008CE  2B85               	incf	(sprintf@f+1)& (0+255),f,b
  1200                           
  1201                           ; BSR set to: 0
  1202                           ;doprnt.c: 620: {
  1203                           ;doprnt.c: 621: prec = 0;
  1204  0008D0  0E00               	movlw	0
  1205  0008D2  0100               	movlb	0	; () banked
  1206  0008D4  6FA8               	movwf	(sprintf@prec+1)& (0+255),b
  1207  0008D6  0E00               	movlw	0
  1208  0008D8  6FA7               	movwf	sprintf@prec& (0+255),b
  1209                           
  1210                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1211  0008DA  D01E               	goto	l1420
  1212  0008DC                     
  1213                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1214                           
  1215                           ; BSR set to: 0
  1216  0008DC  C0A7  F024         	movff	sprintf@prec,___wmul@multiplier
  1217  0008E0  C0A8  F025         	movff	sprintf@prec+1,___wmul@multiplier+1
  1218  0008E4  0E00               	movlw	0
  1219  0008E6  6E27               	movwf	___wmul@multiplicand+1,c
  1220  0008E8  0E0A               	movlw	10
  1221  0008EA  6E26               	movwf	___wmul@multiplicand,c
  1222  0008EC  ECF5  F014         	call	___wmul	;wreg free
  1223  0008F0  C084  FFF6         	movff	sprintf@f,tblptrl
  1224  0008F4  C085  FFF7         	movff	sprintf@f+1,tblptrh
  1225  0008F8                     	if	0	;tblptru may be non-zero
  1226  0008F8                     	endif
  1227  0008F8                     	if	0	;tblptru may be non-zero
  1228  0008F8                     	endif
  1229  0008F8  0008               	tblrd		*
  1230  0008FA  50F5               	movf	tablat,w,c
  1231  0008FC  2624               	addwf	?___wmul,f,c
  1232  0008FE  0E00               	movlw	0
  1233  000900  2225               	addwfc	?___wmul+1,f,c
  1234  000902  0ED0               	movlw	208
  1235  000904  2424               	addwf	?___wmul,w,c
  1236  000906  0100               	movlb	0	; () banked
  1237  000908  6FA7               	movwf	sprintf@prec& (0+255),b
  1238  00090A  0EFF               	movlw	255
  1239  00090C  2025               	addwfc	?___wmul+1,w,c
  1240  00090E  0100               	movlb	0	; () banked
  1241  000910  6FA8               	movwf	(sprintf@prec+1)& (0+255),b
  1242                           
  1243                           ; BSR set to: 0
  1244  000912  0100               	movlb	0	; () banked
  1245  000914  4B84               	infsnz	sprintf@f& (0+255),f,b
  1246  000916  2B85               	incf	(sprintf@f+1)& (0+255),f,b
  1247  000918                     l1420:
  1248                           
  1249                           ; BSR set to: 0
  1250                           
  1251                           ; BSR set to: 0
  1252  000918  C084  FFF6         	movff	sprintf@f,tblptrl
  1253  00091C  C085  FFF7         	movff	sprintf@f+1,tblptrh
  1254  000920                     	if	0	;tblptru may be non-zero
  1255  000920                     	endif
  1256  000920                     	if	0	;tblptru may be non-zero
  1257  000920                     	endif
  1258  000920  0008               	tblrd		*
  1259  000922  50F5               	movf	tablat,w,c
  1260  000924  EC2C  F015         	call	_isdigit
  1261  000928  A0D8               	btfss	status,0,c
  1262  00092A  D055               	goto	l1424
  1263  00092C  D7D7               	goto	l1421
  1264  00092E                     l1419:
  1265                           
  1266                           ;doprnt.c: 626: prec = 0;
  1267  00092E  0E00               	movlw	0
  1268  000930  0100               	movlb	0	; () banked
  1269  000932  6FA8               	movwf	(sprintf@prec+1)& (0+255),b
  1270  000934  0E00               	movlw	0
  1271  000936  6FA7               	movwf	sprintf@prec& (0+255),b
  1272                           
  1273                           ; BSR set to: 0
  1274                           ;doprnt.c: 628: flag |= 0x1000;
  1275  000938  0100               	movlb	0	; () banked
  1276  00093A  8999               	bsf	(sprintf@flag+1)& (0+255),4,b
  1277                           
  1278                           ; BSR set to: 0
  1279                           ;doprnt.c: 630: }
  1280                           ;doprnt.c: 635: switch(c = *f++) {
  1281  00093C  D04C               	goto	l1424
  1282  00093E                     
  1283                           ; BSR set to: 0
  1284                           ;doprnt.c: 663: flag |= 0x400;
  1285                           
  1286                           ; BSR set to: 0
  1287  00093E  0100               	movlb	0	; () banked
  1288  000940  8599               	bsf	(sprintf@flag+1)& (0+255),2,b
  1289                           
  1290                           ;doprnt.c: 664: break;
  1291  000942  D05F               	goto	l1428
  1292  000944                     
  1293                           ; BSR set to: 0
  1294                           ;doprnt.c: 753: if(prec && prec < len)
  1295                           
  1296                           ; BSR set to: 0
  1297  000944  0100               	movlb	0	; () banked
  1298  000946  51A7               	movf	sprintf@prec& (0+255),w,b
  1299  000948  0100               	movlb	0	; () banked
  1300  00094A  11A8               	iorwf	(sprintf@prec+1)& (0+255),w,b
  1301  00094C  B4D8               	btfsc	status,2,c
  1302  00094E  D01F               	goto	l1431
  1303                           
  1304                           ; BSR set to: 0
  1305  000950  0100               	movlb	0	; () banked
  1306  000952  5194               	movf	sprintf@len& (0+255),w,b
  1307  000954  0100               	movlb	0	; () banked
  1308  000956  5DA7               	subwf	sprintf@prec& (0+255),w,b
  1309  000958  0100               	movlb	0	; () banked
  1310  00095A  5195               	movf	(sprintf@len+1)& (0+255),w,b
  1311  00095C  0100               	movlb	0	; () banked
  1312  00095E  59A8               	subwfb	(sprintf@prec+1)& (0+255),w,b
  1313  000960  B0D8               	btfsc	status,0,c
  1314  000962  D015               	goto	l1431
  1315                           
  1316                           ; BSR set to: 0
  1317                           ;doprnt.c: 754: len = prec;
  1318  000964  C0A7  F094         	movff	sprintf@prec,sprintf@len
  1319  000968  C0A8  F095         	movff	sprintf@prec+1,sprintf@len+1
  1320                           
  1321                           ; BSR set to: 0
  1322                           ;doprnt.c: 767: while(len--)
  1323  00096C  D010               	goto	l1431
  1324  00096E                     l6676:
  1325                           
  1326                           ; BSR set to: 0
  1327                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
  1328  00096E  C092  FFD9         	movff	sprintf@cp,fsr2l
  1329  000972  C093  FFDA         	movff	sprintf@cp+1,fsr2h
  1330  000976  C082  FFE1         	movff	sprintf@sp,fsr1l
  1331  00097A  C083  FFE2         	movff	sprintf@sp+1,fsr1h
  1332  00097E  CFDF FFE7          	movff	indf2,indf1
  1333                           
  1334                           ; BSR set to: 0
  1335  000982  0100               	movlb	0	; () banked
  1336  000984  4B92               	infsnz	sprintf@cp& (0+255),f,b
  1337  000986  2B93               	incf	(sprintf@cp+1)& (0+255),f,b
  1338                           
  1339                           ; BSR set to: 0
  1340  000988  0100               	movlb	0	; () banked
  1341  00098A  4B82               	infsnz	sprintf@sp& (0+255),f,b
  1342  00098C  2B83               	incf	(sprintf@sp+1)& (0+255),f,b
  1343  00098E                     l1431:
  1344                           
  1345                           ; BSR set to: 0
  1346                           
  1347                           ; BSR set to: 0
  1348  00098E  0100               	movlb	0	; () banked
  1349  000990  0794               	decf	sprintf@len& (0+255),f,b
  1350  000992  A0D8               	btfss	status,0,c
  1351  000994  0795               	decf	(sprintf@len+1)& (0+255),f,b
  1352  000996  0100               	movlb	0	; () banked
  1353  000998  2994               	incf	sprintf@len& (0+255),w,b
  1354  00099A  E1E9               	bnz	l6676
  1355  00099C  0100               	movlb	0	; () banked
  1356  00099E  2995               	incf	(sprintf@len+1)& (0+255),w,b
  1357  0009A0  B4D8               	btfsc	status,2,c
  1358  0009A2  D3A3               	goto	l1478
  1359  0009A4  D7E4               	goto	l1432
  1360  0009A6                     
  1361                           ; BSR set to: 0
  1362                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  1363                           
  1364                           ; BSR set to: 0
  1365  0009A6  C096  FFD9         	movff	sprintf@ap,fsr2l
  1366  0009AA  C097  FFDA         	movff	sprintf@ap+1,fsr2h
  1367  0009AE  50DF               	movf	indf2,w,c
  1368  0009B0  0100               	movlb	0	; () banked
  1369  0009B2  6FA9               	movwf	sprintf@c& (0+255),b
  1370                           
  1371                           ; BSR set to: 0
  1372  0009B4  0E02               	movlw	2
  1373  0009B6  0100               	movlb	0	; () banked
  1374  0009B8  2796               	addwf	sprintf@ap& (0+255),f,b
  1375  0009BA  0E00               	movlw	0
  1376  0009BC  2397               	addwfc	(sprintf@ap+1)& (0+255),f,b
  1377  0009BE                     
  1378                           ; BSR set to: 0
  1379                           ;doprnt.c: 805: cp = (char *)&c;
  1380                           
  1381                           ; BSR set to: 0
  1382  0009BE  0EA9               	movlw	low sprintf@c
  1383  0009C0  0100               	movlb	0	; () banked
  1384  0009C2  6F92               	movwf	sprintf@cp& (0+255),b
  1385  0009C4  0E00               	movlw	high sprintf@c
  1386  0009C6  0100               	movlb	0	; () banked
  1387  0009C8  6F93               	movwf	(sprintf@cp+1)& (0+255),b
  1388                           
  1389                           ; BSR set to: 0
  1390                           ;doprnt.c: 806: len = 1;
  1391  0009CA  0E00               	movlw	0
  1392  0009CC  0100               	movlb	0	; () banked
  1393  0009CE  6F95               	movwf	(sprintf@len+1)& (0+255),b
  1394  0009D0  0E01               	movlw	1
  1395  0009D2  6F94               	movwf	sprintf@len& (0+255),b
  1396                           
  1397                           ;doprnt.c: 807: goto dostring;
  1398  0009D4  D7B7               	goto	l1429
  1399  0009D6                     l1424:
  1400                           
  1401                           ; BSR set to: 0
  1402  0009D6  C084  FFF6         	movff	sprintf@f,tblptrl
  1403  0009DA  C085  FFF7         	movff	sprintf@f+1,tblptrh
  1404  0009DE  0100               	movlb	0	; () banked
  1405  0009E0  4B84               	infsnz	sprintf@f& (0+255),f,b
  1406  0009E2  2B85               	incf	(sprintf@f+1)& (0+255),f,b
  1407  0009E4                     	if	0	;tblptru may be non-zero
  1408  0009E4                     	endif
  1409  0009E4                     	if	0	;tblptru may be non-zero
  1410  0009E4                     	endif
  1411  0009E4  0008               	tblrd		*
  1412  0009E6  CFF5 F0A9          	movff	tablat,sprintf@c
  1413  0009EA  0100               	movlb	0	; () banked
  1414  0009EC  51A9               	movf	sprintf@c& (0+255),w,b
  1415                           
  1416                           ; Switch size 1, requested type "space"
  1417                           ; Number of cases is 3, Range of values is 0 to 102
  1418                           ; switch strategies available:
  1419                           ; Name         Instructions Cycles
  1420                           ; simple_byte           10     6 (average)
  1421                           ;	Chosen strategy is simple_byte
  1422  0009EE  0A00               	xorlw	0	; case 0
  1423  0009F0  B4D8               	btfsc	status,2,c
  1424  0009F2  D38A               	goto	u7060
  1425  0009F4  0A63               	xorlw	99	; case 99
  1426  0009F6  B4D8               	btfsc	status,2,c
  1427  0009F8  D7D6               	goto	l1434
  1428  0009FA  0A05               	xorlw	5	; case 102
  1429  0009FC  B4D8               	btfsc	status,2,c
  1430  0009FE  D79F               	goto	l1427
  1431  000A00  D7DE               	goto	l1435
  1432  000A02                     l1428:
  1433                           
  1434                           ; BSR set to: 0
  1435                           ;doprnt.c: 825: if(flag & (0x700)) {
  1436                           
  1437                           ; BSR set to: 0
  1438  000A02  0E07               	movlw	7
  1439  000A04  0100               	movlb	0	; () banked
  1440  000A06  1599               	andwf	(sprintf@flag+1)& (0+255),w,b
  1441  000A08  B4D8               	btfsc	status,2,c
  1442  000A0A  D317               	goto	l1436
  1443                           
  1444                           ; BSR set to: 0
  1445                           ;doprnt.c: 827: if(flag & 0x1000)
  1446  000A0C  0100               	movlb	0	; () banked
  1447  000A0E  A999               	btfss	(sprintf@flag+1)& (0+255),4,b
  1448  000A10  D005               	goto	l1437
  1449                           
  1450                           ; BSR set to: 0
  1451                           ;doprnt.c: 829: prec = 6;
  1452  000A12  0E00               	movlw	0
  1453  000A14  0100               	movlb	0	; () banked
  1454  000A16  6FA8               	movwf	(sprintf@prec+1)& (0+255),b
  1455  000A18  0E06               	movlw	6
  1456  000A1A  6FA7               	movwf	sprintf@prec& (0+255),b
  1457  000A1C                     l1437:
  1458                           
  1459                           ; BSR set to: 0
  1460                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1461                           
  1462                           ; BSR set to: 0
  1463  000A1C  C096  FFD9         	movff	sprintf@ap,fsr2l
  1464  000A20  C097  FFDA         	movff	sprintf@ap+1,fsr2h
  1465  000A24  CFDE F0A4          	movff	postinc2,sprintf@fval
  1466  000A28  CFDE F0A5          	movff	postinc2,sprintf@fval+1
  1467  000A2C  CFDD F0A6          	movff	postdec2,sprintf@fval+2
  1468                           
  1469                           ; BSR set to: 0
  1470  000A30  0E03               	movlw	3
  1471  000A32  0100               	movlb	0	; () banked
  1472  000A34  2796               	addwf	sprintf@ap& (0+255),f,b
  1473  000A36  0E00               	movlw	0
  1474  000A38  2397               	addwfc	(sprintf@ap+1)& (0+255),f,b
  1475                           
  1476                           ; BSR set to: 0
  1477                           ;doprnt.c: 831: if(fval < 0.0) {
  1478  000A3A  0100               	movlb	0	; () banked
  1479  000A3C  AFA6               	btfss	(sprintf@fval+2)& (0+255),7,b
  1480  000A3E  D011               	goto	l1438
  1481                           
  1482                           ; BSR set to: 0
  1483                           ;doprnt.c: 832: fval = -fval;
  1484  000A40  C0A4  F016         	movff	sprintf@fval,___ftneg@f1
  1485  000A44  C0A5  F017         	movff	sprintf@fval+1,___ftneg@f1+1
  1486  000A48  C0A6  F018         	movff	sprintf@fval+2,___ftneg@f1+2
  1487  000A4C  EC08  F015         	call	___ftneg	;wreg free
  1488  000A50  C016  F0A4         	movff	?___ftneg,sprintf@fval
  1489  000A54  C017  F0A5         	movff	?___ftneg+1,sprintf@fval+1
  1490  000A58  C018  F0A6         	movff	?___ftneg+2,sprintf@fval+2
  1491                           
  1492                           ;doprnt.c: 833: flag |= 0x03;
  1493  000A5C  0E03               	movlw	3
  1494  000A5E  0100               	movlb	0	; () banked
  1495  000A60  1398               	iorwf	sprintf@flag& (0+255),f,b
  1496  000A62                     l1438:
  1497                           
  1498                           ; BSR set to: 0
  1499                           ;doprnt.c: 834: }
  1500                           ;doprnt.c: 835: exp = 0;
  1501                           
  1502                           ; BSR set to: 0
  1503  000A62  0E00               	movlw	0
  1504  000A64  0100               	movlb	0	; () banked
  1505  000A66  6F9F               	movwf	(sprintf@exp+1)& (0+255),b
  1506  000A68  0E00               	movlw	0
  1507  000A6A  6F9E               	movwf	sprintf@exp& (0+255),b
  1508                           
  1509                           ; BSR set to: 0
  1510                           ;doprnt.c: 836: if( fval!=0) {
  1511  000A6C  0100               	movlb	0	; () banked
  1512  000A6E  51A4               	movf	sprintf@fval& (0+255),w,b
  1513  000A70  0100               	movlb	0	; () banked
  1514  000A72  11A5               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1515  000A74  0100               	movlb	0	; () banked
  1516  000A76  11A6               	iorwf	(sprintf@fval+2)& (0+255),w,b
  1517  000A78  B4D8               	btfsc	status,2,c
  1518  000A7A  D091               	goto	l1443
  1519                           
  1520                           ; BSR set to: 0
  1521                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1522  000A7C  0E82               	movlw	130
  1523  000A7E  0100               	movlb	0	; () banked
  1524  000A80  6F89               	movwf	??_sprintf& (0+255),b
  1525  000A82  0EFF               	movlw	255
  1526  000A84  0100               	movlb	0	; () banked
  1527  000A86  6F8A               	movwf	(??_sprintf+1)& (0+255),b
  1528  000A88  C0A4  F08B         	movff	sprintf@fval,??_sprintf+2
  1529  000A8C  C0A5  F08C         	movff	sprintf@fval+1,??_sprintf+3
  1530  000A90  C0A6  F08D         	movff	sprintf@fval+2,??_sprintf+4
  1531  000A94  C0A7  F08E         	movff	sprintf@fval+3,??_sprintf+5
  1532  000A98  0E10               	movlw	16
  1533  000A9A  D006               	goto	u6810
  1534  000A9C                     u6815:
  1535  000A9C  0100               	movlb	0	; () banked
  1536  000A9E  90D8               	bcf	status,0,c
  1537  000AA0  338E               	rrcf	(??_sprintf+5)& (0+255),f,b
  1538  000AA2  338D               	rrcf	(??_sprintf+4)& (0+255),f,b
  1539  000AA4  338C               	rrcf	(??_sprintf+3)& (0+255),f,b
  1540  000AA6  338B               	rrcf	(??_sprintf+2)& (0+255),f,b
  1541  000AA8                     u6810:
  1542  000AA8  2EE8               	decfsz	wreg,f,c
  1543  000AAA  D7F8               	goto	u6815
  1544  000AAC  0100               	movlb	0	; () banked
  1545  000AAE  518B               	movf	(??_sprintf+2)& (0+255),w,b
  1546  000AB0  0100               	movlb	0	; () banked
  1547  000AB2  2589               	addwf	??_sprintf& (0+255),w,b
  1548  000AB4  0100               	movlb	0	; () banked
  1549  000AB6  6F9E               	movwf	sprintf@exp& (0+255),b
  1550  000AB8  0E00               	movlw	0
  1551  000ABA  0100               	movlb	0	; () banked
  1552  000ABC  218A               	addwfc	(??_sprintf+1)& (0+255),w,b
  1553  000ABE  0100               	movlb	0	; () banked
  1554  000AC0  6F9F               	movwf	(sprintf@exp+1)& (0+255),b
  1555                           
  1556                           ; BSR set to: 0
  1557                           ;doprnt.c: 838: exp--;
  1558  000AC2  0100               	movlb	0	; () banked
  1559  000AC4  079E               	decf	sprintf@exp& (0+255),f,b
  1560  000AC6  A0D8               	btfss	status,0,c
  1561  000AC8  079F               	decf	(sprintf@exp+1)& (0+255),f,b
  1562                           
  1563                           ; BSR set to: 0
  1564                           ;doprnt.c: 839: exp *= 3;
  1565  000ACA  C09E  F024         	movff	sprintf@exp,___wmul@multiplier
  1566  000ACE  C09F  F025         	movff	sprintf@exp+1,___wmul@multiplier+1
  1567  000AD2  0E00               	movlw	0
  1568  000AD4  6E27               	movwf	___wmul@multiplicand+1,c
  1569  000AD6  0E03               	movlw	3
  1570  000AD8  6E26               	movwf	___wmul@multiplicand,c
  1571  000ADA  ECF5  F014         	call	___wmul	;wreg free
  1572  000ADE  C024  F09E         	movff	?___wmul,sprintf@exp
  1573  000AE2  C025  F09F         	movff	?___wmul+1,sprintf@exp+1
  1574                           
  1575                           ;doprnt.c: 840: exp /= 10;
  1576  000AE6  C09E  F01C         	movff	sprintf@exp,___awdiv@dividend
  1577  000AEA  C09F  F01D         	movff	sprintf@exp+1,___awdiv@dividend+1
  1578  000AEE  0E00               	movlw	0
  1579  000AF0  6E1F               	movwf	___awdiv@divisor+1,c
  1580  000AF2  0E0A               	movlw	10
  1581  000AF4  6E1E               	movwf	___awdiv@divisor,c
  1582  000AF6  ECB2  F012         	call	___awdiv	;wreg free
  1583  000AFA  C01C  F09E         	movff	?___awdiv,sprintf@exp
  1584  000AFE  C01D  F09F         	movff	?___awdiv+1,sprintf@exp+1
  1585                           
  1586                           ;doprnt.c: 841: if(exp < 0)
  1587  000B02  0100               	movlb	0	; () banked
  1588  000B04  AF9F               	btfss	(sprintf@exp+1)& (0+255),7,b
  1589  000B06  D004               	goto	l1440
  1590                           
  1591                           ; BSR set to: 0
  1592                           ;doprnt.c: 842: exp--;
  1593  000B08  0100               	movlb	0	; () banked
  1594  000B0A  079E               	decf	sprintf@exp& (0+255),f,b
  1595  000B0C  A0D8               	btfss	status,0,c
  1596  000B0E  079F               	decf	(sprintf@exp+1)& (0+255),f,b
  1597  000B10                     l1440:
  1598                           
  1599                           ; BSR set to: 0
  1600                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1601                           
  1602                           ; BSR set to: 0
  1603  000B10  0100               	movlb	0	; () banked
  1604  000B12  519E               	movf	sprintf@exp& (0+255),w,b
  1605  000B14  0800               	sublw	0
  1606  000B16  EC8B  F008         	call	_scale
  1607  000B1A  C066  F0A0         	movff	?_scale,sprintf@tmpval
  1608  000B1E  C067  F0A1         	movff	?_scale+1,sprintf@tmpval+1
  1609  000B22  C068  F0A2         	movff	?_scale+2,sprintf@tmpval+2
  1610                           
  1611                           ;doprnt.c: 847: tmpval.integ *= fval;
  1612  000B26  C0A0  F02A         	movff	sprintf@tmpval,___ftmul@f1
  1613  000B2A  C0A1  F02B         	movff	sprintf@tmpval+1,___ftmul@f1+1
  1614  000B2E  C0A2  F02C         	movff	sprintf@tmpval+2,___ftmul@f1+2
  1615  000B32  C0A4  F02D         	movff	sprintf@fval,___ftmul@f2
  1616  000B36  C0A5  F02E         	movff	sprintf@fval+1,___ftmul@f2+1
  1617  000B3A  C0A6  F02F         	movff	sprintf@fval+2,___ftmul@f2+2
  1618  000B3E  ECAB  F010         	call	___ftmul	;wreg free
  1619  000B42  C02A  F0A0         	movff	?___ftmul,sprintf@tmpval
  1620  000B46  C02B  F0A1         	movff	?___ftmul+1,sprintf@tmpval+1
  1621  000B4A  C02C  F0A2         	movff	?___ftmul+2,sprintf@tmpval+2
  1622                           
  1623                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  1624  000B4E  C0A0  F016         	movff	sprintf@tmpval,___ftge@ff1
  1625  000B52  C0A1  F017         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1626  000B56  C0A2  F018         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1627  000B5A  0E00               	movlw	0
  1628  000B5C  6E19               	movwf	___ftge@ff2,c
  1629  000B5E  0E80               	movlw	128
  1630  000B60  6E1A               	movwf	___ftge@ff2+1,c
  1631  000B62  0E3F               	movlw	63
  1632  000B64  6E1B               	movwf	___ftge@ff2+2,c
  1633  000B66  EC6A  F012         	call	___ftge	;wreg free
  1634  000B6A  B0D8               	btfsc	status,0,c
  1635  000B6C  D005               	goto	l1441
  1636                           
  1637                           ;doprnt.c: 849: exp--;
  1638  000B6E  0100               	movlb	0	; () banked
  1639  000B70  079E               	decf	sprintf@exp& (0+255),f,b
  1640  000B72  A0D8               	btfss	status,0,c
  1641  000B74  079F               	decf	(sprintf@exp+1)& (0+255),f,b
  1642  000B76  D013               	goto	l1443
  1643  000B78                     l1441:
  1644                           
  1645                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  1646                           
  1647                           ; BSR set to: 0
  1648  000B78  C0A0  F016         	movff	sprintf@tmpval,___ftge@ff1
  1649  000B7C  C0A1  F017         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1650  000B80  C0A2  F018         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1651  000B84  0E00               	movlw	0
  1652  000B86  6E19               	movwf	___ftge@ff2,c
  1653  000B88  0E20               	movlw	32
  1654  000B8A  6E1A               	movwf	___ftge@ff2+1,c
  1655  000B8C  0E41               	movlw	65
  1656  000B8E  6E1B               	movwf	___ftge@ff2+2,c
  1657  000B90  EC6A  F012         	call	___ftge	;wreg free
  1658  000B94  A0D8               	btfss	status,0,c
  1659  000B96  D003               	goto	l1443
  1660                           
  1661                           ;doprnt.c: 851: exp++;
  1662  000B98  0100               	movlb	0	; () banked
  1663  000B9A  4B9E               	infsnz	sprintf@exp& (0+255),f,b
  1664  000B9C  2B9F               	incf	(sprintf@exp+1)& (0+255),f,b
  1665  000B9E                     l1443:
  1666                           
  1667                           ;doprnt.c: 852: }
  1668                           ;doprnt.c: 1112: if(prec <= 12)
  1669                           
  1670                           ; BSR set to: 0
  1671                           
  1672                           ; BSR set to: 0
  1673                           
  1674                           ; BSR set to: 0
  1675  000B9E  0100               	movlb	0	; () banked
  1676  000BA0  BFA8               	btfsc	(sprintf@prec+1)& (0+255),7,b
  1677  000BA2  D008               	goto	u6850
  1678  000BA4  0100               	movlb	0	; () banked
  1679  000BA6  51A8               	movf	(sprintf@prec+1)& (0+255),w,b
  1680  000BA8  E11D               	bnz	l6744
  1681  000BAA  0E0D               	movlw	13
  1682  000BAC  0100               	movlb	0	; () banked
  1683  000BAE  5DA7               	subwf	sprintf@prec& (0+255),w,b
  1684  000BB0  B0D8               	btfsc	status,0,c
  1685  000BB2  D018               	goto	l1444
  1686  000BB4                     u6850:
  1687                           
  1688                           ; BSR set to: 0
  1689                           ;doprnt.c: 1113: fval += fround(prec);
  1690  000BB4  C0A4  F070         	movff	sprintf@fval,___ftadd@f1
  1691  000BB8  C0A5  F071         	movff	sprintf@fval+1,___ftadd@f1+1
  1692  000BBC  C0A6  F072         	movff	sprintf@fval+2,___ftadd@f1+2
  1693  000BC0  0100               	movlb	0	; () banked
  1694  000BC2  51A7               	movf	sprintf@prec& (0+255),w,b
  1695  000BC4  ECD6  F00B         	call	_fround
  1696  000BC8  C066  F073         	movff	?_fround,___ftadd@f2
  1697  000BCC  C067  F074         	movff	?_fround+1,___ftadd@f2+1
  1698  000BD0  C068  F075         	movff	?_fround+2,___ftadd@f2+2
  1699  000BD4  ECA2  F00A         	call	___ftadd	;wreg free
  1700  000BD8  C070  F0A4         	movff	?___ftadd,sprintf@fval
  1701  000BDC  C071  F0A5         	movff	?___ftadd+1,sprintf@fval+1
  1702  000BE0  C072  F0A6         	movff	?___ftadd+2,sprintf@fval+2
  1703  000BE4                     l1444:
  1704  000BE4                     l6744:
  1705                           
  1706                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  1707  000BE4  0100               	movlb	0	; () banked
  1708  000BE6  BF9F               	btfsc	(sprintf@exp+1)& (0+255),7,b
  1709  000BE8  D008               	goto	u6860
  1710  000BEA  0100               	movlb	0	; () banked
  1711  000BEC  519F               	movf	(sprintf@exp+1)& (0+255),w,b
  1712  000BEE  E12A               	bnz	l6752
  1713  000BF0  0E0A               	movlw	10
  1714  000BF2  0100               	movlb	0	; () banked
  1715  000BF4  5D9E               	subwf	sprintf@exp& (0+255),w,b
  1716  000BF6  B0D8               	btfsc	status,0,c
  1717  000BF8  D025               	goto	u6890
  1718  000BFA                     u6860:
  1719                           
  1720                           ; BSR set to: 0
  1721  000BFA  0100               	movlb	0	; () banked
  1722  000BFC  51A4               	movf	sprintf@fval& (0+255),w,b
  1723  000BFE  0100               	movlb	0	; () banked
  1724  000C00  11A5               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1725  000C02  0100               	movlb	0	; () banked
  1726  000C04  11A6               	iorwf	(sprintf@fval+2)& (0+255),w,b
  1727  000C06  B4D8               	btfsc	status,2,c
  1728  000C08  D05F               	goto	l1445
  1729                           
  1730                           ; BSR set to: 0
  1731  000C0A  C0A4  F06D         	movff	sprintf@fval,___fttol@f1
  1732  000C0E  C0A5  F06E         	movff	sprintf@fval+1,___fttol@f1+1
  1733  000C12  C0A6  F06F         	movff	sprintf@fval+2,___fttol@f1+2
  1734  000C16  ECDC  F00E         	call	___fttol	;wreg free
  1735  000C1A  0100               	movlb	0	; () banked
  1736  000C1C  516D               	movf	?___fttol& (0+255),w,b
  1737  000C1E  0100               	movlb	0	; () banked
  1738  000C20  116E               	iorwf	(?___fttol+1)& (0+255),w,b
  1739  000C22  0100               	movlb	0	; () banked
  1740  000C24  116F               	iorwf	(?___fttol+2)& (0+255),w,b
  1741  000C26  0100               	movlb	0	; () banked
  1742  000C28  1170               	iorwf	(?___fttol+3)& (0+255),w,b
  1743  000C2A  A4D8               	btfss	status,2,c
  1744  000C2C  D04D               	goto	l1445
  1745                           
  1746                           ; BSR set to: 0
  1747  000C2E  0100               	movlb	0	; () banked
  1748  000C30  BF9F               	btfsc	(sprintf@exp+1)& (0+255),7,b
  1749  000C32  D04A               	goto	l1445
  1750  000C34  0100               	movlb	0	; () banked
  1751  000C36  519F               	movf	(sprintf@exp+1)& (0+255),w,b
  1752  000C38  E105               	bnz	l6752
  1753  000C3A  0E02               	movlw	2
  1754  000C3C  0100               	movlb	0	; () banked
  1755  000C3E  5D9E               	subwf	sprintf@exp& (0+255),w,b
  1756  000C40  A0D8               	btfss	status,0,c
  1757  000C42  D042               	goto	l1445
  1758  000C44                     u6890:
  1759  000C44                     l6752:
  1760                           
  1761                           ; BSR set to: 0
  1762                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  1763  000C44  C0A0  F016         	movff	sprintf@tmpval,___ftge@ff1
  1764  000C48  C0A1  F017         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1765  000C4C  C0A2  F018         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1766  000C50  0E70               	movlw	112
  1767  000C52  6E19               	movwf	___ftge@ff2,c
  1768  000C54  0E89               	movlw	137
  1769  000C56  6E1A               	movwf	___ftge@ff2+1,c
  1770  000C58  0E40               	movlw	64
  1771  000C5A  6E1B               	movwf	___ftge@ff2+2,c
  1772  000C5C  EC6A  F012         	call	___ftge	;wreg free
  1773  000C60  B0D8               	btfsc	status,0,c
  1774  000C62  D003               	goto	l1448
  1775                           
  1776                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  1777  000C64  0100               	movlb	0	; () banked
  1778  000C66  0EF7               	movlw	247
  1779  000C68  D002               	goto	L1
  1780  000C6A                     l1448:
  1781                           
  1782                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  1783                           
  1784                           ; BSR set to: 0
  1785  000C6A  0100               	movlb	0	; () banked
  1786  000C6C  0EF8               	movlw	248
  1787  000C6E                     L1:
  1788  000C6E  279E               	addwf	sprintf@exp& (0+255),f,b
  1789  000C70  0EFF               	movlw	255
  1790  000C72  239F               	addwfc	(sprintf@exp+1)& (0+255),f,b
  1791                           
  1792                           ; BSR set to: 0
  1793                           ;doprnt.c: 1124: }
  1794                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  1795                           
  1796                           ; BSR set to: 0
  1797  000C74  0100               	movlb	0	; () banked
  1798  000C76  519E               	movf	sprintf@exp& (0+255),w,b
  1799  000C78  EC8B  F008         	call	_scale
  1800  000C7C  C066  F0A0         	movff	?_scale,sprintf@tmpval
  1801  000C80  C067  F0A1         	movff	?_scale+1,sprintf@tmpval+1
  1802  000C84  C068  F0A2         	movff	?_scale+2,sprintf@tmpval+2
  1803                           
  1804                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  1805  000C88  C0A4  F016         	movff	sprintf@fval,__tdiv_to_l_@f1
  1806  000C8C  C0A5  F017         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  1807  000C90  C0A6  F018         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  1808  000C94  C0A0  F019         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  1809  000C98  C0A1  F01A         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  1810  000C9C  C0A2  F01B         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  1811  000CA0  EC7E  F00F         	call	__tdiv_to_l_	;wreg free
  1812  000CA4  C016  F09A         	movff	?__tdiv_to_l_,sprintf@val
  1813  000CA8  C017  F09B         	movff	?__tdiv_to_l_+1,sprintf@val+1
  1814  000CAC  C018  F09C         	movff	?__tdiv_to_l_+2,sprintf@val+2
  1815  000CB0  C019  F09D         	movff	?__tdiv_to_l_+3,sprintf@val+3
  1816                           
  1817                           ;doprnt.c: 1129: fval = 0.0;
  1818  000CB4  0E00               	movlw	0
  1819  000CB6  0100               	movlb	0	; () banked
  1820  000CB8  6FA4               	movwf	sprintf@fval& (0+255),b
  1821  000CBA  0E00               	movlw	0
  1822  000CBC  0100               	movlb	0	; () banked
  1823  000CBE  6FA5               	movwf	(sprintf@fval+1)& (0+255),b
  1824  000CC0  0E00               	movlw	0
  1825  000CC2  0100               	movlb	0	; () banked
  1826  000CC4  6FA6               	movwf	(sprintf@fval+2)& (0+255),b
  1827                           
  1828                           ;doprnt.c: 1130: } else {
  1829  000CC6  D033               	goto	l1454
  1830  000CC8                     l1445:
  1831                           
  1832                           ; BSR set to: 0
  1833                           ;doprnt.c: 1131: val = (unsigned long)fval;
  1834                           
  1835                           ; BSR set to: 0
  1836  000CC8  C0A4  F06D         	movff	sprintf@fval,___fttol@f1
  1837  000CCC  C0A5  F06E         	movff	sprintf@fval+1,___fttol@f1+1
  1838  000CD0  C0A6  F06F         	movff	sprintf@fval+2,___fttol@f1+2
  1839  000CD4  ECDC  F00E         	call	___fttol	;wreg free
  1840  000CD8  C06D  F09A         	movff	?___fttol,sprintf@val
  1841  000CDC  C06E  F09B         	movff	?___fttol+1,sprintf@val+1
  1842  000CE0  C06F  F09C         	movff	?___fttol+2,sprintf@val+2
  1843  000CE4  C070  F09D         	movff	?___fttol+3,sprintf@val+3
  1844                           
  1845                           ;doprnt.c: 1132: fval -= (double)val;
  1846  000CE8  C0A4  F07C         	movff	sprintf@fval,___ftsub@f1
  1847  000CEC  C0A5  F07D         	movff	sprintf@fval+1,___ftsub@f1+1
  1848  000CF0  C0A6  F07E         	movff	sprintf@fval+2,___ftsub@f1+2
  1849  000CF4  C09A  F01E         	movff	sprintf@val,___lltoft@c
  1850  000CF8  C09B  F01F         	movff	sprintf@val+1,___lltoft@c+1
  1851  000CFC  C09C  F020         	movff	sprintf@val+2,___lltoft@c+2
  1852  000D00  C09D  F021         	movff	sprintf@val+3,___lltoft@c+3
  1853  000D04  ECA0  F013         	call	___lltoft	;wreg free
  1854  000D08  C01E  F07F         	movff	?___lltoft,___ftsub@f2
  1855  000D0C  C01F  F080         	movff	?___lltoft+1,___ftsub@f2+1
  1856  000D10  C020  F081         	movff	?___lltoft+2,___ftsub@f2+2
  1857  000D14  ECF7  F013         	call	___ftsub	;wreg free
  1858  000D18  C07C  F0A4         	movff	?___ftsub,sprintf@fval
  1859  000D1C  C07D  F0A5         	movff	?___ftsub+1,sprintf@fval+1
  1860  000D20  C07E  F0A6         	movff	?___ftsub+2,sprintf@fval+2
  1861                           
  1862                           ;doprnt.c: 1133: exp = 0;
  1863  000D24  0E00               	movlw	0
  1864  000D26  0100               	movlb	0	; () banked
  1865  000D28  6F9F               	movwf	(sprintf@exp+1)& (0+255),b
  1866  000D2A  0E00               	movlw	0
  1867  000D2C  6F9E               	movwf	sprintf@exp& (0+255),b
  1868  000D2E                     l1454:
  1869                           
  1870                           ; BSR set to: 0
  1871                           ;doprnt.c: 1134: }
  1872                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  1873                           
  1874                           ; BSR set to: 0
  1875  000D2E  0E01               	movlw	1
  1876  000D30  0100               	movlb	0	; () banked
  1877  000D32  6FA9               	movwf	sprintf@c& (0+255),b
  1878  000D34                     l6772:
  1879                           
  1880                           ; BSR set to: 0
  1881  000D34  0E0A               	movlw	10
  1882  000D36  0100               	movlb	0	; () banked
  1883  000D38  19A9               	xorwf	sprintf@c& (0+255),w,b
  1884  000D3A  B4D8               	btfsc	status,2,c
  1885  000D3C  D01E               	goto	u6930
  1886                           
  1887                           ; BSR set to: 0
  1888                           ;doprnt.c: 1137: if(val < dpowers[c])
  1889                           
  1890                           ; BSR set to: 0
  1891                           
  1892                           ; BSR set to: 0
  1893  000D3E  0100               	movlb	0	; () banked
  1894  000D40  51A9               	movf	sprintf@c& (0+255),w,b
  1895  000D42  0D04               	mullw	4
  1896  000D44  0E01               	movlw	low _dpowers
  1897  000D46  24F3               	addwf	prodl,w,c
  1898  000D48  6EF6               	movwf	tblptrl,c
  1899  000D4A  0E08               	movlw	high _dpowers
  1900  000D4C  20F4               	addwfc	prodh,w,c
  1901  000D4E  6EF7               	movwf	tblptrh,c
  1902  000D50                     	if	0	;There are less than 3 active tblptr bytes
  1903  000D50                     	endif
  1904  000D50  0009               	tblrd		*+
  1905  000D52  50F5               	movf	tablat,w,c
  1906  000D54  0100               	movlb	0	; () banked
  1907  000D56  5D9A               	subwf	sprintf@val& (0+255),w,b
  1908  000D58  0009               	tblrd		*+
  1909  000D5A  50F5               	movf	tablat,w,c
  1910  000D5C  0100               	movlb	0	; () banked
  1911  000D5E  599B               	subwfb	(sprintf@val+1)& (0+255),w,b
  1912  000D60  0009               	tblrd		*+
  1913  000D62  50F5               	movf	tablat,w,c
  1914  000D64  0100               	movlb	0	; () banked
  1915  000D66  599C               	subwfb	(sprintf@val+2)& (0+255),w,b
  1916  000D68  0009               	tblrd		*+
  1917  000D6A  50F5               	movf	tablat,w,c
  1918  000D6C  0100               	movlb	0	; () banked
  1919  000D6E  599D               	subwfb	(sprintf@val+3)& (0+255),w,b
  1920  000D70  A0D8               	btfss	status,0,c
  1921  000D72  D003               	goto	u6930
  1922                           
  1923                           ; BSR set to: 0
  1924                           
  1925                           ; BSR set to: 0
  1926                           
  1927                           ; BSR set to: 0
  1928                           ;doprnt.c: 1138: break;
  1929  000D74  0100               	movlb	0	; () banked
  1930  000D76  2BA9               	incf	sprintf@c& (0+255),f,b
  1931  000D78  D7DD               	goto	l6772
  1932  000D7A                     u6930:
  1933                           
  1934                           ; BSR set to: 0
  1935                           ;doprnt.c: 1175: {
  1936                           ;doprnt.c: 1188: if(flag & 0x03)
  1937                           
  1938                           ; BSR set to: 0
  1939  000D7A  0E03               	movlw	3
  1940  000D7C  0100               	movlb	0	; () banked
  1941  000D7E  1598               	andwf	sprintf@flag& (0+255),w,b
  1942  000D80  0100               	movlb	0	; () banked
  1943  000D82  6F89               	movwf	??_sprintf& (0+255),b
  1944  000D84  0E00               	movlw	0
  1945  000D86  0100               	movlb	0	; () banked
  1946  000D88  1599               	andwf	(sprintf@flag+1)& (0+255),w,b
  1947  000D8A  0100               	movlb	0	; () banked
  1948  000D8C  6F8A               	movwf	(??_sprintf+1)& (0+255),b
  1949  000D8E  0100               	movlb	0	; () banked
  1950  000D90  5189               	movf	??_sprintf& (0+255),w,b
  1951  000D92  0100               	movlb	0	; () banked
  1952  000D94  118A               	iorwf	(??_sprintf+1)& (0+255),w,b
  1953  000D96  B4D8               	btfsc	status,2,c
  1954  000D98  D052               	goto	l1459
  1955                           
  1956                           ; BSR set to: 0
  1957                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  1958  000D9A  C082  FFD9         	movff	sprintf@sp,fsr2l
  1959  000D9E  C083  FFDA         	movff	sprintf@sp+1,fsr2h
  1960  000DA2  0E2D               	movlw	45
  1961  000DA4  D048               	goto	L2
  1962  000DA6                     
  1963                           ; BSR set to: 0
  1964                           ;doprnt.c: 1200: {
  1965                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  1966                           
  1967                           ; BSR set to: 0
  1968  000DA6  C09A  F016         	movff	sprintf@val,___lldiv@dividend
  1969  000DAA  C09B  F017         	movff	sprintf@val+1,___lldiv@dividend+1
  1970  000DAE  C09C  F018         	movff	sprintf@val+2,___lldiv@dividend+2
  1971  000DB2  C09D  F019         	movff	sprintf@val+3,___lldiv@dividend+3
  1972  000DB6  0100               	movlb	0	; () banked
  1973  000DB8  51A9               	movf	sprintf@c& (0+255),w,b
  1974  000DBA  0D04               	mullw	4
  1975  000DBC  0E01               	movlw	low _dpowers
  1976  000DBE  24F3               	addwf	prodl,w,c
  1977  000DC0  6EF6               	movwf	tblptrl,c
  1978  000DC2  0E08               	movlw	high _dpowers
  1979  000DC4  20F4               	addwfc	prodh,w,c
  1980  000DC6  6EF7               	movwf	tblptrh,c
  1981  000DC8                     	if	0	;There are less than 3 active tblptr bytes
  1982  000DC8                     	endif
  1983  000DC8  0009               	tblrd		*+
  1984  000DCA  CFF5 F01A          	movff	tablat,___lldiv@divisor
  1985  000DCE  0009               	tblrd		*+
  1986  000DD0  CFF5 F01B          	movff	tablat,___lldiv@divisor+1
  1987  000DD4  0009               	tblrd		*+
  1988  000DD6  CFF5 F01C          	movff	tablat,___lldiv@divisor+2
  1989  000DDA  000A               	tblrd		*-
  1990  000DDC  CFF5 F01D          	movff	tablat,___lldiv@divisor+3
  1991  000DE0  ECF4  F012         	call	___lldiv	;wreg free
  1992  000DE4  C016  F0A0         	movff	?___lldiv,sprintf@tmpval
  1993  000DE8  C017  F0A1         	movff	?___lldiv+1,sprintf@tmpval+1
  1994  000DEC  C018  F0A2         	movff	?___lldiv+2,sprintf@tmpval+2
  1995  000DF0  C019  F0A3         	movff	?___lldiv+3,sprintf@tmpval+3
  1996                           
  1997                           ;doprnt.c: 1202: tmpval.vd %= 10;
  1998  000DF4  C0A0  F016         	movff	sprintf@tmpval,___llmod@dividend
  1999  000DF8  C0A1  F017         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2000  000DFC  C0A2  F018         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2001  000E00  C0A3  F019         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2002  000E04  0E0A               	movlw	10
  2003  000E06  6E1A               	movwf	___llmod@divisor,c
  2004  000E08  0E00               	movlw	0
  2005  000E0A  6E1B               	movwf	___llmod@divisor+1,c
  2006  000E0C  0E00               	movlw	0
  2007  000E0E  6E1C               	movwf	___llmod@divisor+2,c
  2008  000E10  0E00               	movlw	0
  2009  000E12  6E1D               	movwf	___llmod@divisor+3,c
  2010  000E14  EC6D  F013         	call	___llmod	;wreg free
  2011  000E18  C016  F0A0         	movff	?___llmod,sprintf@tmpval
  2012  000E1C  C017  F0A1         	movff	?___llmod+1,sprintf@tmpval+1
  2013  000E20  C018  F0A2         	movff	?___llmod+2,sprintf@tmpval+2
  2014  000E24  C019  F0A3         	movff	?___llmod+3,sprintf@tmpval+3
  2015                           
  2016                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  2017  000E28  0100               	movlb	0	; () banked
  2018  000E2A  51A0               	movf	sprintf@tmpval& (0+255),w,b
  2019  000E2C  0F30               	addlw	48
  2020  000E2E  C082  FFD9         	movff	sprintf@sp,fsr2l
  2021  000E32  C083  FFDA         	movff	sprintf@sp+1,fsr2h
  2022  000E36                     L2:
  2023  000E36  6EDF               	movwf	indf2,c
  2024                           
  2025                           ; BSR set to: 0
  2026  000E38  0100               	movlb	0	; () banked
  2027  000E3A  4B82               	infsnz	sprintf@sp& (0+255),f,b
  2028  000E3C  2B83               	incf	(sprintf@sp+1)& (0+255),f,b
  2029  000E3E                     l1459:
  2030                           
  2031                           ; BSR set to: 0
  2032                           
  2033                           ; BSR set to: 0
  2034  000E3E  0100               	movlb	0	; () banked
  2035  000E40  07A9               	decf	sprintf@c& (0+255),f,b
  2036  000E42  0100               	movlb	0	; () banked
  2037  000E44  29A9               	incf	sprintf@c& (0+255),w,b
  2038  000E46  B4D8               	btfsc	status,2,c
  2039  000E48  D00E               	goto	l1462
  2040  000E4A  D7AD               	goto	l1460
  2041  000E4C                     l6800:
  2042                           
  2043                           ; BSR set to: 0
  2044                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  2045  000E4C  C082  FFD9         	movff	sprintf@sp,fsr2l
  2046  000E50  C083  FFDA         	movff	sprintf@sp+1,fsr2h
  2047  000E54  0E30               	movlw	48
  2048  000E56  6EDF               	movwf	indf2,c
  2049                           
  2050                           ; BSR set to: 0
  2051  000E58  0100               	movlb	0	; () banked
  2052  000E5A  4B82               	infsnz	sprintf@sp& (0+255),f,b
  2053  000E5C  2B83               	incf	(sprintf@sp+1)& (0+255),f,b
  2054                           
  2055                           ; BSR set to: 0
  2056                           ;doprnt.c: 1209: exp--;
  2057  000E5E  0100               	movlb	0	; () banked
  2058  000E60  079E               	decf	sprintf@exp& (0+255),f,b
  2059  000E62  A0D8               	btfss	status,0,c
  2060  000E64  079F               	decf	(sprintf@exp+1)& (0+255),f,b
  2061  000E66                     l1462:
  2062                           
  2063                           ; BSR set to: 0
  2064                           
  2065                           ; BSR set to: 0
  2066  000E66  0100               	movlb	0	; () banked
  2067  000E68  BF9F               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2068  000E6A  D007               	goto	u6960
  2069  000E6C  0100               	movlb	0	; () banked
  2070  000E6E  519F               	movf	(sprintf@exp+1)& (0+255),w,b
  2071  000E70  E1ED               	bnz	l6800
  2072  000E72  0100               	movlb	0	; () banked
  2073  000E74  059E               	decf	sprintf@exp& (0+255),w,b
  2074  000E76  B0D8               	btfsc	status,0,c
  2075  000E78  D7E9               	goto	l1463
  2076  000E7A                     u6960:
  2077                           
  2078                           ; BSR set to: 0
  2079                           ;doprnt.c: 1210: }
  2080                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2081                           
  2082                           ; BSR set to: 0
  2083  000E7A  0100               	movlb	0	; () banked
  2084  000E7C  BFA8               	btfsc	(sprintf@prec+1)& (0+255),7,b
  2085  000E7E  D00C               	goto	l1465
  2086  000E80  0100               	movlb	0	; () banked
  2087  000E82  51A8               	movf	(sprintf@prec+1)& (0+255),w,b
  2088  000E84  E105               	bnz	u6970
  2089  000E86  0E09               	movlw	9
  2090  000E88  0100               	movlb	0	; () banked
  2091  000E8A  5DA7               	subwf	sprintf@prec& (0+255),w,b
  2092  000E8C  A0D8               	btfss	status,0,c
  2093  000E8E  D004               	goto	l1465
  2094  000E90                     u6970:
  2095                           
  2096                           ; BSR set to: 0
  2097                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2098  000E90  0E08               	movlw	8
  2099  000E92  0100               	movlb	0	; () banked
  2100  000E94  6FA9               	movwf	sprintf@c& (0+255),b
  2101  000E96  D002               	goto	l1466
  2102  000E98                     l1465:
  2103                           
  2104                           ; BSR set to: 0
  2105                           ;doprnt.c: 1213: else
  2106                           ;doprnt.c: 1214: c = prec;
  2107  000E98  C0A7  F0A9         	movff	sprintf@prec,sprintf@c
  2108  000E9C                     l1466:
  2109                           
  2110                           ; BSR set to: 0
  2111                           ;doprnt.c: 1215: prec -= c;
  2112                           
  2113                           ; BSR set to: 0
  2114  000E9C  0100               	movlb	0	; () banked
  2115  000E9E  51A9               	movf	sprintf@c& (0+255),w,b
  2116  000EA0  0100               	movlb	0	; () banked
  2117  000EA2  5FA7               	subwf	sprintf@prec& (0+255),f,b
  2118  000EA4  0E00               	movlw	0
  2119  000EA6  0100               	movlb	0	; () banked
  2120  000EA8  BFA9               	btfsc	sprintf@c& (0+255),7,b
  2121  000EAA  0EFF               	movlw	255
  2122  000EAC  0100               	movlb	0	; () banked
  2123  000EAE  5BA8               	subwfb	(sprintf@prec+1)& (0+255),f,b
  2124                           
  2125                           ; BSR set to: 0
  2126                           ;doprnt.c: 1219: if(c)
  2127  000EB0  0100               	movlb	0	; () banked
  2128  000EB2  51A9               	movf	sprintf@c& (0+255),w,b
  2129  000EB4  0100               	movlb	0	; () banked
  2130  000EB6  B4D8               	btfsc	status,2,c
  2131  000EB8  D009               	goto	l1467
  2132                           
  2133                           ; BSR set to: 0
  2134                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  2135  000EBA  C082  FFD9         	movff	sprintf@sp,fsr2l
  2136  000EBE  C083  FFDA         	movff	sprintf@sp+1,fsr2h
  2137  000EC2  0E2E               	movlw	46
  2138  000EC4  6EDF               	movwf	indf2,c
  2139                           
  2140                           ; BSR set to: 0
  2141  000EC6  0100               	movlb	0	; () banked
  2142  000EC8  4B82               	infsnz	sprintf@sp& (0+255),f,b
  2143  000ECA  2B83               	incf	(sprintf@sp+1)& (0+255),f,b
  2144  000ECC                     l1467:
  2145                           
  2146                           ; BSR set to: 0
  2147                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2148                           
  2149                           ; BSR set to: 0
  2150  000ECC  0100               	movlb	0	; () banked
  2151  000ECE  51A9               	movf	sprintf@c& (0+255),w,b
  2152  000ED0  EC8B  F008         	call	_scale
  2153  000ED4  C066  F08F         	movff	?_scale,_sprintf$4061
  2154  000ED8  C067  F090         	movff	?_scale+1,_sprintf$4061+1
  2155  000EDC  C068  F091         	movff	?_scale+2,_sprintf$4061+2
  2156                           
  2157                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2158  000EE0  C0A4  F02D         	movff	sprintf@fval,___ftmul@f2
  2159  000EE4  C0A5  F02E         	movff	sprintf@fval+1,___ftmul@f2+1
  2160  000EE8  C0A6  F02F         	movff	sprintf@fval+2,___ftmul@f2+2
  2161  000EEC  C08F  F02A         	movff	_sprintf$4061,___ftmul@f1
  2162  000EF0  C090  F02B         	movff	_sprintf$4061+1,___ftmul@f1+1
  2163  000EF4  C091  F02C         	movff	_sprintf$4061+2,___ftmul@f1+2
  2164  000EF8  ECAB  F010         	call	___ftmul	;wreg free
  2165  000EFC  C02A  F06D         	movff	?___ftmul,___fttol@f1
  2166  000F00  C02B  F06E         	movff	?___ftmul+1,___fttol@f1+1
  2167  000F04  C02C  F06F         	movff	?___ftmul+2,___fttol@f1+2
  2168  000F08  ECDC  F00E         	call	___fttol	;wreg free
  2169  000F0C  C06D  F09A         	movff	?___fttol,sprintf@val
  2170  000F10  C06E  F09B         	movff	?___fttol+1,sprintf@val+1
  2171  000F14  C06F  F09C         	movff	?___fttol+2,sprintf@val+2
  2172  000F18  C070  F09D         	movff	?___fttol+3,sprintf@val+3
  2173                           
  2174                           ;doprnt.c: 1228: while(c--) {
  2175  000F1C  D073               	goto	l1468
  2176  000F1E                     
  2177                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  2178  000F1E  C09A  F016         	movff	sprintf@val,___lldiv@dividend
  2179  000F22  C09B  F017         	movff	sprintf@val+1,___lldiv@dividend+1
  2180  000F26  C09C  F018         	movff	sprintf@val+2,___lldiv@dividend+2
  2181  000F2A  C09D  F019         	movff	sprintf@val+3,___lldiv@dividend+3
  2182  000F2E  0100               	movlb	0	; () banked
  2183  000F30  51A9               	movf	sprintf@c& (0+255),w,b
  2184  000F32  0D04               	mullw	4
  2185  000F34  0E01               	movlw	low _dpowers
  2186  000F36  24F3               	addwf	prodl,w,c
  2187  000F38  6EF6               	movwf	tblptrl,c
  2188  000F3A  0E08               	movlw	high _dpowers
  2189  000F3C  20F4               	addwfc	prodh,w,c
  2190  000F3E  6EF7               	movwf	tblptrh,c
  2191  000F40                     	if	0	;There are less than 3 active tblptr bytes
  2192  000F40                     	endif
  2193  000F40  0009               	tblrd		*+
  2194  000F42  CFF5 F01A          	movff	tablat,___lldiv@divisor
  2195  000F46  0009               	tblrd		*+
  2196  000F48  CFF5 F01B          	movff	tablat,___lldiv@divisor+1
  2197  000F4C  0009               	tblrd		*+
  2198  000F4E  CFF5 F01C          	movff	tablat,___lldiv@divisor+2
  2199  000F52  000A               	tblrd		*-
  2200  000F54  CFF5 F01D          	movff	tablat,___lldiv@divisor+3
  2201  000F58  ECF4  F012         	call	___lldiv	;wreg free
  2202  000F5C  C016  F0A0         	movff	?___lldiv,sprintf@tmpval
  2203  000F60  C017  F0A1         	movff	?___lldiv+1,sprintf@tmpval+1
  2204  000F64  C018  F0A2         	movff	?___lldiv+2,sprintf@tmpval+2
  2205  000F68  C019  F0A3         	movff	?___lldiv+3,sprintf@tmpval+3
  2206                           
  2207                           ;doprnt.c: 1230: tmpval.vd %= 10;
  2208  000F6C  C0A0  F016         	movff	sprintf@tmpval,___llmod@dividend
  2209  000F70  C0A1  F017         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2210  000F74  C0A2  F018         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2211  000F78  C0A3  F019         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2212  000F7C  0E0A               	movlw	10
  2213  000F7E  6E1A               	movwf	___llmod@divisor,c
  2214  000F80  0E00               	movlw	0
  2215  000F82  6E1B               	movwf	___llmod@divisor+1,c
  2216  000F84  0E00               	movlw	0
  2217  000F86  6E1C               	movwf	___llmod@divisor+2,c
  2218  000F88  0E00               	movlw	0
  2219  000F8A  6E1D               	movwf	___llmod@divisor+3,c
  2220  000F8C  EC6D  F013         	call	___llmod	;wreg free
  2221  000F90  C016  F0A0         	movff	?___llmod,sprintf@tmpval
  2222  000F94  C017  F0A1         	movff	?___llmod+1,sprintf@tmpval+1
  2223  000F98  C018  F0A2         	movff	?___llmod+2,sprintf@tmpval+2
  2224  000F9C  C019  F0A3         	movff	?___llmod+3,sprintf@tmpval+3
  2225                           
  2226                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  2227  000FA0  0100               	movlb	0	; () banked
  2228  000FA2  51A0               	movf	sprintf@tmpval& (0+255),w,b
  2229  000FA4  0F30               	addlw	48
  2230  000FA6  C082  FFD9         	movff	sprintf@sp,fsr2l
  2231  000FAA  C083  FFDA         	movff	sprintf@sp+1,fsr2h
  2232  000FAE  6EDF               	movwf	indf2,c
  2233                           
  2234                           ; BSR set to: 0
  2235  000FB0  0100               	movlb	0	; () banked
  2236  000FB2  4B82               	infsnz	sprintf@sp& (0+255),f,b
  2237  000FB4  2B83               	incf	(sprintf@sp+1)& (0+255),f,b
  2238                           
  2239                           ; BSR set to: 0
  2240                           ;doprnt.c: 1232: val %= dpowers[c];
  2241  000FB6  C09A  F016         	movff	sprintf@val,___llmod@dividend
  2242  000FBA  C09B  F017         	movff	sprintf@val+1,___llmod@dividend+1
  2243  000FBE  C09C  F018         	movff	sprintf@val+2,___llmod@dividend+2
  2244  000FC2  C09D  F019         	movff	sprintf@val+3,___llmod@dividend+3
  2245  000FC6  0100               	movlb	0	; () banked
  2246  000FC8  51A9               	movf	sprintf@c& (0+255),w,b
  2247  000FCA  0D04               	mullw	4
  2248  000FCC  0E01               	movlw	low _dpowers
  2249  000FCE  24F3               	addwf	prodl,w,c
  2250  000FD0  6EF6               	movwf	tblptrl,c
  2251  000FD2  0E08               	movlw	high _dpowers
  2252  000FD4  20F4               	addwfc	prodh,w,c
  2253  000FD6  6EF7               	movwf	tblptrh,c
  2254  000FD8                     	if	0	;There are less than 3 active tblptr bytes
  2255  000FD8                     	endif
  2256  000FD8  0009               	tblrd		*+
  2257  000FDA  CFF5 F01A          	movff	tablat,___llmod@divisor
  2258  000FDE  0009               	tblrd		*+
  2259  000FE0  CFF5 F01B          	movff	tablat,___llmod@divisor+1
  2260  000FE4  0009               	tblrd		*+
  2261  000FE6  CFF5 F01C          	movff	tablat,___llmod@divisor+2
  2262  000FEA  000A               	tblrd		*-
  2263  000FEC  CFF5 F01D          	movff	tablat,___llmod@divisor+3
  2264  000FF0  EC6D  F013         	call	___llmod	;wreg free
  2265  000FF4  C016  F09A         	movff	?___llmod,sprintf@val
  2266  000FF8  C017  F09B         	movff	?___llmod+1,sprintf@val+1
  2267  000FFC  C018  F09C         	movff	?___llmod+2,sprintf@val+2
  2268  001000  C019  F09D         	movff	?___llmod+3,sprintf@val+3
  2269  001004                     l1468:
  2270  001004  0100               	movlb	0	; () banked
  2271  001006  07A9               	decf	sprintf@c& (0+255),f,b
  2272  001008  0100               	movlb	0	; () banked
  2273  00100A  29A9               	incf	sprintf@c& (0+255),w,b
  2274  00100C  B4D8               	btfsc	status,2,c
  2275  00100E  D00E               	goto	l1471
  2276  001010  D786               	goto	l1469
  2277  001012                     
  2278                           ; BSR set to: 0
  2279                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  2280                           
  2281                           ; BSR set to: 0
  2282  001012  C082  FFD9         	movff	sprintf@sp,fsr2l
  2283  001016  C083  FFDA         	movff	sprintf@sp+1,fsr2h
  2284  00101A  0E30               	movlw	48
  2285  00101C  6EDF               	movwf	indf2,c
  2286                           
  2287                           ; BSR set to: 0
  2288  00101E  0100               	movlb	0	; () banked
  2289  001020  4B82               	infsnz	sprintf@sp& (0+255),f,b
  2290  001022  2B83               	incf	(sprintf@sp+1)& (0+255),f,b
  2291                           
  2292                           ; BSR set to: 0
  2293                           ;doprnt.c: 1237: prec--;
  2294  001024  0100               	movlb	0	; () banked
  2295  001026  07A7               	decf	sprintf@prec& (0+255),f,b
  2296  001028  A0D8               	btfss	status,0,c
  2297  00102A  07A8               	decf	(sprintf@prec+1)& (0+255),f,b
  2298  00102C                     l1471:
  2299                           
  2300                           ; BSR set to: 0
  2301                           
  2302                           ; BSR set to: 0
  2303  00102C  0100               	movlb	0	; () banked
  2304  00102E  51A7               	movf	sprintf@prec& (0+255),w,b
  2305  001030  0100               	movlb	0	; () banked
  2306  001032  11A8               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2307  001034  B4D8               	btfsc	status,2,c
  2308  001036  D059               	goto	l1478
  2309  001038  D7EC               	goto	l1472
  2310  00103A                     l1436:
  2311                           
  2312                           ; BSR set to: 0
  2313                           ;doprnt.c: 1246: }
  2314                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  2315                           
  2316                           ; BSR set to: 0
  2317  00103A  0100               	movlb	0	; () banked
  2318  00103C  51A7               	movf	sprintf@prec& (0+255),w,b
  2319  00103E  0100               	movlb	0	; () banked
  2320  001040  11A8               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2321  001042  A4D8               	btfss	status,2,c
  2322  001044  D00D               	goto	l1474
  2323                           
  2324                           ; BSR set to: 0
  2325  001046  0100               	movlb	0	; () banked
  2326  001048  519A               	movf	sprintf@val& (0+255),w,b
  2327  00104A  0100               	movlb	0	; () banked
  2328  00104C  119B               	iorwf	(sprintf@val+1)& (0+255),w,b
  2329  00104E  0100               	movlb	0	; () banked
  2330  001050  119C               	iorwf	(sprintf@val+2)& (0+255),w,b
  2331  001052  0100               	movlb	0	; () banked
  2332  001054  119D               	iorwf	(sprintf@val+3)& (0+255),w,b
  2333  001056  A4D8               	btfss	status,2,c
  2334  001058  D003               	goto	l1474
  2335                           
  2336                           ; BSR set to: 0
  2337                           ;doprnt.c: 1291: prec++;
  2338  00105A  0100               	movlb	0	; () banked
  2339  00105C  4BA7               	infsnz	sprintf@prec& (0+255),f,b
  2340  00105E  2BA8               	incf	(sprintf@prec+1)& (0+255),f,b
  2341  001060                     l1474:
  2342                           
  2343                           ; BSR set to: 0
  2344                           ;doprnt.c: 1339: if(c < prec)
  2345                           
  2346                           ; BSR set to: 0
  2347  001060  0E80               	movlw	128
  2348  001062  0100               	movlb	0	; () banked
  2349  001064  BFA9               	btfsc	sprintf@c& (0+255),7,b
  2350  001066  0E7F               	movlw	127
  2351  001068  0100               	movlb	0	; () banked
  2352  00106A  6F89               	movwf	??_sprintf& (0+255),b
  2353  00106C  0100               	movlb	0	; () banked
  2354  00106E  51A7               	movf	sprintf@prec& (0+255),w,b
  2355  001070  0100               	movlb	0	; () banked
  2356  001072  5DA9               	subwf	sprintf@c& (0+255),w,b
  2357  001074  0100               	movlb	0	; () banked
  2358  001076  51A8               	movf	(sprintf@prec+1)& (0+255),w,b
  2359  001078  0A80               	xorlw	128
  2360  00107A  0100               	movlb	0	; () banked
  2361  00107C  5989               	subwfb	??_sprintf& (0+255),w,b
  2362  00107E  B0D8               	btfsc	status,0,c
  2363  001080  D003               	goto	l1475
  2364                           
  2365                           ; BSR set to: 0
  2366                           ;doprnt.c: 1340: c = prec;
  2367  001082  C0A7  F0A9         	movff	sprintf@prec,sprintf@c
  2368  001086  D018               	goto	l1477
  2369  001088                     l1475:
  2370                           
  2371                           ; BSR set to: 0
  2372                           ;doprnt.c: 1341: else if(prec < c)
  2373                           
  2374                           ; BSR set to: 0
  2375  001088  0100               	movlb	0	; () banked
  2376  00108A  51A8               	movf	(sprintf@prec+1)& (0+255),w,b
  2377  00108C  0A80               	xorlw	128
  2378  00108E  0100               	movlb	0	; () banked
  2379  001090  6F89               	movwf	??_sprintf& (0+255),b
  2380  001092  0100               	movlb	0	; () banked
  2381  001094  51A9               	movf	sprintf@c& (0+255),w,b
  2382  001096  0100               	movlb	0	; () banked
  2383  001098  5DA7               	subwf	sprintf@prec& (0+255),w,b
  2384  00109A  0E80               	movlw	128
  2385  00109C  0100               	movlb	0	; () banked
  2386  00109E  BFA9               	btfsc	sprintf@c& (0+255),7,b
  2387  0010A0  0E7F               	movlw	127
  2388  0010A2  0100               	movlb	0	; () banked
  2389  0010A4  5989               	subwfb	??_sprintf& (0+255),w,b
  2390  0010A6  B0D8               	btfsc	status,0,c
  2391  0010A8  D007               	goto	l1477
  2392                           
  2393                           ; BSR set to: 0
  2394                           ;doprnt.c: 1342: prec = c;
  2395  0010AA  0100               	movlb	0	; () banked
  2396  0010AC  51A9               	movf	sprintf@c& (0+255),w,b
  2397  0010AE  0100               	movlb	0	; () banked
  2398  0010B0  6FA7               	movwf	sprintf@prec& (0+255),b
  2399  0010B2  6BA8               	clrf	(sprintf@prec+1)& (0+255),b
  2400  0010B4  BFA7               	btfsc	sprintf@prec& (0+255),7,b
  2401  0010B6  07A8               	decf	(sprintf@prec+1)& (0+255),f,b
  2402  0010B8                     l1477:
  2403                           
  2404                           ; BSR set to: 0
  2405                           ;doprnt.c: 1422: {
  2406                           ;doprnt.c: 1438: if(flag & 0x03)
  2407                           
  2408                           ; BSR set to: 0
  2409                           
  2410                           ; BSR set to: 0
  2411  0010B8  0E03               	movlw	3
  2412  0010BA  0100               	movlb	0	; () banked
  2413  0010BC  1598               	andwf	sprintf@flag& (0+255),w,b
  2414  0010BE  0100               	movlb	0	; () banked
  2415  0010C0  6F89               	movwf	??_sprintf& (0+255),b
  2416  0010C2  0E00               	movlw	0
  2417  0010C4  0100               	movlb	0	; () banked
  2418  0010C6  1599               	andwf	(sprintf@flag+1)& (0+255),w,b
  2419  0010C8  0100               	movlb	0	; () banked
  2420  0010CA  6F8A               	movwf	(??_sprintf+1)& (0+255),b
  2421  0010CC  0100               	movlb	0	; () banked
  2422  0010CE  5189               	movf	??_sprintf& (0+255),w,b
  2423  0010D0  0100               	movlb	0	; () banked
  2424  0010D2  118A               	iorwf	(??_sprintf+1)& (0+255),w,b
  2425  0010D4  B4D8               	btfsc	status,2,c
  2426  0010D6  D009               	goto	l1478
  2427                           
  2428                           ; BSR set to: 0
  2429                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  2430  0010D8  C082  FFD9         	movff	sprintf@sp,fsr2l
  2431  0010DC  C083  FFDA         	movff	sprintf@sp+1,fsr2h
  2432  0010E0  0E2D               	movlw	45
  2433  0010E2  6EDF               	movwf	indf2,c
  2434  0010E4                     l6862:
  2435                           
  2436                           ; BSR set to: 0
  2437  0010E4  0100               	movlb	0	; () banked
  2438  0010E6  4B82               	infsnz	sprintf@sp& (0+255),f,b
  2439  0010E8  2B83               	incf	(sprintf@sp+1)& (0+255),f,b
  2440  0010EA                     l1478:
  2441                           
  2442                           ; BSR set to: 0
  2443                           
  2444                           ; BSR set to: 0
  2445                           
  2446                           ; BSR set to: 0
  2447  0010EA  C084  FFF6         	movff	sprintf@f,tblptrl
  2448  0010EE  C085  FFF7         	movff	sprintf@f+1,tblptrh
  2449  0010F2  0100               	movlb	0	; () banked
  2450  0010F4  4B84               	infsnz	sprintf@f& (0+255),f,b
  2451  0010F6  2B85               	incf	(sprintf@f+1)& (0+255),f,b
  2452  0010F8                     	if	0	;tblptru may be non-zero
  2453  0010F8                     	endif
  2454  0010F8                     	if	0	;tblptru may be non-zero
  2455  0010F8                     	endif
  2456  0010F8  0008               	tblrd		*
  2457  0010FA  CFF5 F0A9          	movff	tablat,sprintf@c
  2458  0010FE  0100               	movlb	0	; () banked
  2459  001100  51A9               	movf	sprintf@c& (0+255),w,b
  2460  001102  A4D8               	btfss	status,2,c
  2461  001104  EF48  F004         	goto	l1417
  2462  001108                     u7060:
  2463                           
  2464                           ; BSR set to: 0
  2465                           ;doprnt.c: 1538: *sp = 0;
  2466                           
  2467                           ; BSR set to: 0
  2468                           
  2469                           ;doprnt.c: 1469: }
  2470                           ;doprnt.c: 1533: }
  2471                           ;doprnt.c: 1535: alldone:
  2472                           
  2473                           ; BSR set to: 0
  2474  001108  C082  FFD9         	movff	sprintf@sp,fsr2l
  2475  00110C  C083  FFDA         	movff	sprintf@sp+1,fsr2h
  2476  001110  0E00               	movlw	0
  2477  001112  6EDF               	movwf	indf2,c
  2478  001114  0012               	return	
  2479  001116                     __end_of_sprintf:
  2480                           	opt stack 0
  2481                           tblptru	equ	0xFF8
  2482                           tblptrh	equ	0xFF7
  2483                           tblptrl	equ	0xFF6
  2484                           tablat	equ	0xFF5
  2485                           prodh	equ	0xFF4
  2486                           prodl	equ	0xFF3
  2487                           postinc0	equ	0xFEE
  2488                           wreg	equ	0xFE8
  2489                           indf1	equ	0xFE7
  2490                           fsr1h	equ	0xFE2
  2491                           fsr1l	equ	0xFE1
  2492                           indf2	equ	0xFDF
  2493                           postinc2	equ	0xFDE
  2494                           postdec2	equ	0xFDD
  2495                           fsr2h	equ	0xFDA
  2496                           fsr2l	equ	0xFD9
  2497                           status	equ	0xFD8
  2498                           
  2499 ;; *************** function _scale *****************
  2500 ;; Defined at:
  2501 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
  2502 ;; Parameters:    Size  Location     Type
  2503 ;;  scl             1    wreg     char 
  2504 ;; Auto vars:     Size  Location     Type
  2505 ;;  scl             1   12[BANK0 ] char 
  2506 ;; Return value:  Size  Location     Type
  2507 ;;                  3    6[BANK0 ] char 
  2508 ;; Registers used:
  2509 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2510 ;; Tracked objects:
  2511 ;;		On entry : 0/0
  2512 ;;		On exit  : 0/0
  2513 ;;		Unchanged: 0/0
  2514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2515 ;;      Params:         0       3       0       0       0       0       0       0       0
  2516 ;;      Locals:         0       4       0       0       0       0       0       0       0
  2517 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2518 ;;      Totals:         0       7       0       0       0       0       0       0       0
  2519 ;;Total ram usage:        7 bytes
  2520 ;; Hardware stack levels used:    1
  2521 ;; Hardware stack levels required when called:    5
  2522 ;; This function calls:
  2523 ;;		___awdiv
  2524 ;;		___awmod
  2525 ;;		___ftmul
  2526 ;;		___wmul
  2527 ;; This function is called by:
  2528 ;;		_sprintf
  2529 ;; This function uses a non-reentrant model
  2530 ;;
  2531                           
  2532                           	psect	text2
  2533  001116                     __ptext2:
  2534                           	opt stack 0
  2535  001116                     _scale:
  2536                           	opt stack 24
  2537                           
  2538                           ; BSR set to: 0
  2539                           ;incstack = 0
  2540                           ;scale@scl stored from wreg
  2541  001116  0100               	movlb	0	; () banked
  2542  001118  6F6C               	movwf	scale@scl& (0+255),b
  2543                           
  2544                           ;doprnt.c: 428: if(scl < 0) {
  2545  00111A  0100               	movlb	0	; () banked
  2546  00111C  AF6C               	btfss	scale@scl& (0+255),7,b
  2547  00111E  D10A               	goto	l1406
  2548                           
  2549                           ; BSR set to: 0
  2550                           ;doprnt.c: 429: scl = -scl;
  2551  001120  0100               	movlb	0	; () banked
  2552  001122  6D6C               	negf	scale@scl& (0+255),b
  2553                           
  2554                           ;doprnt.c: 430: if(scl>=110)
  2555  001124  0100               	movlb	0	; () banked
  2556  001126  516C               	movf	scale@scl& (0+255),w,b
  2557  001128  0A80               	xorlw	128
  2558  00112A  0F12               	addlw	-238
  2559  00112C  A0D8               	btfss	status,0,c
  2560  00112E  D094               	goto	l1407
  2561                           
  2562                           ; BSR set to: 0
  2563                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2564  001130  0E00               	movlw	0
  2565  001132  6E27               	movwf	___wmul@multiplicand+1,c
  2566  001134  0E03               	movlw	3
  2567  001136  6E26               	movwf	___wmul@multiplicand,c
  2568  001138  0E00               	movlw	0
  2569  00113A  6E1F               	movwf	___awdiv@divisor+1,c
  2570  00113C  0E0A               	movlw	10
  2571  00113E  6E1E               	movwf	___awdiv@divisor,c
  2572  001140  0E00               	movlw	0
  2573  001142  6E19               	movwf	___awmod@divisor+1,c
  2574  001144  0E64               	movlw	100
  2575  001146  6E18               	movwf	___awmod@divisor,c
  2576  001148  0100               	movlb	0	; () banked
  2577  00114A  516C               	movf	scale@scl& (0+255),w,b
  2578  00114C  6E16               	movwf	___awmod@dividend,c
  2579  00114E  6A17               	clrf	___awmod@dividend+1,c
  2580  001150  BE16               	btfsc	___awmod@dividend,7,c
  2581  001152  0617               	decf	___awmod@dividend+1,f,c
  2582  001154  EC35  F013         	call	___awmod	;wreg free
  2583  001158  C016  F01C         	movff	?___awmod,___awdiv@dividend
  2584  00115C  C017  F01D         	movff	?___awmod+1,___awdiv@dividend+1
  2585  001160  ECB2  F012         	call	___awdiv	;wreg free
  2586  001164  0E09               	movlw	9
  2587  001166  241C               	addwf	?___awdiv,w,c
  2588  001168  6E24               	movwf	___wmul@multiplier,c
  2589  00116A  0E00               	movlw	0
  2590  00116C  201D               	addwfc	?___awdiv+1,w,c
  2591  00116E  6E25               	movwf	___wmul@multiplier+1,c
  2592  001170  ECF5  F014         	call	___wmul	;wreg free
  2593  001174  0E50               	movlw	low __npowers_
  2594  001176  2424               	addwf	?___wmul,w,c
  2595  001178  6EF6               	movwf	tblptrl,c
  2596  00117A  0E08               	movlw	high __npowers_
  2597  00117C  2025               	addwfc	?___wmul+1,w,c
  2598  00117E  6EF7               	movwf	tblptrh,c
  2599  001180                     	if	0	;There are less than 3 active tblptr bytes
  2600  001180                     	endif
  2601  001180  0009               	tblrd		*+
  2602  001182  CFF5 F02D          	movff	tablat,___ftmul@f2
  2603  001186  0009               	tblrd		*+
  2604  001188  CFF5 F02E          	movff	tablat,___ftmul@f2+1
  2605  00118C  000A               	tblrd		*-
  2606  00118E  CFF5 F02F          	movff	tablat,___ftmul@f2+2
  2607  001192  0E00               	movlw	0
  2608  001194  6E1F               	movwf	___awdiv@divisor+1,c
  2609  001196  0E64               	movlw	100
  2610  001198  6E1E               	movwf	___awdiv@divisor,c
  2611  00119A  0100               	movlb	0	; () banked
  2612  00119C  516C               	movf	scale@scl& (0+255),w,b
  2613  00119E  6E1C               	movwf	___awdiv@dividend,c
  2614  0011A0  6A1D               	clrf	___awdiv@dividend+1,c
  2615  0011A2  BE1C               	btfsc	___awdiv@dividend,7,c
  2616  0011A4  061D               	decf	___awdiv@dividend+1,f,c
  2617  0011A6  ECB2  F012         	call	___awdiv	;wreg free
  2618  0011AA  0E12               	movlw	18
  2619  0011AC  241C               	addwf	?___awdiv,w,c
  2620  0011AE  6E24               	movwf	___wmul@multiplier,c
  2621  0011B0  0E00               	movlw	0
  2622  0011B2  201D               	addwfc	?___awdiv+1,w,c
  2623  0011B4  6E25               	movwf	___wmul@multiplier+1,c
  2624  0011B6  0E00               	movlw	0
  2625  0011B8  6E27               	movwf	___wmul@multiplicand+1,c
  2626  0011BA  0E03               	movlw	3
  2627  0011BC  6E26               	movwf	___wmul@multiplicand,c
  2628  0011BE  ECF5  F014         	call	___wmul	;wreg free
  2629  0011C2  0E50               	movlw	low __npowers_
  2630  0011C4  2424               	addwf	?___wmul,w,c
  2631  0011C6  6EF6               	movwf	tblptrl,c
  2632  0011C8  0E08               	movlw	high __npowers_
  2633  0011CA  2025               	addwfc	?___wmul+1,w,c
  2634  0011CC  6EF7               	movwf	tblptrh,c
  2635  0011CE                     	if	0	;There are less than 3 active tblptr bytes
  2636  0011CE                     	endif
  2637  0011CE  0009               	tblrd		*+
  2638  0011D0  CFF5 F02A          	movff	tablat,___ftmul@f1
  2639  0011D4  0009               	tblrd		*+
  2640  0011D6  CFF5 F02B          	movff	tablat,___ftmul@f1+1
  2641  0011DA  000A               	tblrd		*-
  2642  0011DC  CFF5 F02C          	movff	tablat,___ftmul@f1+2
  2643  0011E0  ECAB  F010         	call	___ftmul	;wreg free
  2644  0011E4  C02A  F069         	movff	?___ftmul,_scale$4060
  2645  0011E8  C02B  F06A         	movff	?___ftmul+1,_scale$4060+1
  2646  0011EC  C02C  F06B         	movff	?___ftmul+2,_scale$4060+2
  2647                           
  2648                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2649  0011F0  C069  F02A         	movff	_scale$4060,___ftmul@f1
  2650  0011F4  C06A  F02B         	movff	_scale$4060+1,___ftmul@f1+1
  2651  0011F8  C06B  F02C         	movff	_scale$4060+2,___ftmul@f1+2
  2652  0011FC  0E00               	movlw	0
  2653  0011FE  6E27               	movwf	___wmul@multiplicand+1,c
  2654  001200  0E03               	movlw	3
  2655  001202  6E26               	movwf	___wmul@multiplicand,c
  2656  001204  0E00               	movlw	0
  2657  001206  6E19               	movwf	___awmod@divisor+1,c
  2658  001208  0E0A               	movlw	10
  2659  00120A  6E18               	movwf	___awmod@divisor,c
  2660  00120C  0100               	movlb	0	; () banked
  2661  00120E  516C               	movf	scale@scl& (0+255),w,b
  2662  001210  6E16               	movwf	___awmod@dividend,c
  2663  001212  6A17               	clrf	___awmod@dividend+1,c
  2664  001214  BE16               	btfsc	___awmod@dividend,7,c
  2665  001216  0617               	decf	___awmod@dividend+1,f,c
  2666  001218  EC35  F013         	call	___awmod	;wreg free
  2667  00121C  C016  F024         	movff	?___awmod,___wmul@multiplier
  2668  001220  C017  F025         	movff	?___awmod+1,___wmul@multiplier+1
  2669  001224  ECF5  F014         	call	___wmul	;wreg free
  2670  001228  0E50               	movlw	low __npowers_
  2671  00122A  2424               	addwf	?___wmul,w,c
  2672  00122C  6EF6               	movwf	tblptrl,c
  2673  00122E  0E08               	movlw	high __npowers_
  2674  001230  2025               	addwfc	?___wmul+1,w,c
  2675  001232  6EF7               	movwf	tblptrh,c
  2676  001234                     	if	0	;There are less than 3 active tblptr bytes
  2677  001234                     	endif
  2678  001234  0009               	tblrd		*+
  2679  001236  CFF5 F02D          	movff	tablat,___ftmul@f2
  2680  00123A  0009               	tblrd		*+
  2681  00123C  CFF5 F02E          	movff	tablat,___ftmul@f2+1
  2682  001240  000A               	tblrd		*-
  2683  001242  CFF5 F02F          	movff	tablat,___ftmul@f2+2
  2684  001246  ECAB  F010         	call	___ftmul	;wreg free
  2685  00124A  C02A  F066         	movff	?___ftmul,?_scale
  2686  00124E  C02B  F067         	movff	?___ftmul+1,?_scale+1
  2687  001252  C02C  F068         	movff	?___ftmul+2,?_scale+2
  2688  001256  0012               	return	
  2689  001258                     l1407:
  2690                           
  2691                           ;doprnt.c: 432: else if(scl > 10)
  2692  001258  0100               	movlb	0	; () banked
  2693  00125A  516C               	movf	scale@scl& (0+255),w,b
  2694  00125C  0A80               	xorlw	128
  2695  00125E  0F75               	addlw	-139
  2696  001260  A0D8               	btfss	status,0,c
  2697  001262  D055               	goto	l1410
  2698                           
  2699                           ; BSR set to: 0
  2700                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  2701  001264  0E00               	movlw	0
  2702  001266  6E1F               	movwf	___awdiv@divisor+1,c
  2703  001268  0E0A               	movlw	10
  2704  00126A  6E1E               	movwf	___awdiv@divisor,c
  2705  00126C  0100               	movlb	0	; () banked
  2706  00126E  516C               	movf	scale@scl& (0+255),w,b
  2707  001270  6E1C               	movwf	___awdiv@dividend,c
  2708  001272  6A1D               	clrf	___awdiv@dividend+1,c
  2709  001274  BE1C               	btfsc	___awdiv@dividend,7,c
  2710  001276  061D               	decf	___awdiv@dividend+1,f,c
  2711  001278  ECB2  F012         	call	___awdiv	;wreg free
  2712  00127C  0E09               	movlw	9
  2713  00127E  241C               	addwf	?___awdiv,w,c
  2714  001280  6E24               	movwf	___wmul@multiplier,c
  2715  001282  0E00               	movlw	0
  2716  001284  201D               	addwfc	?___awdiv+1,w,c
  2717  001286  6E25               	movwf	___wmul@multiplier+1,c
  2718  001288  0E00               	movlw	0
  2719  00128A  6E27               	movwf	___wmul@multiplicand+1,c
  2720  00128C  0E03               	movlw	3
  2721  00128E  6E26               	movwf	___wmul@multiplicand,c
  2722  001290  ECF5  F014         	call	___wmul	;wreg free
  2723  001294  0E50               	movlw	low __npowers_
  2724  001296  2424               	addwf	?___wmul,w,c
  2725  001298  6EF6               	movwf	tblptrl,c
  2726  00129A  0E08               	movlw	high __npowers_
  2727  00129C  2025               	addwfc	?___wmul+1,w,c
  2728  00129E  6EF7               	movwf	tblptrh,c
  2729  0012A0                     	if	0	;There are less than 3 active tblptr bytes
  2730  0012A0                     	endif
  2731  0012A0  0009               	tblrd		*+
  2732  0012A2  CFF5 F02A          	movff	tablat,___ftmul@f1
  2733  0012A6  0009               	tblrd		*+
  2734  0012A8  CFF5 F02B          	movff	tablat,___ftmul@f1+1
  2735  0012AC  000A               	tblrd		*-
  2736  0012AE  CFF5 F02C          	movff	tablat,___ftmul@f1+2
  2737  0012B2  0E00               	movlw	0
  2738  0012B4  6E27               	movwf	___wmul@multiplicand+1,c
  2739  0012B6  0E03               	movlw	3
  2740  0012B8  6E26               	movwf	___wmul@multiplicand,c
  2741  0012BA  0E00               	movlw	0
  2742  0012BC  6E19               	movwf	___awmod@divisor+1,c
  2743  0012BE  0E0A               	movlw	10
  2744  0012C0  6E18               	movwf	___awmod@divisor,c
  2745  0012C2  0100               	movlb	0	; () banked
  2746  0012C4  516C               	movf	scale@scl& (0+255),w,b
  2747  0012C6  6E16               	movwf	___awmod@dividend,c
  2748  0012C8  6A17               	clrf	___awmod@dividend+1,c
  2749  0012CA  BE16               	btfsc	___awmod@dividend,7,c
  2750  0012CC  0617               	decf	___awmod@dividend+1,f,c
  2751  0012CE  EC35  F013         	call	___awmod	;wreg free
  2752  0012D2  C016  F024         	movff	?___awmod,___wmul@multiplier
  2753  0012D6  C017  F025         	movff	?___awmod+1,___wmul@multiplier+1
  2754  0012DA  ECF5  F014         	call	___wmul	;wreg free
  2755  0012DE  0E50               	movlw	low __npowers_
  2756  0012E0  2424               	addwf	?___wmul,w,c
  2757  0012E2  6EF6               	movwf	tblptrl,c
  2758  0012E4  0E08               	movlw	high __npowers_
  2759  0012E6  2025               	addwfc	?___wmul+1,w,c
  2760  0012E8  6EF7               	movwf	tblptrh,c
  2761  0012EA                     	if	0	;There are less than 3 active tblptr bytes
  2762  0012EA                     	endif
  2763  0012EA  0009               	tblrd		*+
  2764  0012EC  CFF5 F02D          	movff	tablat,___ftmul@f2
  2765  0012F0  0009               	tblrd		*+
  2766  0012F2  CFF5 F02E          	movff	tablat,___ftmul@f2+1
  2767  0012F6  000A               	tblrd		*-
  2768  0012F8  CFF5 F02F          	movff	tablat,___ftmul@f2+2
  2769  0012FC  ECAB  F010         	call	___ftmul	;wreg free
  2770  001300  C02A  F066         	movff	?___ftmul,?_scale
  2771  001304  C02B  F067         	movff	?___ftmul+1,?_scale+1
  2772  001308  C02C  F068         	movff	?___ftmul+2,?_scale+2
  2773  00130C  0012               	return	
  2774  00130E                     l1410:
  2775                           
  2776                           ;doprnt.c: 434: return _npowers_[scl];
  2777  00130E  0100               	movlb	0	; () banked
  2778  001310  516C               	movf	scale@scl& (0+255),w,b
  2779  001312  0D03               	mullw	3
  2780  001314  0E50               	movlw	low __npowers_
  2781  001316  24F3               	addwf	prodl,w,c
  2782  001318  6EF6               	movwf	tblptrl,c
  2783  00131A  0E08               	movlw	high __npowers_
  2784  00131C  20F4               	addwfc	prodh,w,c
  2785  00131E  6EF7               	movwf	tblptrh,c
  2786  001320                     	if	0	;There are less than 3 active tblptr bytes
  2787  001320                     	endif
  2788  001320  0009               	tblrd		*+
  2789  001322  CFF5 F066          	movff	tablat,?_scale
  2790  001326  0009               	tblrd		*+
  2791  001328  CFF5 F067          	movff	tablat,?_scale+1
  2792  00132C  000A               	tblrd		*-
  2793  00132E  CFF5 F068          	movff	tablat,?_scale+2
  2794                           
  2795                           ; BSR set to: 0
  2796  001332  0012               	return	
  2797  001334                     l1406:
  2798                           
  2799                           ; BSR set to: 0
  2800                           ;doprnt.c: 435: }
  2801                           ;doprnt.c: 436: if(scl>=110)
  2802                           
  2803                           ; BSR set to: 0
  2804  001334  0100               	movlb	0	; () banked
  2805  001336  516C               	movf	scale@scl& (0+255),w,b
  2806  001338  0A80               	xorlw	128
  2807  00133A  0F12               	addlw	-238
  2808  00133C  A0D8               	btfss	status,0,c
  2809  00133E  D094               	goto	l1411
  2810                           
  2811                           ; BSR set to: 0
  2812                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2813  001340  0E00               	movlw	0
  2814  001342  6E27               	movwf	___wmul@multiplicand+1,c
  2815  001344  0E03               	movlw	3
  2816  001346  6E26               	movwf	___wmul@multiplicand,c
  2817  001348  0E00               	movlw	0
  2818  00134A  6E1F               	movwf	___awdiv@divisor+1,c
  2819  00134C  0E0A               	movlw	10
  2820  00134E  6E1E               	movwf	___awdiv@divisor,c
  2821  001350  0E00               	movlw	0
  2822  001352  6E19               	movwf	___awmod@divisor+1,c
  2823  001354  0E64               	movlw	100
  2824  001356  6E18               	movwf	___awmod@divisor,c
  2825  001358  0100               	movlb	0	; () banked
  2826  00135A  516C               	movf	scale@scl& (0+255),w,b
  2827  00135C  6E16               	movwf	___awmod@dividend,c
  2828  00135E  6A17               	clrf	___awmod@dividend+1,c
  2829  001360  BE16               	btfsc	___awmod@dividend,7,c
  2830  001362  0617               	decf	___awmod@dividend+1,f,c
  2831  001364  EC35  F013         	call	___awmod	;wreg free
  2832  001368  C016  F01C         	movff	?___awmod,___awdiv@dividend
  2833  00136C  C017  F01D         	movff	?___awmod+1,___awdiv@dividend+1
  2834  001370  ECB2  F012         	call	___awdiv	;wreg free
  2835  001374  0E09               	movlw	9
  2836  001376  241C               	addwf	?___awdiv,w,c
  2837  001378  6E24               	movwf	___wmul@multiplier,c
  2838  00137A  0E00               	movlw	0
  2839  00137C  201D               	addwfc	?___awdiv+1,w,c
  2840  00137E  6E25               	movwf	___wmul@multiplier+1,c
  2841  001380  ECF5  F014         	call	___wmul	;wreg free
  2842  001384  0E29               	movlw	low __powers_
  2843  001386  2424               	addwf	?___wmul,w,c
  2844  001388  6EF6               	movwf	tblptrl,c
  2845  00138A  0E08               	movlw	high __powers_
  2846  00138C  2025               	addwfc	?___wmul+1,w,c
  2847  00138E  6EF7               	movwf	tblptrh,c
  2848  001390                     	if	0	;There are less than 3 active tblptr bytes
  2849  001390                     	endif
  2850  001390  0009               	tblrd		*+
  2851  001392  CFF5 F02D          	movff	tablat,___ftmul@f2
  2852  001396  0009               	tblrd		*+
  2853  001398  CFF5 F02E          	movff	tablat,___ftmul@f2+1
  2854  00139C  000A               	tblrd		*-
  2855  00139E  CFF5 F02F          	movff	tablat,___ftmul@f2+2
  2856  0013A2  0E00               	movlw	0
  2857  0013A4  6E1F               	movwf	___awdiv@divisor+1,c
  2858  0013A6  0E64               	movlw	100
  2859  0013A8  6E1E               	movwf	___awdiv@divisor,c
  2860  0013AA  0100               	movlb	0	; () banked
  2861  0013AC  516C               	movf	scale@scl& (0+255),w,b
  2862  0013AE  6E1C               	movwf	___awdiv@dividend,c
  2863  0013B0  6A1D               	clrf	___awdiv@dividend+1,c
  2864  0013B2  BE1C               	btfsc	___awdiv@dividend,7,c
  2865  0013B4  061D               	decf	___awdiv@dividend+1,f,c
  2866  0013B6  ECB2  F012         	call	___awdiv	;wreg free
  2867  0013BA  0E12               	movlw	18
  2868  0013BC  241C               	addwf	?___awdiv,w,c
  2869  0013BE  6E24               	movwf	___wmul@multiplier,c
  2870  0013C0  0E00               	movlw	0
  2871  0013C2  201D               	addwfc	?___awdiv+1,w,c
  2872  0013C4  6E25               	movwf	___wmul@multiplier+1,c
  2873  0013C6  0E00               	movlw	0
  2874  0013C8  6E27               	movwf	___wmul@multiplicand+1,c
  2875  0013CA  0E03               	movlw	3
  2876  0013CC  6E26               	movwf	___wmul@multiplicand,c
  2877  0013CE  ECF5  F014         	call	___wmul	;wreg free
  2878  0013D2  0E29               	movlw	low __powers_
  2879  0013D4  2424               	addwf	?___wmul,w,c
  2880  0013D6  6EF6               	movwf	tblptrl,c
  2881  0013D8  0E08               	movlw	high __powers_
  2882  0013DA  2025               	addwfc	?___wmul+1,w,c
  2883  0013DC  6EF7               	movwf	tblptrh,c
  2884  0013DE                     	if	0	;There are less than 3 active tblptr bytes
  2885  0013DE                     	endif
  2886  0013DE  0009               	tblrd		*+
  2887  0013E0  CFF5 F02A          	movff	tablat,___ftmul@f1
  2888  0013E4  0009               	tblrd		*+
  2889  0013E6  CFF5 F02B          	movff	tablat,___ftmul@f1+1
  2890  0013EA  000A               	tblrd		*-
  2891  0013EC  CFF5 F02C          	movff	tablat,___ftmul@f1+2
  2892  0013F0  ECAB  F010         	call	___ftmul	;wreg free
  2893  0013F4  C02A  F069         	movff	?___ftmul,_scale$4060
  2894  0013F8  C02B  F06A         	movff	?___ftmul+1,_scale$4060+1
  2895  0013FC  C02C  F06B         	movff	?___ftmul+2,_scale$4060+2
  2896                           
  2897                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2898  001400  C069  F02A         	movff	_scale$4060,___ftmul@f1
  2899  001404  C06A  F02B         	movff	_scale$4060+1,___ftmul@f1+1
  2900  001408  C06B  F02C         	movff	_scale$4060+2,___ftmul@f1+2
  2901  00140C  0E00               	movlw	0
  2902  00140E  6E27               	movwf	___wmul@multiplicand+1,c
  2903  001410  0E03               	movlw	3
  2904  001412  6E26               	movwf	___wmul@multiplicand,c
  2905  001414  0E00               	movlw	0
  2906  001416  6E19               	movwf	___awmod@divisor+1,c
  2907  001418  0E0A               	movlw	10
  2908  00141A  6E18               	movwf	___awmod@divisor,c
  2909  00141C  0100               	movlb	0	; () banked
  2910  00141E  516C               	movf	scale@scl& (0+255),w,b
  2911  001420  6E16               	movwf	___awmod@dividend,c
  2912  001422  6A17               	clrf	___awmod@dividend+1,c
  2913  001424  BE16               	btfsc	___awmod@dividend,7,c
  2914  001426  0617               	decf	___awmod@dividend+1,f,c
  2915  001428  EC35  F013         	call	___awmod	;wreg free
  2916  00142C  C016  F024         	movff	?___awmod,___wmul@multiplier
  2917  001430  C017  F025         	movff	?___awmod+1,___wmul@multiplier+1
  2918  001434  ECF5  F014         	call	___wmul	;wreg free
  2919  001438  0E29               	movlw	low __powers_
  2920  00143A  2424               	addwf	?___wmul,w,c
  2921  00143C  6EF6               	movwf	tblptrl,c
  2922  00143E  0E08               	movlw	high __powers_
  2923  001440  2025               	addwfc	?___wmul+1,w,c
  2924  001442  6EF7               	movwf	tblptrh,c
  2925  001444                     	if	0	;There are less than 3 active tblptr bytes
  2926  001444                     	endif
  2927  001444  0009               	tblrd		*+
  2928  001446  CFF5 F02D          	movff	tablat,___ftmul@f2
  2929  00144A  0009               	tblrd		*+
  2930  00144C  CFF5 F02E          	movff	tablat,___ftmul@f2+1
  2931  001450  000A               	tblrd		*-
  2932  001452  CFF5 F02F          	movff	tablat,___ftmul@f2+2
  2933  001456  ECAB  F010         	call	___ftmul	;wreg free
  2934  00145A  C02A  F066         	movff	?___ftmul,?_scale
  2935  00145E  C02B  F067         	movff	?___ftmul+1,?_scale+1
  2936  001462  C02C  F068         	movff	?___ftmul+2,?_scale+2
  2937  001466  0012               	return	
  2938  001468                     l1411:
  2939                           
  2940                           ;doprnt.c: 438: else if(scl > 10)
  2941  001468  0100               	movlb	0	; () banked
  2942  00146A  516C               	movf	scale@scl& (0+255),w,b
  2943  00146C  0A80               	xorlw	128
  2944  00146E  0F75               	addlw	-139
  2945  001470  A0D8               	btfss	status,0,c
  2946  001472  D055               	goto	l1413
  2947                           
  2948                           ; BSR set to: 0
  2949                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  2950  001474  0E00               	movlw	0
  2951  001476  6E1F               	movwf	___awdiv@divisor+1,c
  2952  001478  0E0A               	movlw	10
  2953  00147A  6E1E               	movwf	___awdiv@divisor,c
  2954  00147C  0100               	movlb	0	; () banked
  2955  00147E  516C               	movf	scale@scl& (0+255),w,b
  2956  001480  6E1C               	movwf	___awdiv@dividend,c
  2957  001482  6A1D               	clrf	___awdiv@dividend+1,c
  2958  001484  BE1C               	btfsc	___awdiv@dividend,7,c
  2959  001486  061D               	decf	___awdiv@dividend+1,f,c
  2960  001488  ECB2  F012         	call	___awdiv	;wreg free
  2961  00148C  0E09               	movlw	9
  2962  00148E  241C               	addwf	?___awdiv,w,c
  2963  001490  6E24               	movwf	___wmul@multiplier,c
  2964  001492  0E00               	movlw	0
  2965  001494  201D               	addwfc	?___awdiv+1,w,c
  2966  001496  6E25               	movwf	___wmul@multiplier+1,c
  2967  001498  0E00               	movlw	0
  2968  00149A  6E27               	movwf	___wmul@multiplicand+1,c
  2969  00149C  0E03               	movlw	3
  2970  00149E  6E26               	movwf	___wmul@multiplicand,c
  2971  0014A0  ECF5  F014         	call	___wmul	;wreg free
  2972  0014A4  0E29               	movlw	low __powers_
  2973  0014A6  2424               	addwf	?___wmul,w,c
  2974  0014A8  6EF6               	movwf	tblptrl,c
  2975  0014AA  0E08               	movlw	high __powers_
  2976  0014AC  2025               	addwfc	?___wmul+1,w,c
  2977  0014AE  6EF7               	movwf	tblptrh,c
  2978  0014B0                     	if	0	;There are less than 3 active tblptr bytes
  2979  0014B0                     	endif
  2980  0014B0  0009               	tblrd		*+
  2981  0014B2  CFF5 F02A          	movff	tablat,___ftmul@f1
  2982  0014B6  0009               	tblrd		*+
  2983  0014B8  CFF5 F02B          	movff	tablat,___ftmul@f1+1
  2984  0014BC  000A               	tblrd		*-
  2985  0014BE  CFF5 F02C          	movff	tablat,___ftmul@f1+2
  2986  0014C2  0E00               	movlw	0
  2987  0014C4  6E27               	movwf	___wmul@multiplicand+1,c
  2988  0014C6  0E03               	movlw	3
  2989  0014C8  6E26               	movwf	___wmul@multiplicand,c
  2990  0014CA  0E00               	movlw	0
  2991  0014CC  6E19               	movwf	___awmod@divisor+1,c
  2992  0014CE  0E0A               	movlw	10
  2993  0014D0  6E18               	movwf	___awmod@divisor,c
  2994  0014D2  0100               	movlb	0	; () banked
  2995  0014D4  516C               	movf	scale@scl& (0+255),w,b
  2996  0014D6  6E16               	movwf	___awmod@dividend,c
  2997  0014D8  6A17               	clrf	___awmod@dividend+1,c
  2998  0014DA  BE16               	btfsc	___awmod@dividend,7,c
  2999  0014DC  0617               	decf	___awmod@dividend+1,f,c
  3000  0014DE  EC35  F013         	call	___awmod	;wreg free
  3001  0014E2  C016  F024         	movff	?___awmod,___wmul@multiplier
  3002  0014E6  C017  F025         	movff	?___awmod+1,___wmul@multiplier+1
  3003  0014EA  ECF5  F014         	call	___wmul	;wreg free
  3004  0014EE  0E29               	movlw	low __powers_
  3005  0014F0  2424               	addwf	?___wmul,w,c
  3006  0014F2  6EF6               	movwf	tblptrl,c
  3007  0014F4  0E08               	movlw	high __powers_
  3008  0014F6  2025               	addwfc	?___wmul+1,w,c
  3009  0014F8  6EF7               	movwf	tblptrh,c
  3010  0014FA                     	if	0	;There are less than 3 active tblptr bytes
  3011  0014FA                     	endif
  3012  0014FA  0009               	tblrd		*+
  3013  0014FC  CFF5 F02D          	movff	tablat,___ftmul@f2
  3014  001500  0009               	tblrd		*+
  3015  001502  CFF5 F02E          	movff	tablat,___ftmul@f2+1
  3016  001506  000A               	tblrd		*-
  3017  001508  CFF5 F02F          	movff	tablat,___ftmul@f2+2
  3018  00150C  ECAB  F010         	call	___ftmul	;wreg free
  3019  001510  C02A  F066         	movff	?___ftmul,?_scale
  3020  001514  C02B  F067         	movff	?___ftmul+1,?_scale+1
  3021  001518  C02C  F068         	movff	?___ftmul+2,?_scale+2
  3022  00151C  0012               	return	
  3023  00151E                     l1413:
  3024                           
  3025                           ;doprnt.c: 440: return _powers_[scl];
  3026  00151E  0100               	movlb	0	; () banked
  3027  001520  516C               	movf	scale@scl& (0+255),w,b
  3028  001522  0D03               	mullw	3
  3029  001524  0E29               	movlw	low __powers_
  3030  001526  24F3               	addwf	prodl,w,c
  3031  001528  6EF6               	movwf	tblptrl,c
  3032  00152A  0E08               	movlw	high __powers_
  3033  00152C  20F4               	addwfc	prodh,w,c
  3034  00152E  6EF7               	movwf	tblptrh,c
  3035  001530                     	if	0	;There are less than 3 active tblptr bytes
  3036  001530                     	endif
  3037  001530  0009               	tblrd		*+
  3038  001532  CFF5 F066          	movff	tablat,?_scale
  3039  001536  0009               	tblrd		*+
  3040  001538  CFF5 F067          	movff	tablat,?_scale+1
  3041  00153C  000A               	tblrd		*-
  3042  00153E  CFF5 F068          	movff	tablat,?_scale+2
  3043  001542  0012               	return	
  3044  001544                     __end_of_scale:
  3045                           	opt stack 0
  3046                           tblptru	equ	0xFF8
  3047                           tblptrh	equ	0xFF7
  3048                           tblptrl	equ	0xFF6
  3049                           tablat	equ	0xFF5
  3050                           prodh	equ	0xFF4
  3051                           prodl	equ	0xFF3
  3052                           postinc0	equ	0xFEE
  3053                           wreg	equ	0xFE8
  3054                           indf1	equ	0xFE7
  3055                           fsr1h	equ	0xFE2
  3056                           fsr1l	equ	0xFE1
  3057                           indf2	equ	0xFDF
  3058                           postinc2	equ	0xFDE
  3059                           postdec2	equ	0xFDD
  3060                           fsr2h	equ	0xFDA
  3061                           fsr2l	equ	0xFD9
  3062                           status	equ	0xFD8
  3063                           
  3064 ;; *************** function _isdigit *****************
  3065 ;; Defined at:
  3066 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\isdigit.c"
  3067 ;; Parameters:    Size  Location     Type
  3068 ;;  c               1    wreg     unsigned char 
  3069 ;; Auto vars:     Size  Location     Type
  3070 ;;  c               1   23[COMRAM] unsigned char 
  3071 ;; Return value:  Size  Location     Type
  3072 ;;		None               void
  3073 ;; Registers used:
  3074 ;;		wreg, status,2, status,0
  3075 ;; Tracked objects:
  3076 ;;		On entry : 0/0
  3077 ;;		On exit  : 0/0
  3078 ;;		Unchanged: 0/0
  3079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3080 ;;      Params:         0       0       0       0       0       0       0       0       0
  3081 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3082 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3083 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3084 ;;Total ram usage:        3 bytes
  3085 ;; Hardware stack levels used:    1
  3086 ;; Hardware stack levels required when called:    3
  3087 ;; This function calls:
  3088 ;;		Nothing
  3089 ;; This function is called by:
  3090 ;;		_sprintf
  3091 ;; This function uses a non-reentrant model
  3092 ;;
  3093                           
  3094                           	psect	text3
  3095  002A58                     __ptext3:
  3096                           	opt stack 0
  3097  002A58                     _isdigit:
  3098                           	opt stack 26
  3099                           
  3100                           ;incstack = 0
  3101                           ;isdigit@c stored from wreg
  3102  002A58  6E18               	movwf	isdigit@c,c
  3103  002A5A  0E00               	movlw	0
  3104  002A5C  6E17               	movwf	_isdigit$3475,c
  3105  002A5E  0E3A               	movlw	58
  3106  002A60  6018               	cpfslt	isdigit@c,c
  3107  002A62  D005               	goto	l1851
  3108  002A64  0E2F               	movlw	47
  3109  002A66  6418               	cpfsgt	isdigit@c,c
  3110  002A68  D002               	goto	l1851
  3111  002A6A  0E01               	movlw	1
  3112  002A6C  6E17               	movwf	_isdigit$3475,c
  3113  002A6E                     l1851:
  3114  002A6E  C017  F016         	movff	_isdigit$3475,??_isdigit
  3115  002A72  3016               	rrcf	??_isdigit,w,c
  3116  002A74  0012               	return	
  3117  002A76                     __end_of_isdigit:
  3118                           	opt stack 0
  3119                           tblptru	equ	0xFF8
  3120                           tblptrh	equ	0xFF7
  3121                           tblptrl	equ	0xFF6
  3122                           tablat	equ	0xFF5
  3123                           prodh	equ	0xFF4
  3124                           prodl	equ	0xFF3
  3125                           postinc0	equ	0xFEE
  3126                           wreg	equ	0xFE8
  3127                           indf1	equ	0xFE7
  3128                           fsr1h	equ	0xFE2
  3129                           fsr1l	equ	0xFE1
  3130                           indf2	equ	0xFDF
  3131                           postinc2	equ	0xFDE
  3132                           postdec2	equ	0xFDD
  3133                           fsr2h	equ	0xFDA
  3134                           fsr2l	equ	0xFD9
  3135                           status	equ	0xFD8
  3136                           
  3137 ;; *************** function _fround *****************
  3138 ;; Defined at:
  3139 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
  3140 ;; Parameters:    Size  Location     Type
  3141 ;;  prec            1    wreg     unsigned char 
  3142 ;; Auto vars:     Size  Location     Type
  3143 ;;  prec            1   15[BANK0 ] unsigned char 
  3144 ;; Return value:  Size  Location     Type
  3145 ;;                  3    6[BANK0 ] unsigned char 
  3146 ;; Registers used:
  3147 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3148 ;; Tracked objects:
  3149 ;;		On entry : 0/0
  3150 ;;		On exit  : 0/0
  3151 ;;		Unchanged: 0/0
  3152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3153 ;;      Params:         0       3       0       0       0       0       0       0       0
  3154 ;;      Locals:         0       7       0       0       0       0       0       0       0
  3155 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3156 ;;      Totals:         0      10       0       0       0       0       0       0       0
  3157 ;;Total ram usage:       10 bytes
  3158 ;; Hardware stack levels used:    1
  3159 ;; Hardware stack levels required when called:    5
  3160 ;; This function calls:
  3161 ;;		___awdiv
  3162 ;;		___awmod
  3163 ;;		___ftmul
  3164 ;;		___wmul
  3165 ;; This function is called by:
  3166 ;;		_sprintf
  3167 ;; This function uses a non-reentrant model
  3168 ;;
  3169                           
  3170                           	psect	text4
  3171  0017AC                     __ptext4:
  3172                           	opt stack 0
  3173  0017AC                     _fround:
  3174                           	opt stack 24
  3175                           
  3176                           ;incstack = 0
  3177                           ;fround@prec stored from wreg
  3178  0017AC  0100               	movlb	0	; () banked
  3179  0017AE  6F6F               	movwf	fround@prec& (0+255),b
  3180                           
  3181                           ;doprnt.c: 413: if(prec>=110)
  3182  0017B0  0E6D               	movlw	109
  3183  0017B2  0100               	movlb	0	; () banked
  3184  0017B4  656F               	cpfsgt	fround@prec& (0+255),b
  3185  0017B6  D09F               	goto	l1400
  3186                           
  3187                           ; BSR set to: 0
  3188                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3189  0017B8  0E00               	movlw	0
  3190  0017BA  6E27               	movwf	___wmul@multiplicand+1,c
  3191  0017BC  0E03               	movlw	3
  3192  0017BE  6E26               	movwf	___wmul@multiplicand,c
  3193  0017C0  0E00               	movlw	0
  3194  0017C2  6E1F               	movwf	___awdiv@divisor+1,c
  3195  0017C4  0E0A               	movlw	10
  3196  0017C6  6E1E               	movwf	___awdiv@divisor,c
  3197  0017C8  0E00               	movlw	0
  3198  0017CA  6E19               	movwf	___awmod@divisor+1,c
  3199  0017CC  0E64               	movlw	100
  3200  0017CE  6E18               	movwf	___awmod@divisor,c
  3201  0017D0  C06F  F016         	movff	fround@prec,___awmod@dividend
  3202  0017D4  6A17               	clrf	___awmod@dividend+1,c
  3203  0017D6  EC35  F013         	call	___awmod	;wreg free
  3204  0017DA  C016  F01C         	movff	?___awmod,___awdiv@dividend
  3205  0017DE  C017  F01D         	movff	?___awmod+1,___awdiv@dividend+1
  3206  0017E2  ECB2  F012         	call	___awdiv	;wreg free
  3207  0017E6  0E09               	movlw	9
  3208  0017E8  241C               	addwf	?___awdiv,w,c
  3209  0017EA  6E24               	movwf	___wmul@multiplier,c
  3210  0017EC  0E00               	movlw	0
  3211  0017EE  201D               	addwfc	?___awdiv+1,w,c
  3212  0017F0  6E25               	movwf	___wmul@multiplier+1,c
  3213  0017F2  ECF5  F014         	call	___wmul	;wreg free
  3214  0017F6  0E50               	movlw	low __npowers_
  3215  0017F8  2424               	addwf	?___wmul,w,c
  3216  0017FA  6EF6               	movwf	tblptrl,c
  3217  0017FC  0E08               	movlw	high __npowers_
  3218  0017FE  2025               	addwfc	?___wmul+1,w,c
  3219  001800  6EF7               	movwf	tblptrh,c
  3220  001802                     	if	0	;There are less than 3 active tblptr bytes
  3221  001802                     	endif
  3222  001802  0009               	tblrd		*+
  3223  001804  CFF5 F02D          	movff	tablat,___ftmul@f2
  3224  001808  0009               	tblrd		*+
  3225  00180A  CFF5 F02E          	movff	tablat,___ftmul@f2+1
  3226  00180E  000A               	tblrd		*-
  3227  001810  CFF5 F02F          	movff	tablat,___ftmul@f2+2
  3228  001814  0E00               	movlw	0
  3229  001816  6E1F               	movwf	___awdiv@divisor+1,c
  3230  001818  0E64               	movlw	100
  3231  00181A  6E1E               	movwf	___awdiv@divisor,c
  3232  00181C  C06F  F01C         	movff	fround@prec,___awdiv@dividend
  3233  001820  6A1D               	clrf	___awdiv@dividend+1,c
  3234  001822  ECB2  F012         	call	___awdiv	;wreg free
  3235  001826  0E12               	movlw	18
  3236  001828  241C               	addwf	?___awdiv,w,c
  3237  00182A  6E24               	movwf	___wmul@multiplier,c
  3238  00182C  0E00               	movlw	0
  3239  00182E  201D               	addwfc	?___awdiv+1,w,c
  3240  001830  6E25               	movwf	___wmul@multiplier+1,c
  3241  001832  0E00               	movlw	0
  3242  001834  6E27               	movwf	___wmul@multiplicand+1,c
  3243  001836  0E03               	movlw	3
  3244  001838  6E26               	movwf	___wmul@multiplicand,c
  3245  00183A  ECF5  F014         	call	___wmul	;wreg free
  3246  00183E  0E50               	movlw	low __npowers_
  3247  001840  2424               	addwf	?___wmul,w,c
  3248  001842  6EF6               	movwf	tblptrl,c
  3249  001844  0E08               	movlw	high __npowers_
  3250  001846  2025               	addwfc	?___wmul+1,w,c
  3251  001848  6EF7               	movwf	tblptrh,c
  3252  00184A                     	if	0	;There are less than 3 active tblptr bytes
  3253  00184A                     	endif
  3254  00184A  0009               	tblrd		*+
  3255  00184C  CFF5 F02A          	movff	tablat,___ftmul@f1
  3256  001850  0009               	tblrd		*+
  3257  001852  CFF5 F02B          	movff	tablat,___ftmul@f1+1
  3258  001856  000A               	tblrd		*-
  3259  001858  CFF5 F02C          	movff	tablat,___ftmul@f1+2
  3260  00185C  ECAB  F010         	call	___ftmul	;wreg free
  3261  001860  C02A  F06C         	movff	?___ftmul,_fround$4058
  3262  001864  C02B  F06D         	movff	?___ftmul+1,_fround$4058+1
  3263  001868  C02C  F06E         	movff	?___ftmul+2,_fround$4058+2
  3264                           
  3265                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3266  00186C  0E00               	movlw	0
  3267  00186E  6E27               	movwf	___wmul@multiplicand+1,c
  3268  001870  0E03               	movlw	3
  3269  001872  6E26               	movwf	___wmul@multiplicand,c
  3270  001874  0E00               	movlw	0
  3271  001876  6E19               	movwf	___awmod@divisor+1,c
  3272  001878  0E0A               	movlw	10
  3273  00187A  6E18               	movwf	___awmod@divisor,c
  3274  00187C  C06F  F016         	movff	fround@prec,___awmod@dividend
  3275  001880  6A17               	clrf	___awmod@dividend+1,c
  3276  001882  EC35  F013         	call	___awmod	;wreg free
  3277  001886  C016  F024         	movff	?___awmod,___wmul@multiplier
  3278  00188A  C017  F025         	movff	?___awmod+1,___wmul@multiplier+1
  3279  00188E  ECF5  F014         	call	___wmul	;wreg free
  3280  001892  0E50               	movlw	low __npowers_
  3281  001894  2424               	addwf	?___wmul,w,c
  3282  001896  6EF6               	movwf	tblptrl,c
  3283  001898  0E08               	movlw	high __npowers_
  3284  00189A  2025               	addwfc	?___wmul+1,w,c
  3285  00189C  6EF7               	movwf	tblptrh,c
  3286  00189E                     	if	0	;There are less than 3 active tblptr bytes
  3287  00189E                     	endif
  3288  00189E  0009               	tblrd		*+
  3289  0018A0  CFF5 F02D          	movff	tablat,___ftmul@f2
  3290  0018A4  0009               	tblrd		*+
  3291  0018A6  CFF5 F02E          	movff	tablat,___ftmul@f2+1
  3292  0018AA  000A               	tblrd		*-
  3293  0018AC  CFF5 F02F          	movff	tablat,___ftmul@f2+2
  3294  0018B0  C06C  F02A         	movff	_fround$4058,___ftmul@f1
  3295  0018B4  C06D  F02B         	movff	_fround$4058+1,___ftmul@f1+1
  3296  0018B8  C06E  F02C         	movff	_fround$4058+2,___ftmul@f1+2
  3297  0018BC  ECAB  F010         	call	___ftmul	;wreg free
  3298  0018C0  C02A  F069         	movff	?___ftmul,_fround$4059
  3299  0018C4  C02B  F06A         	movff	?___ftmul+1,_fround$4059+1
  3300  0018C8  C02C  F06B         	movff	?___ftmul+2,_fround$4059+2
  3301                           
  3302                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3303  0018CC  C069  F02A         	movff	_fround$4059,___ftmul@f1
  3304  0018D0  C06A  F02B         	movff	_fround$4059+1,___ftmul@f1+1
  3305  0018D4  C06B  F02C         	movff	_fround$4059+2,___ftmul@f1+2
  3306  0018D8  0E00               	movlw	0
  3307  0018DA  6E2D               	movwf	___ftmul@f2,c
  3308  0018DC  0E00               	movlw	0
  3309  0018DE  6E2E               	movwf	___ftmul@f2+1,c
  3310  0018E0  0E3F               	movlw	63
  3311  0018E2  6E2F               	movwf	___ftmul@f2+2,c
  3312  0018E4  ECAB  F010         	call	___ftmul	;wreg free
  3313  0018E8  C02A  F066         	movff	?___ftmul,?_fround
  3314  0018EC  C02B  F067         	movff	?___ftmul+1,?_fround+1
  3315  0018F0  C02C  F068         	movff	?___ftmul+2,?_fround+2
  3316  0018F4  0012               	return	
  3317  0018F6                     l1400:
  3318                           
  3319                           ;doprnt.c: 415: else if(prec > 10)
  3320  0018F6  0E0A               	movlw	10
  3321  0018F8  0100               	movlb	0	; () banked
  3322  0018FA  656F               	cpfsgt	fround@prec& (0+255),b
  3323  0018FC  D063               	goto	l1403
  3324                           
  3325                           ; BSR set to: 0
  3326                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3327  0018FE  0E00               	movlw	0
  3328  001900  6E27               	movwf	___wmul@multiplicand+1,c
  3329  001902  0E03               	movlw	3
  3330  001904  6E26               	movwf	___wmul@multiplicand,c
  3331  001906  0E00               	movlw	0
  3332  001908  6E19               	movwf	___awmod@divisor+1,c
  3333  00190A  0E0A               	movlw	10
  3334  00190C  6E18               	movwf	___awmod@divisor,c
  3335  00190E  C06F  F016         	movff	fround@prec,___awmod@dividend
  3336  001912  6A17               	clrf	___awmod@dividend+1,c
  3337  001914  EC35  F013         	call	___awmod	;wreg free
  3338  001918  C016  F024         	movff	?___awmod,___wmul@multiplier
  3339  00191C  C017  F025         	movff	?___awmod+1,___wmul@multiplier+1
  3340  001920  ECF5  F014         	call	___wmul	;wreg free
  3341  001924  0E50               	movlw	low __npowers_
  3342  001926  2424               	addwf	?___wmul,w,c
  3343  001928  6EF6               	movwf	tblptrl,c
  3344  00192A  0E08               	movlw	high __npowers_
  3345  00192C  2025               	addwfc	?___wmul+1,w,c
  3346  00192E  6EF7               	movwf	tblptrh,c
  3347  001930                     	if	0	;There are less than 3 active tblptr bytes
  3348  001930                     	endif
  3349  001930  0009               	tblrd		*+
  3350  001932  CFF5 F02D          	movff	tablat,___ftmul@f2
  3351  001936  0009               	tblrd		*+
  3352  001938  CFF5 F02E          	movff	tablat,___ftmul@f2+1
  3353  00193C  000A               	tblrd		*-
  3354  00193E  CFF5 F02F          	movff	tablat,___ftmul@f2+2
  3355  001942  0E00               	movlw	0
  3356  001944  6E1F               	movwf	___awdiv@divisor+1,c
  3357  001946  0E0A               	movlw	10
  3358  001948  6E1E               	movwf	___awdiv@divisor,c
  3359  00194A  C06F  F01C         	movff	fround@prec,___awdiv@dividend
  3360  00194E  6A1D               	clrf	___awdiv@dividend+1,c
  3361  001950  ECB2  F012         	call	___awdiv	;wreg free
  3362  001954  0E09               	movlw	9
  3363  001956  241C               	addwf	?___awdiv,w,c
  3364  001958  6E24               	movwf	___wmul@multiplier,c
  3365  00195A  0E00               	movlw	0
  3366  00195C  201D               	addwfc	?___awdiv+1,w,c
  3367  00195E  6E25               	movwf	___wmul@multiplier+1,c
  3368  001960  0E00               	movlw	0
  3369  001962  6E27               	movwf	___wmul@multiplicand+1,c
  3370  001964  0E03               	movlw	3
  3371  001966  6E26               	movwf	___wmul@multiplicand,c
  3372  001968  ECF5  F014         	call	___wmul	;wreg free
  3373  00196C  0E50               	movlw	low __npowers_
  3374  00196E  2424               	addwf	?___wmul,w,c
  3375  001970  6EF6               	movwf	tblptrl,c
  3376  001972  0E08               	movlw	high __npowers_
  3377  001974  2025               	addwfc	?___wmul+1,w,c
  3378  001976  6EF7               	movwf	tblptrh,c
  3379  001978                     	if	0	;There are less than 3 active tblptr bytes
  3380  001978                     	endif
  3381  001978  0009               	tblrd		*+
  3382  00197A  CFF5 F02A          	movff	tablat,___ftmul@f1
  3383  00197E  0009               	tblrd		*+
  3384  001980  CFF5 F02B          	movff	tablat,___ftmul@f1+1
  3385  001984  000A               	tblrd		*-
  3386  001986  CFF5 F02C          	movff	tablat,___ftmul@f1+2
  3387  00198A  ECAB  F010         	call	___ftmul	;wreg free
  3388  00198E  C02A  F06C         	movff	?___ftmul,_fround$4058
  3389  001992  C02B  F06D         	movff	?___ftmul+1,_fround$4058+1
  3390  001996  C02C  F06E         	movff	?___ftmul+2,_fround$4058+2
  3391                           
  3392                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3393  00199A  C06C  F02A         	movff	_fround$4058,___ftmul@f1
  3394  00199E  C06D  F02B         	movff	_fround$4058+1,___ftmul@f1+1
  3395  0019A2  C06E  F02C         	movff	_fround$4058+2,___ftmul@f1+2
  3396  0019A6  0E00               	movlw	0
  3397  0019A8  6E2D               	movwf	___ftmul@f2,c
  3398  0019AA  0E00               	movlw	0
  3399  0019AC  6E2E               	movwf	___ftmul@f2+1,c
  3400  0019AE  0E3F               	movlw	63
  3401  0019B0  6E2F               	movwf	___ftmul@f2+2,c
  3402  0019B2  ECAB  F010         	call	___ftmul	;wreg free
  3403  0019B6  C02A  F066         	movff	?___ftmul,?_fround
  3404  0019BA  C02B  F067         	movff	?___ftmul+1,?_fround+1
  3405  0019BE  C02C  F068         	movff	?___ftmul+2,?_fround+2
  3406  0019C2  0012               	return	
  3407  0019C4                     l1403:
  3408                           
  3409                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  3410  0019C4  0100               	movlb	0	; () banked
  3411  0019C6  516F               	movf	fround@prec& (0+255),w,b
  3412  0019C8  0D03               	mullw	3
  3413  0019CA  0E50               	movlw	low __npowers_
  3414  0019CC  24F3               	addwf	prodl,w,c
  3415  0019CE  6EF6               	movwf	tblptrl,c
  3416  0019D0  0E08               	movlw	high __npowers_
  3417  0019D2  20F4               	addwfc	prodh,w,c
  3418  0019D4  6EF7               	movwf	tblptrh,c
  3419  0019D6                     	if	0	;There are less than 3 active tblptr bytes
  3420  0019D6                     	endif
  3421  0019D6  0009               	tblrd		*+
  3422  0019D8  CFF5 F02A          	movff	tablat,___ftmul@f1
  3423  0019DC  0009               	tblrd		*+
  3424  0019DE  CFF5 F02B          	movff	tablat,___ftmul@f1+1
  3425  0019E2  000A               	tblrd		*-
  3426  0019E4  CFF5 F02C          	movff	tablat,___ftmul@f1+2
  3427  0019E8  0E00               	movlw	0
  3428  0019EA  6E2D               	movwf	___ftmul@f2,c
  3429  0019EC  0E00               	movlw	0
  3430  0019EE  6E2E               	movwf	___ftmul@f2+1,c
  3431  0019F0  0E3F               	movlw	63
  3432  0019F2  6E2F               	movwf	___ftmul@f2+2,c
  3433  0019F4  ECAB  F010         	call	___ftmul	;wreg free
  3434  0019F8  C02A  F066         	movff	?___ftmul,?_fround
  3435  0019FC  C02B  F067         	movff	?___ftmul+1,?_fround+1
  3436  001A00  C02C  F068         	movff	?___ftmul+2,?_fround+2
  3437  001A04  0012               	return	
  3438  001A06                     __end_of_fround:
  3439                           	opt stack 0
  3440                           tblptru	equ	0xFF8
  3441                           tblptrh	equ	0xFF7
  3442                           tblptrl	equ	0xFF6
  3443                           tablat	equ	0xFF5
  3444                           prodh	equ	0xFF4
  3445                           prodl	equ	0xFF3
  3446                           postinc0	equ	0xFEE
  3447                           wreg	equ	0xFE8
  3448                           indf1	equ	0xFE7
  3449                           fsr1h	equ	0xFE2
  3450                           fsr1l	equ	0xFE1
  3451                           indf2	equ	0xFDF
  3452                           postinc2	equ	0xFDE
  3453                           postdec2	equ	0xFDD
  3454                           fsr2h	equ	0xFDA
  3455                           fsr2l	equ	0xFD9
  3456                           status	equ	0xFD8
  3457                           
  3458 ;; *************** function ___wmul *****************
  3459 ;; Defined at:
  3460 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\Umul16.c"
  3461 ;; Parameters:    Size  Location     Type
  3462 ;;  multiplier      2   35[COMRAM] unsigned int 
  3463 ;;  multiplicand    2   37[COMRAM] unsigned int 
  3464 ;; Auto vars:     Size  Location     Type
  3465 ;;  product         2   39[COMRAM] unsigned int 
  3466 ;; Return value:  Size  Location     Type
  3467 ;;                  2   35[COMRAM] unsigned int 
  3468 ;; Registers used:
  3469 ;;		wreg, status,2, status,0, prodl, prodh
  3470 ;; Tracked objects:
  3471 ;;		On entry : 0/0
  3472 ;;		On exit  : 0/0
  3473 ;;		Unchanged: 0/0
  3474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3475 ;;      Params:         4       0       0       0       0       0       0       0       0
  3476 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3477 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3478 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3479 ;;Total ram usage:        6 bytes
  3480 ;; Hardware stack levels used:    1
  3481 ;; Hardware stack levels required when called:    3
  3482 ;; This function calls:
  3483 ;;		Nothing
  3484 ;; This function is called by:
  3485 ;;		_fround
  3486 ;;		_scale
  3487 ;;		_sprintf
  3488 ;; This function uses a non-reentrant model
  3489 ;;
  3490                           
  3491                           	psect	text5
  3492  0029EA                     __ptext5:
  3493                           	opt stack 0
  3494  0029EA                     ___wmul:
  3495                           	opt stack 25
  3496                           
  3497                           ;incstack = 0
  3498  0029EA  5024               	movf	___wmul@multiplier,w,c
  3499  0029EC  0226               	mulwf	___wmul@multiplicand,c
  3500  0029EE  CFF3 F028          	movff	prodl,___wmul@product
  3501  0029F2  CFF4 F029          	movff	prodh,___wmul@product+1
  3502  0029F6  5024               	movf	___wmul@multiplier,w,c
  3503  0029F8  0227               	mulwf	___wmul@multiplicand+1,c
  3504  0029FA  50F3               	movf	prodl,w,c
  3505  0029FC  2629               	addwf	___wmul@product+1,f,c
  3506  0029FE  5025               	movf	___wmul@multiplier+1,w,c
  3507  002A00  0226               	mulwf	___wmul@multiplicand,c
  3508  002A02  50F3               	movf	prodl,w,c
  3509  002A04  2629               	addwf	___wmul@product+1,f,c
  3510  002A06  C028  F024         	movff	___wmul@product,?___wmul
  3511  002A0A  C029  F025         	movff	___wmul@product+1,?___wmul+1
  3512  002A0E  0012               	return	
  3513  002A10                     __end_of___wmul:
  3514                           	opt stack 0
  3515                           tblptru	equ	0xFF8
  3516                           tblptrh	equ	0xFF7
  3517                           tblptrl	equ	0xFF6
  3518                           tablat	equ	0xFF5
  3519                           prodh	equ	0xFF4
  3520                           prodl	equ	0xFF3
  3521                           postinc0	equ	0xFEE
  3522                           wreg	equ	0xFE8
  3523                           indf1	equ	0xFE7
  3524                           fsr1h	equ	0xFE2
  3525                           fsr1l	equ	0xFE1
  3526                           indf2	equ	0xFDF
  3527                           postinc2	equ	0xFDE
  3528                           postdec2	equ	0xFDD
  3529                           fsr2h	equ	0xFDA
  3530                           fsr2l	equ	0xFD9
  3531                           status	equ	0xFD8
  3532                           
  3533 ;; *************** function ___ftmul *****************
  3534 ;; Defined at:
  3535 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftmul.c"
  3536 ;; Parameters:    Size  Location     Type
  3537 ;;  f1              3   41[COMRAM] float 
  3538 ;;  f2              3   44[COMRAM] float 
  3539 ;; Auto vars:     Size  Location     Type
  3540 ;;  f3_as_produc    3    1[BANK0 ] unsigned um
  3541 ;;  sign            1    5[BANK0 ] unsigned char 
  3542 ;;  cntr            1    4[BANK0 ] unsigned char 
  3543 ;;  exp             1    0[BANK0 ] unsigned char 
  3544 ;; Return value:  Size  Location     Type
  3545 ;;                  3   41[COMRAM] float 
  3546 ;; Registers used:
  3547 ;;		wreg, status,2, status,0, cstack
  3548 ;; Tracked objects:
  3549 ;;		On entry : 0/0
  3550 ;;		On exit  : 0/0
  3551 ;;		Unchanged: 0/0
  3552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3553 ;;      Params:         6       0       0       0       0       0       0       0       0
  3554 ;;      Locals:         0       6       0       0       0       0       0       0       0
  3555 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3556 ;;      Totals:         9       6       0       0       0       0       0       0       0
  3557 ;;Total ram usage:       15 bytes
  3558 ;; Hardware stack levels used:    1
  3559 ;; Hardware stack levels required when called:    4
  3560 ;; This function calls:
  3561 ;;		___ftpack
  3562 ;; This function is called by:
  3563 ;;		_fround
  3564 ;;		_scale
  3565 ;;		_sprintf
  3566 ;; This function uses a non-reentrant model
  3567 ;;
  3568                           
  3569                           	psect	text6
  3570  002156                     __ptext6:
  3571                           	opt stack 0
  3572  002156                     ___ftmul:
  3573                           	opt stack 24
  3574                           
  3575                           ;incstack = 0
  3576  002156  C02C  F030         	movff	___ftmul@f1+2,??___ftmul
  3577  00215A  6A31               	clrf	(??___ftmul+1)& (0+255),c
  3578  00215C  6A32               	clrf	(??___ftmul+2)& (0+255),c
  3579  00215E  342B               	rlcf	___ftmul@f1+1,w,c
  3580  002160  3630               	rlcf	??___ftmul& (0+255),f,c
  3581  002162  E301               	bnc	u6041
  3582  002164  8031               	bsf	(??___ftmul+1)& (0+255),0,c
  3583  002166                     u6041:
  3584  002166  5030               	movf	??___ftmul,w,c
  3585  002168  0100               	movlb	0	; () banked
  3586  00216A  6F60               	movwf	___ftmul@exp& (0+255),b
  3587  00216C  0100               	movlb	0	; () banked
  3588  00216E  5160               	movf	___ftmul@exp& (0+255),w,b
  3589  002170  A4D8               	btfss	status,2,c
  3590  002172  D007               	goto	l1815
  3591                           
  3592                           ; BSR set to: 0
  3593  002174  0E00               	movlw	0
  3594  002176  6E2A               	movwf	?___ftmul,c
  3595  002178  0E00               	movlw	0
  3596  00217A  6E2B               	movwf	?___ftmul+1,c
  3597  00217C  0E00               	movlw	0
  3598  00217E  6E2C               	movwf	?___ftmul+2,c
  3599                           
  3600                           ; BSR set to: 0
  3601  002180  0012               	return	
  3602  002182                     l1815:
  3603                           
  3604                           ; BSR set to: 0
  3605                           
  3606                           ; BSR set to: 0
  3607  002182  C02F  F030         	movff	___ftmul@f2+2,??___ftmul
  3608  002186  6A31               	clrf	(??___ftmul+1)& (0+255),c
  3609  002188  6A32               	clrf	(??___ftmul+2)& (0+255),c
  3610  00218A  342E               	rlcf	___ftmul@f2+1,w,c
  3611  00218C  3630               	rlcf	??___ftmul& (0+255),f,c
  3612  00218E  E301               	bnc	u6061
  3613  002190  8031               	bsf	(??___ftmul+1)& (0+255),0,c
  3614  002192                     u6061:
  3615  002192  5030               	movf	??___ftmul,w,c
  3616  002194  0100               	movlb	0	; () banked
  3617  002196  6F65               	movwf	___ftmul@sign& (0+255),b
  3618  002198  0100               	movlb	0	; () banked
  3619  00219A  5165               	movf	___ftmul@sign& (0+255),w,b
  3620  00219C  A4D8               	btfss	status,2,c
  3621  00219E  D007               	goto	l1817
  3622                           
  3623                           ; BSR set to: 0
  3624  0021A0  0E00               	movlw	0
  3625  0021A2  6E2A               	movwf	?___ftmul,c
  3626  0021A4  0E00               	movlw	0
  3627  0021A6  6E2B               	movwf	?___ftmul+1,c
  3628  0021A8  0E00               	movlw	0
  3629  0021AA  6E2C               	movwf	?___ftmul+2,c
  3630                           
  3631                           ; BSR set to: 0
  3632  0021AC  0012               	return	
  3633  0021AE                     l1817:
  3634                           
  3635                           ; BSR set to: 0
  3636                           
  3637                           ; BSR set to: 0
  3638  0021AE  0100               	movlb	0	; () banked
  3639  0021B0  5165               	movf	___ftmul@sign& (0+255),w,b
  3640  0021B2  0F7B               	addlw	123
  3641  0021B4  0100               	movlb	0	; () banked
  3642  0021B6  2760               	addwf	___ftmul@exp& (0+255),f,b
  3643                           
  3644                           ; BSR set to: 0
  3645  0021B8  C02C  F065         	movff	___ftmul@f1+2,___ftmul@sign
  3646  0021BC  502F               	movf	___ftmul@f2+2,w,c
  3647  0021BE  0100               	movlb	0	; () banked
  3648  0021C0  1B65               	xorwf	___ftmul@sign& (0+255),f,b
  3649  0021C2  0E80               	movlw	128
  3650  0021C4  0100               	movlb	0	; () banked
  3651  0021C6  1765               	andwf	___ftmul@sign& (0+255),f,b
  3652                           
  3653                           ; BSR set to: 0
  3654  0021C8  8E2B               	bsf	___ftmul@f1+1,7,c
  3655                           
  3656                           ; BSR set to: 0
  3657  0021CA  8E2E               	bsf	___ftmul@f2+1,7,c
  3658                           
  3659                           ; BSR set to: 0
  3660  0021CC  0EFF               	movlw	255
  3661  0021CE  162D               	andwf	___ftmul@f2,f,c
  3662  0021D0  0EFF               	movlw	255
  3663  0021D2  162E               	andwf	___ftmul@f2+1,f,c
  3664  0021D4  0E00               	movlw	0
  3665  0021D6  162F               	andwf	___ftmul@f2+2,f,c
  3666                           
  3667                           ; BSR set to: 0
  3668  0021D8  0E00               	movlw	0
  3669  0021DA  0100               	movlb	0	; () banked
  3670  0021DC  6F61               	movwf	___ftmul@f3_as_product& (0+255),b
  3671  0021DE  0E00               	movlw	0
  3672  0021E0  0100               	movlb	0	; () banked
  3673  0021E2  6F62               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  3674  0021E4  0E00               	movlw	0
  3675  0021E6  0100               	movlb	0	; () banked
  3676  0021E8  6F63               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  3677                           
  3678                           ; BSR set to: 0
  3679  0021EA  0E07               	movlw	7
  3680  0021EC  0100               	movlb	0	; () banked
  3681  0021EE  6F64               	movwf	___ftmul@cntr& (0+255),b
  3682  0021F0                     
  3683                           ; BSR set to: 0
  3684                           
  3685                           ; BSR set to: 0
  3686  0021F0  A02A               	btfss	___ftmul@f1,0,c
  3687  0021F2  D009               	goto	l1819
  3688                           
  3689                           ; BSR set to: 0
  3690  0021F4  502D               	movf	___ftmul@f2,w,c
  3691  0021F6  0100               	movlb	0	; () banked
  3692  0021F8  2761               	addwf	___ftmul@f3_as_product& (0+255),f,b
  3693  0021FA  502E               	movf	___ftmul@f2+1,w,c
  3694  0021FC  0100               	movlb	0	; () banked
  3695  0021FE  2362               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  3696  002200  502F               	movf	___ftmul@f2+2,w,c
  3697  002202  0100               	movlb	0	; () banked
  3698  002204  2363               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  3699  002206                     l1819:
  3700                           
  3701                           ; BSR set to: 0
  3702                           
  3703                           ; BSR set to: 0
  3704  002206  90D8               	bcf	status,0,c
  3705  002208  322C               	rrcf	___ftmul@f1+2,f,c
  3706  00220A  322B               	rrcf	___ftmul@f1+1,f,c
  3707  00220C  322A               	rrcf	___ftmul@f1,f,c
  3708  00220E  90D8               	bcf	status,0,c
  3709  002210  362D               	rlcf	___ftmul@f2,f,c
  3710  002212  362E               	rlcf	___ftmul@f2+1,f,c
  3711  002214  362F               	rlcf	___ftmul@f2+2,f,c
  3712                           
  3713                           ; BSR set to: 0
  3714  002216  0100               	movlb	0	; () banked
  3715  002218  2F64               	decfsz	___ftmul@cntr& (0+255),f,b
  3716  00221A  D7EA               	goto	l1818
  3717                           
  3718                           ; BSR set to: 0
  3719                           
  3720                           ; BSR set to: 0
  3721  00221C  0E09               	movlw	9
  3722  00221E  0100               	movlb	0	; () banked
  3723  002220  6F64               	movwf	___ftmul@cntr& (0+255),b
  3724  002222                     
  3725                           ; BSR set to: 0
  3726                           
  3727                           ; BSR set to: 0
  3728  002222  A02A               	btfss	___ftmul@f1,0,c
  3729  002224  D009               	goto	l1822
  3730                           
  3731                           ; BSR set to: 0
  3732  002226  502D               	movf	___ftmul@f2,w,c
  3733  002228  0100               	movlb	0	; () banked
  3734  00222A  2761               	addwf	___ftmul@f3_as_product& (0+255),f,b
  3735  00222C  502E               	movf	___ftmul@f2+1,w,c
  3736  00222E  0100               	movlb	0	; () banked
  3737  002230  2362               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  3738  002232  502F               	movf	___ftmul@f2+2,w,c
  3739  002234  0100               	movlb	0	; () banked
  3740  002236  2363               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  3741  002238                     l1822:
  3742                           
  3743                           ; BSR set to: 0
  3744                           
  3745                           ; BSR set to: 0
  3746  002238  90D8               	bcf	status,0,c
  3747  00223A  322C               	rrcf	___ftmul@f1+2,f,c
  3748  00223C  322B               	rrcf	___ftmul@f1+1,f,c
  3749  00223E  322A               	rrcf	___ftmul@f1,f,c
  3750  002240  0100               	movlb	0	; () banked
  3751  002242  90D8               	bcf	status,0,c
  3752  002244  3363               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  3753  002246  3362               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  3754  002248  3361               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  3755                           
  3756                           ; BSR set to: 0
  3757  00224A  0100               	movlb	0	; () banked
  3758  00224C  2F64               	decfsz	___ftmul@cntr& (0+255),f,b
  3759  00224E  D7E9               	goto	l1821
  3760                           
  3761                           ; BSR set to: 0
  3762                           
  3763                           ; BSR set to: 0
  3764  002250  C061  F016         	movff	___ftmul@f3_as_product,___ftpack@arg
  3765  002254  C062  F017         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3766  002258  C063  F018         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3767  00225C  C060  F019         	movff	___ftmul@exp,___ftpack@exp
  3768  002260  C065  F01A         	movff	___ftmul@sign,___ftpack@sign
  3769  002264  ECC1  F011         	call	___ftpack	;wreg free
  3770  002268  C016  F02A         	movff	?___ftpack,?___ftmul
  3771  00226C  C017  F02B         	movff	?___ftpack+1,?___ftmul+1
  3772  002270  C018  F02C         	movff	?___ftpack+2,?___ftmul+2
  3773  002274  0012               	return	
  3774  002276                     __end_of___ftmul:
  3775                           	opt stack 0
  3776                           tblptru	equ	0xFF8
  3777                           tblptrh	equ	0xFF7
  3778                           tblptrl	equ	0xFF6
  3779                           tablat	equ	0xFF5
  3780                           prodh	equ	0xFF4
  3781                           prodl	equ	0xFF3
  3782                           postinc0	equ	0xFEE
  3783                           wreg	equ	0xFE8
  3784                           indf1	equ	0xFE7
  3785                           fsr1h	equ	0xFE2
  3786                           fsr1l	equ	0xFE1
  3787                           indf2	equ	0xFDF
  3788                           postinc2	equ	0xFDE
  3789                           postdec2	equ	0xFDD
  3790                           fsr2h	equ	0xFDA
  3791                           fsr2l	equ	0xFD9
  3792                           status	equ	0xFD8
  3793                           
  3794 ;; *************** function ___awmod *****************
  3795 ;; Defined at:
  3796 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\awmod.c"
  3797 ;; Parameters:    Size  Location     Type
  3798 ;;  dividend        2   21[COMRAM] int 
  3799 ;;  divisor         2   23[COMRAM] int 
  3800 ;; Auto vars:     Size  Location     Type
  3801 ;;  sign            1   26[COMRAM] unsigned char 
  3802 ;;  counter         1   25[COMRAM] unsigned char 
  3803 ;; Return value:  Size  Location     Type
  3804 ;;                  2   21[COMRAM] int 
  3805 ;; Registers used:
  3806 ;;		wreg, status,2, status,0
  3807 ;; Tracked objects:
  3808 ;;		On entry : 0/0
  3809 ;;		On exit  : 0/0
  3810 ;;		Unchanged: 0/0
  3811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3812 ;;      Params:         4       0       0       0       0       0       0       0       0
  3813 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3814 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3815 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3816 ;;Total ram usage:        6 bytes
  3817 ;; Hardware stack levels used:    1
  3818 ;; Hardware stack levels required when called:    3
  3819 ;; This function calls:
  3820 ;;		Nothing
  3821 ;; This function is called by:
  3822 ;;		_fround
  3823 ;;		_scale
  3824 ;; This function uses a non-reentrant model
  3825 ;;
  3826                           
  3827                           	psect	text7
  3828  00266A                     __ptext7:
  3829                           	opt stack 0
  3830  00266A                     ___awmod:
  3831                           	opt stack 25
  3832                           
  3833                           ;incstack = 0
  3834  00266A  0E00               	movlw	0
  3835  00266C  6E1B               	movwf	___awmod@sign,c
  3836  00266E  AE17               	btfss	___awmod@dividend+1,7,c
  3837  002670  D006               	goto	l1661
  3838  002672  6C16               	negf	___awmod@dividend,c
  3839  002674  1E17               	comf	___awmod@dividend+1,f,c
  3840  002676  B0D8               	btfsc	status,0,c
  3841  002678  2A17               	incf	___awmod@dividend+1,f,c
  3842  00267A  0E01               	movlw	1
  3843  00267C  6E1B               	movwf	___awmod@sign,c
  3844  00267E                     l1661:
  3845  00267E  AE19               	btfss	___awmod@divisor+1,7,c
  3846  002680  D004               	goto	l1662
  3847  002682  6C18               	negf	___awmod@divisor,c
  3848  002684  1E19               	comf	___awmod@divisor+1,f,c
  3849  002686  B0D8               	btfsc	status,0,c
  3850  002688  2A19               	incf	___awmod@divisor+1,f,c
  3851  00268A                     l1662:
  3852  00268A  5018               	movf	___awmod@divisor,w,c
  3853  00268C  1019               	iorwf	___awmod@divisor+1,w,c
  3854  00268E  B4D8               	btfsc	status,2,c
  3855  002690  D018               	goto	l1669
  3856  002692  0E01               	movlw	1
  3857  002694  6E1A               	movwf	___awmod@counter,c
  3858  002696  D004               	goto	l1664
  3859  002698  90D8               	bcf	status,0,c
  3860  00269A  3618               	rlcf	___awmod@divisor,f,c
  3861  00269C  3619               	rlcf	___awmod@divisor+1,f,c
  3862  00269E  2A1A               	incf	___awmod@counter,f,c
  3863  0026A0                     l1664:
  3864  0026A0  AE19               	btfss	___awmod@divisor+1,7,c
  3865  0026A2  D7FA               	goto	l1665
  3866  0026A4                     u6190:
  3867  0026A4  5018               	movf	___awmod@divisor,w,c
  3868  0026A6  5C16               	subwf	___awmod@dividend,w,c
  3869  0026A8  5019               	movf	___awmod@divisor+1,w,c
  3870  0026AA  5817               	subwfb	___awmod@dividend+1,w,c
  3871  0026AC  A0D8               	btfss	status,0,c
  3872  0026AE  D004               	goto	l1668
  3873  0026B0  5018               	movf	___awmod@divisor,w,c
  3874  0026B2  5E16               	subwf	___awmod@dividend,f,c
  3875  0026B4  5019               	movf	___awmod@divisor+1,w,c
  3876  0026B6  5A17               	subwfb	___awmod@dividend+1,f,c
  3877  0026B8                     l1668:
  3878  0026B8  90D8               	bcf	status,0,c
  3879  0026BA  3219               	rrcf	___awmod@divisor+1,f,c
  3880  0026BC  3218               	rrcf	___awmod@divisor,f,c
  3881  0026BE  2E1A               	decfsz	___awmod@counter,f,c
  3882  0026C0  D7F1               	goto	u6190
  3883  0026C2                     l1669:
  3884  0026C2  501B               	movf	___awmod@sign,w,c
  3885  0026C4  B4D8               	btfsc	status,2,c
  3886  0026C6  D004               	goto	l1670
  3887  0026C8  6C16               	negf	___awmod@dividend,c
  3888  0026CA  1E17               	comf	___awmod@dividend+1,f,c
  3889  0026CC  B0D8               	btfsc	status,0,c
  3890  0026CE  2A17               	incf	___awmod@dividend+1,f,c
  3891  0026D0                     l1670:
  3892  0026D0  C016  F016         	movff	___awmod@dividend,?___awmod
  3893  0026D4  C017  F017         	movff	___awmod@dividend+1,?___awmod+1
  3894  0026D8  0012               	return	
  3895  0026DA                     __end_of___awmod:
  3896                           	opt stack 0
  3897                           tblptru	equ	0xFF8
  3898                           tblptrh	equ	0xFF7
  3899                           tblptrl	equ	0xFF6
  3900                           tablat	equ	0xFF5
  3901                           prodh	equ	0xFF4
  3902                           prodl	equ	0xFF3
  3903                           postinc0	equ	0xFEE
  3904                           wreg	equ	0xFE8
  3905                           indf1	equ	0xFE7
  3906                           fsr1h	equ	0xFE2
  3907                           fsr1l	equ	0xFE1
  3908                           indf2	equ	0xFDF
  3909                           postinc2	equ	0xFDE
  3910                           postdec2	equ	0xFDD
  3911                           fsr2h	equ	0xFDA
  3912                           fsr2l	equ	0xFD9
  3913                           status	equ	0xFD8
  3914                           
  3915 ;; *************** function ___awdiv *****************
  3916 ;; Defined at:
  3917 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\awdiv.c"
  3918 ;; Parameters:    Size  Location     Type
  3919 ;;  dividend        2   27[COMRAM] int 
  3920 ;;  divisor         2   29[COMRAM] int 
  3921 ;; Auto vars:     Size  Location     Type
  3922 ;;  quotient        2   33[COMRAM] int 
  3923 ;;  sign            1   32[COMRAM] unsigned char 
  3924 ;;  counter         1   31[COMRAM] unsigned char 
  3925 ;; Return value:  Size  Location     Type
  3926 ;;                  2   27[COMRAM] int 
  3927 ;; Registers used:
  3928 ;;		wreg, status,2, status,0
  3929 ;; Tracked objects:
  3930 ;;		On entry : 0/0
  3931 ;;		On exit  : 0/0
  3932 ;;		Unchanged: 0/0
  3933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3934 ;;      Params:         4       0       0       0       0       0       0       0       0
  3935 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3936 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3937 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3938 ;;Total ram usage:        8 bytes
  3939 ;; Hardware stack levels used:    1
  3940 ;; Hardware stack levels required when called:    3
  3941 ;; This function calls:
  3942 ;;		Nothing
  3943 ;; This function is called by:
  3944 ;;		_fround
  3945 ;;		_scale
  3946 ;;		_sprintf
  3947 ;; This function uses a non-reentrant model
  3948 ;;
  3949                           
  3950                           	psect	text8
  3951  002564                     __ptext8:
  3952                           	opt stack 0
  3953  002564                     ___awdiv:
  3954                           	opt stack 25
  3955                           
  3956                           ;incstack = 0
  3957  002564  0E00               	movlw	0
  3958  002566  6E21               	movwf	___awdiv@sign,c
  3959  002568  AE1F               	btfss	___awdiv@divisor+1,7,c
  3960  00256A  D006               	goto	l1648
  3961  00256C  6C1E               	negf	___awdiv@divisor,c
  3962  00256E  1E1F               	comf	___awdiv@divisor+1,f,c
  3963  002570  B0D8               	btfsc	status,0,c
  3964  002572  2A1F               	incf	___awdiv@divisor+1,f,c
  3965  002574  0E01               	movlw	1
  3966  002576  6E21               	movwf	___awdiv@sign,c
  3967  002578                     l1648:
  3968  002578  AE1D               	btfss	___awdiv@dividend+1,7,c
  3969  00257A  D006               	goto	l1649
  3970  00257C  6C1C               	negf	___awdiv@dividend,c
  3971  00257E  1E1D               	comf	___awdiv@dividend+1,f,c
  3972  002580  B0D8               	btfsc	status,0,c
  3973  002582  2A1D               	incf	___awdiv@dividend+1,f,c
  3974  002584  0E01               	movlw	1
  3975  002586  1A21               	xorwf	___awdiv@sign,f,c
  3976  002588                     l1649:
  3977  002588  0E00               	movlw	0
  3978  00258A  6E23               	movwf	___awdiv@quotient+1,c
  3979  00258C  0E00               	movlw	0
  3980  00258E  6E22               	movwf	___awdiv@quotient,c
  3981  002590  501E               	movf	___awdiv@divisor,w,c
  3982  002592  101F               	iorwf	___awdiv@divisor+1,w,c
  3983  002594  B4D8               	btfsc	status,2,c
  3984  002596  D01C               	goto	l1656
  3985  002598  0E01               	movlw	1
  3986  00259A  6E20               	movwf	___awdiv@counter,c
  3987  00259C  D004               	goto	l1651
  3988  00259E  90D8               	bcf	status,0,c
  3989  0025A0  361E               	rlcf	___awdiv@divisor,f,c
  3990  0025A2  361F               	rlcf	___awdiv@divisor+1,f,c
  3991  0025A4  2A20               	incf	___awdiv@counter,f,c
  3992  0025A6                     l1651:
  3993  0025A6  AE1F               	btfss	___awdiv@divisor+1,7,c
  3994  0025A8  D7FA               	goto	l1652
  3995  0025AA                     u6130:
  3996  0025AA  90D8               	bcf	status,0,c
  3997  0025AC  3622               	rlcf	___awdiv@quotient,f,c
  3998  0025AE  3623               	rlcf	___awdiv@quotient+1,f,c
  3999  0025B0  501E               	movf	___awdiv@divisor,w,c
  4000  0025B2  5C1C               	subwf	___awdiv@dividend,w,c
  4001  0025B4  501F               	movf	___awdiv@divisor+1,w,c
  4002  0025B6  581D               	subwfb	___awdiv@dividend+1,w,c
  4003  0025B8  A0D8               	btfss	status,0,c
  4004  0025BA  D005               	goto	l1655
  4005  0025BC  501E               	movf	___awdiv@divisor,w,c
  4006  0025BE  5E1C               	subwf	___awdiv@dividend,f,c
  4007  0025C0  501F               	movf	___awdiv@divisor+1,w,c
  4008  0025C2  5A1D               	subwfb	___awdiv@dividend+1,f,c
  4009  0025C4  8022               	bsf	___awdiv@quotient,0,c
  4010  0025C6                     l1655:
  4011  0025C6  90D8               	bcf	status,0,c
  4012  0025C8  321F               	rrcf	___awdiv@divisor+1,f,c
  4013  0025CA  321E               	rrcf	___awdiv@divisor,f,c
  4014  0025CC  2E20               	decfsz	___awdiv@counter,f,c
  4015  0025CE  D7ED               	goto	u6130
  4016  0025D0                     l1656:
  4017  0025D0  5021               	movf	___awdiv@sign,w,c
  4018  0025D2  B4D8               	btfsc	status,2,c
  4019  0025D4  D004               	goto	l1657
  4020  0025D6  6C22               	negf	___awdiv@quotient,c
  4021  0025D8  1E23               	comf	___awdiv@quotient+1,f,c
  4022  0025DA  B0D8               	btfsc	status,0,c
  4023  0025DC  2A23               	incf	___awdiv@quotient+1,f,c
  4024  0025DE                     l1657:
  4025  0025DE  C022  F01C         	movff	___awdiv@quotient,?___awdiv
  4026  0025E2  C023  F01D         	movff	___awdiv@quotient+1,?___awdiv+1
  4027  0025E6  0012               	return	
  4028  0025E8                     __end_of___awdiv:
  4029                           	opt stack 0
  4030                           tblptru	equ	0xFF8
  4031                           tblptrh	equ	0xFF7
  4032                           tblptrl	equ	0xFF6
  4033                           tablat	equ	0xFF5
  4034                           prodh	equ	0xFF4
  4035                           prodl	equ	0xFF3
  4036                           postinc0	equ	0xFEE
  4037                           wreg	equ	0xFE8
  4038                           indf1	equ	0xFE7
  4039                           fsr1h	equ	0xFE2
  4040                           fsr1l	equ	0xFE1
  4041                           indf2	equ	0xFDF
  4042                           postinc2	equ	0xFDE
  4043                           postdec2	equ	0xFDD
  4044                           fsr2h	equ	0xFDA
  4045                           fsr2l	equ	0xFD9
  4046                           status	equ	0xFD8
  4047                           
  4048 ;; *************** function __tdiv_to_l_ *****************
  4049 ;; Defined at:
  4050 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftdivl.c"
  4051 ;; Parameters:    Size  Location     Type
  4052 ;;  f1              3   21[COMRAM] float 
  4053 ;;  f2              3   24[COMRAM] float 
  4054 ;; Auto vars:     Size  Location     Type
  4055 ;;  quot            4   30[COMRAM] unsigned long 
  4056 ;;  exp1            1   35[COMRAM] unsigned char 
  4057 ;;  cntr            1   34[COMRAM] unsigned char 
  4058 ;; Return value:  Size  Location     Type
  4059 ;;                  4   21[COMRAM] unsigned long 
  4060 ;; Registers used:
  4061 ;;		wreg, status,2, status,0
  4062 ;; Tracked objects:
  4063 ;;		On entry : 0/0
  4064 ;;		On exit  : 0/0
  4065 ;;		Unchanged: 0/0
  4066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4067 ;;      Params:         6       0       0       0       0       0       0       0       0
  4068 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4069 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4070 ;;      Totals:        15       0       0       0       0       0       0       0       0
  4071 ;;Total ram usage:       15 bytes
  4072 ;; Hardware stack levels used:    1
  4073 ;; Hardware stack levels required when called:    3
  4074 ;; This function calls:
  4075 ;;		Nothing
  4076 ;; This function is called by:
  4077 ;;		_sprintf
  4078 ;; This function uses a non-reentrant model
  4079 ;;
  4080                           
  4081                           	psect	text9
  4082  001EFC                     __ptext9:
  4083                           	opt stack 0
  4084  001EFC                     __tdiv_to_l_:
  4085                           	opt stack 26
  4086                           
  4087                           ;incstack = 0
  4088  001EFC  C018  F01C         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  4089  001F00  6A1D               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4090  001F02  6A1E               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4091  001F04  3417               	rlcf	__tdiv_to_l_@f1+1,w,c
  4092  001F06  361C               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4093  001F08  E301               	bnc	u6341
  4094  001F0A  801D               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4095  001F0C                     u6341:
  4096  001F0C  501C               	movf	??__tdiv_to_l_,w,c
  4097  001F0E  6E24               	movwf	__tdiv_to_l_@exp1,c
  4098  001F10  5024               	movf	__tdiv_to_l_@exp1,w,c
  4099  001F12  A4D8               	btfss	status,2,c
  4100  001F14  D009               	goto	l1791
  4101  001F16  0E00               	movlw	0
  4102  001F18  6E16               	movwf	?__tdiv_to_l_,c
  4103  001F1A  0E00               	movlw	0
  4104  001F1C  6E17               	movwf	?__tdiv_to_l_+1,c
  4105  001F1E  0E00               	movlw	0
  4106  001F20  6E18               	movwf	?__tdiv_to_l_+2,c
  4107  001F22  0E00               	movlw	0
  4108  001F24  6E19               	movwf	?__tdiv_to_l_+3,c
  4109  001F26  0012               	return	
  4110  001F28                     l1791:
  4111  001F28  C01B  F01C         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  4112  001F2C  6A1D               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4113  001F2E  6A1E               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4114  001F30  341A               	rlcf	__tdiv_to_l_@f2+1,w,c
  4115  001F32  361C               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4116  001F34  E301               	bnc	u6361
  4117  001F36  801D               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4118  001F38                     u6361:
  4119  001F38  501C               	movf	??__tdiv_to_l_,w,c
  4120  001F3A  6E23               	movwf	__tdiv_to_l_@cntr,c
  4121  001F3C  5023               	movf	__tdiv_to_l_@cntr,w,c
  4122  001F3E  A4D8               	btfss	status,2,c
  4123  001F40  D009               	goto	l1793
  4124  001F42  0E00               	movlw	0
  4125  001F44  6E16               	movwf	?__tdiv_to_l_,c
  4126  001F46  0E00               	movlw	0
  4127  001F48  6E17               	movwf	?__tdiv_to_l_+1,c
  4128  001F4A  0E00               	movlw	0
  4129  001F4C  6E18               	movwf	?__tdiv_to_l_+2,c
  4130  001F4E  0E00               	movlw	0
  4131  001F50  6E19               	movwf	?__tdiv_to_l_+3,c
  4132  001F52  0012               	return	
  4133  001F54                     l1793:
  4134  001F54  8E17               	bsf	__tdiv_to_l_@f1+1,7,c
  4135  001F56  0EFF               	movlw	255
  4136  001F58  1616               	andwf	__tdiv_to_l_@f1,f,c
  4137  001F5A  0EFF               	movlw	255
  4138  001F5C  1617               	andwf	__tdiv_to_l_@f1+1,f,c
  4139  001F5E  0E00               	movlw	0
  4140  001F60  1618               	andwf	__tdiv_to_l_@f1+2,f,c
  4141  001F62  8E1A               	bsf	__tdiv_to_l_@f2+1,7,c
  4142  001F64  0EFF               	movlw	255
  4143  001F66  1619               	andwf	__tdiv_to_l_@f2,f,c
  4144  001F68  0EFF               	movlw	255
  4145  001F6A  161A               	andwf	__tdiv_to_l_@f2+1,f,c
  4146  001F6C  0E00               	movlw	0
  4147  001F6E  161B               	andwf	__tdiv_to_l_@f2+2,f,c
  4148  001F70  0E00               	movlw	0
  4149  001F72  6E1F               	movwf	__tdiv_to_l_@quot,c
  4150  001F74  0E00               	movlw	0
  4151  001F76  6E20               	movwf	__tdiv_to_l_@quot+1,c
  4152  001F78  0E00               	movlw	0
  4153  001F7A  6E21               	movwf	__tdiv_to_l_@quot+2,c
  4154  001F7C  0E00               	movlw	0
  4155  001F7E  6E22               	movwf	__tdiv_to_l_@quot+3,c
  4156  001F80  0E7F               	movlw	127
  4157  001F82  5E24               	subwf	__tdiv_to_l_@exp1,f,c
  4158  001F84  5023               	movf	__tdiv_to_l_@cntr,w,c
  4159  001F86  0F98               	addlw	152
  4160  001F88  5E24               	subwf	__tdiv_to_l_@exp1,f,c
  4161  001F8A  0E18               	movlw	24
  4162  001F8C  6E23               	movwf	__tdiv_to_l_@cntr,c
  4163  001F8E                     l1794:
  4164  001F8E  90D8               	bcf	status,0,c
  4165  001F90  361F               	rlcf	__tdiv_to_l_@quot,f,c
  4166  001F92  3620               	rlcf	__tdiv_to_l_@quot+1,f,c
  4167  001F94  3621               	rlcf	__tdiv_to_l_@quot+2,f,c
  4168  001F96  3622               	rlcf	__tdiv_to_l_@quot+3,f,c
  4169  001F98  5019               	movf	__tdiv_to_l_@f2,w,c
  4170  001F9A  5C16               	subwf	__tdiv_to_l_@f1,w,c
  4171  001F9C  501A               	movf	__tdiv_to_l_@f2+1,w,c
  4172  001F9E  5817               	subwfb	__tdiv_to_l_@f1+1,w,c
  4173  001FA0  501B               	movf	__tdiv_to_l_@f2+2,w,c
  4174  001FA2  5818               	subwfb	__tdiv_to_l_@f1+2,w,c
  4175  001FA4  A0D8               	btfss	status,0,c
  4176  001FA6  D007               	goto	l1795
  4177  001FA8  5019               	movf	__tdiv_to_l_@f2,w,c
  4178  001FAA  5E16               	subwf	__tdiv_to_l_@f1,f,c
  4179  001FAC  501A               	movf	__tdiv_to_l_@f2+1,w,c
  4180  001FAE  5A17               	subwfb	__tdiv_to_l_@f1+1,f,c
  4181  001FB0  501B               	movf	__tdiv_to_l_@f2+2,w,c
  4182  001FB2  5A18               	subwfb	__tdiv_to_l_@f1+2,f,c
  4183  001FB4  801F               	bsf	__tdiv_to_l_@quot,0,c
  4184  001FB6                     l1795:
  4185  001FB6  90D8               	bcf	status,0,c
  4186  001FB8  3616               	rlcf	__tdiv_to_l_@f1,f,c
  4187  001FBA  3617               	rlcf	__tdiv_to_l_@f1+1,f,c
  4188  001FBC  3618               	rlcf	__tdiv_to_l_@f1+2,f,c
  4189  001FBE  2E23               	decfsz	__tdiv_to_l_@cntr,f,c
  4190  001FC0  D7E6               	goto	l1794
  4191  001FC2  AE24               	btfss	__tdiv_to_l_@exp1,7,c
  4192  001FC4  D016               	goto	l1797
  4193  001FC6  5024               	movf	__tdiv_to_l_@exp1,w,c
  4194  001FC8  0A80               	xorlw	128
  4195  001FCA  0F97               	addlw	151
  4196  001FCC  B0D8               	btfsc	status,0,c
  4197  001FCE  D009               	goto	l1798
  4198  001FD0  0E00               	movlw	0
  4199  001FD2  6E16               	movwf	?__tdiv_to_l_,c
  4200  001FD4  0E00               	movlw	0
  4201  001FD6  6E17               	movwf	?__tdiv_to_l_+1,c
  4202  001FD8  0E00               	movlw	0
  4203  001FDA  6E18               	movwf	?__tdiv_to_l_+2,c
  4204  001FDC  0E00               	movlw	0
  4205  001FDE  6E19               	movwf	?__tdiv_to_l_+3,c
  4206  001FE0  0012               	return	
  4207  001FE2                     l1798:
  4208  001FE2  90D8               	bcf	status,0,c
  4209  001FE4  3222               	rrcf	__tdiv_to_l_@quot+3,f,c
  4210  001FE6  3221               	rrcf	__tdiv_to_l_@quot+2,f,c
  4211  001FE8  3220               	rrcf	__tdiv_to_l_@quot+1,f,c
  4212  001FEA  321F               	rrcf	__tdiv_to_l_@quot,f,c
  4213  001FEC  3E24               	incfsz	__tdiv_to_l_@exp1,f,c
  4214  001FEE  D7F9               	goto	l1798
  4215  001FF0  D015               	goto	u6420
  4216  001FF2                     l1797:
  4217  001FF2  0E17               	movlw	23
  4218  001FF4  6424               	cpfsgt	__tdiv_to_l_@exp1,c
  4219  001FF6  D00F               	goto	l1803
  4220  001FF8  0E00               	movlw	0
  4221  001FFA  6E16               	movwf	?__tdiv_to_l_,c
  4222  001FFC  0E00               	movlw	0
  4223  001FFE  6E17               	movwf	?__tdiv_to_l_+1,c
  4224  002000  0E00               	movlw	0
  4225  002002  6E18               	movwf	?__tdiv_to_l_+2,c
  4226  002004  0E00               	movlw	0
  4227  002006  6E19               	movwf	?__tdiv_to_l_+3,c
  4228  002008  0012               	return	
  4229  00200A  90D8               	bcf	status,0,c
  4230  00200C  361F               	rlcf	__tdiv_to_l_@quot,f,c
  4231  00200E  3620               	rlcf	__tdiv_to_l_@quot+1,f,c
  4232  002010  3621               	rlcf	__tdiv_to_l_@quot+2,f,c
  4233  002012  3622               	rlcf	__tdiv_to_l_@quot+3,f,c
  4234  002014  0624               	decf	__tdiv_to_l_@exp1,f,c
  4235  002016                     l1803:
  4236  002016  5024               	movf	__tdiv_to_l_@exp1,w,c
  4237  002018  A4D8               	btfss	status,2,c
  4238  00201A  D7F7               	goto	l1804
  4239  00201C                     u6420:
  4240  00201C  C01F  F016         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  4241  002020  C020  F017         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  4242  002024  C021  F018         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  4243  002028  C022  F019         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  4244  00202C  0012               	return		;funcret
  4245  00202E                     __end_of__tdiv_to_l_:
  4246                           	opt stack 0
  4247                           tblptru	equ	0xFF8
  4248                           tblptrh	equ	0xFF7
  4249                           tblptrl	equ	0xFF6
  4250                           tablat	equ	0xFF5
  4251                           prodh	equ	0xFF4
  4252                           prodl	equ	0xFF3
  4253                           postinc0	equ	0xFEE
  4254                           wreg	equ	0xFE8
  4255                           indf1	equ	0xFE7
  4256                           fsr1h	equ	0xFE2
  4257                           fsr1l	equ	0xFE1
  4258                           indf2	equ	0xFDF
  4259                           postinc2	equ	0xFDE
  4260                           postdec2	equ	0xFDD
  4261                           fsr2h	equ	0xFDA
  4262                           fsr2l	equ	0xFD9
  4263                           status	equ	0xFD8
  4264                           
  4265 ;; *************** function __div_to_l_ *****************
  4266 ;; Defined at:
  4267 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\fldivl.c"
  4268 ;; Parameters:    Size  Location     Type
  4269 ;;  f1              3   21[COMRAM] unsigned long 
  4270 ;;  f2              3   24[COMRAM] unsigned long 
  4271 ;; Auto vars:     Size  Location     Type
  4272 ;;  quot            4   27[COMRAM] unsigned long 
  4273 ;;  exp1            1   32[COMRAM] unsigned char 
  4274 ;;  cntr            1   31[COMRAM] unsigned char 
  4275 ;; Return value:  Size  Location     Type
  4276 ;;                  4   21[COMRAM] unsigned long 
  4277 ;; Registers used:
  4278 ;;		wreg, status,2, status,0
  4279 ;; Tracked objects:
  4280 ;;		On entry : 0/0
  4281 ;;		On exit  : 0/0
  4282 ;;		Unchanged: 0/0
  4283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4284 ;;      Params:         6       0       0       0       0       0       0       0       0
  4285 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4286 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4287 ;;      Totals:        12       0       0       0       0       0       0       0       0
  4288 ;;Total ram usage:       12 bytes
  4289 ;; Hardware stack levels used:    1
  4290 ;; Hardware stack levels required when called:    3
  4291 ;; This function calls:
  4292 ;;		Nothing
  4293 ;; This function is called by:
  4294 ;;		_sprintf
  4295 ;; This function uses a non-reentrant model
  4296 ;;
  4297                           
  4298                           	psect	text10
  4299  00202E                     __ptext10:
  4300                           	opt stack 0
  4301  00202E                     __div_to_l_:
  4302                           	opt stack 26
  4303                           
  4304                           ;incstack = 0
  4305  00202E  3418               	rlcf	__div_to_l_@f1+2,w,c
  4306  002030  3419               	rlcf	__div_to_l_@f1+3,w,c
  4307  002032  6E21               	movwf	__div_to_l_@exp1,c
  4308  002034  5021               	movf	__div_to_l_@exp1,w,c
  4309  002036  A4D8               	btfss	status,2,c
  4310  002038  D009               	goto	l1687
  4311  00203A  0E00               	movlw	0
  4312  00203C  6E16               	movwf	?__div_to_l_,c
  4313  00203E  0E00               	movlw	0
  4314  002040  6E17               	movwf	?__div_to_l_+1,c
  4315  002042  0E00               	movlw	0
  4316  002044  6E18               	movwf	?__div_to_l_+2,c
  4317  002046  0E00               	movlw	0
  4318  002048  6E19               	movwf	?__div_to_l_+3,c
  4319  00204A  0012               	return	
  4320  00204C                     l1687:
  4321  00204C  341B               	rlcf	__div_to_l_@f2+2,w,c
  4322  00204E  341C               	rlcf	__div_to_l_@f2+3,w,c
  4323  002050  6E20               	movwf	__div_to_l_@cntr,c
  4324  002052  5020               	movf	__div_to_l_@cntr,w,c
  4325  002054  A4D8               	btfss	status,2,c
  4326  002056  D009               	goto	l1689
  4327  002058  0E00               	movlw	0
  4328  00205A  6E16               	movwf	?__div_to_l_,c
  4329  00205C  0E00               	movlw	0
  4330  00205E  6E17               	movwf	?__div_to_l_+1,c
  4331  002060  0E00               	movlw	0
  4332  002062  6E18               	movwf	?__div_to_l_+2,c
  4333  002064  0E00               	movlw	0
  4334  002066  6E19               	movwf	?__div_to_l_+3,c
  4335  002068  0012               	return	
  4336  00206A                     l1689:
  4337  00206A  8E18               	bsf	__div_to_l_@f1+2,7,c
  4338  00206C  0EFF               	movlw	255
  4339  00206E  1616               	andwf	__div_to_l_@f1,f,c
  4340  002070  0EFF               	movlw	255
  4341  002072  1617               	andwf	__div_to_l_@f1+1,f,c
  4342  002074  0EFF               	movlw	255
  4343  002076  1618               	andwf	__div_to_l_@f1+2,f,c
  4344  002078  0E00               	movlw	0
  4345  00207A  1619               	andwf	__div_to_l_@f1+3,f,c
  4346  00207C  8E1B               	bsf	__div_to_l_@f2+2,7,c
  4347  00207E  0EFF               	movlw	255
  4348  002080  1619               	andwf	__div_to_l_@f2,f,c
  4349  002082  0EFF               	movlw	255
  4350  002084  161A               	andwf	__div_to_l_@f2+1,f,c
  4351  002086  0EFF               	movlw	255
  4352  002088  161B               	andwf	__div_to_l_@f2+2,f,c
  4353  00208A  0E00               	movlw	0
  4354  00208C  161C               	andwf	__div_to_l_@f2+3,f,c
  4355  00208E  0E00               	movlw	0
  4356  002090  6E1C               	movwf	__div_to_l_@quot,c
  4357  002092  0E00               	movlw	0
  4358  002094  6E1D               	movwf	__div_to_l_@quot+1,c
  4359  002096  0E00               	movlw	0
  4360  002098  6E1E               	movwf	__div_to_l_@quot+2,c
  4361  00209A  0E00               	movlw	0
  4362  00209C  6E1F               	movwf	__div_to_l_@quot+3,c
  4363  00209E  0E7F               	movlw	127
  4364  0020A0  5E21               	subwf	__div_to_l_@exp1,f,c
  4365  0020A2  5020               	movf	__div_to_l_@cntr,w,c
  4366  0020A4  0FA0               	addlw	160
  4367  0020A6  5E21               	subwf	__div_to_l_@exp1,f,c
  4368  0020A8  0E20               	movlw	32
  4369  0020AA  6E20               	movwf	__div_to_l_@cntr,c
  4370  0020AC  90D8               	bcf	status,0,c
  4371  0020AE  361C               	rlcf	__div_to_l_@quot,f,c
  4372  0020B0  361D               	rlcf	__div_to_l_@quot+1,f,c
  4373  0020B2  361E               	rlcf	__div_to_l_@quot+2,f,c
  4374  0020B4  361F               	rlcf	__div_to_l_@quot+3,f,c
  4375  0020B6  5019               	movf	__div_to_l_@f2,w,c
  4376  0020B8  5C16               	subwf	__div_to_l_@f1,w,c
  4377  0020BA  501A               	movf	__div_to_l_@f2+1,w,c
  4378  0020BC  5817               	subwfb	__div_to_l_@f1+1,w,c
  4379  0020BE  501B               	movf	__div_to_l_@f2+2,w,c
  4380  0020C0  5818               	subwfb	__div_to_l_@f1+2,w,c
  4381  0020C2  501C               	movf	__div_to_l_@f2+3,w,c
  4382  0020C4  5819               	subwfb	__div_to_l_@f1+3,w,c
  4383  0020C6  A0D8               	btfss	status,0,c
  4384  0020C8  D009               	goto	l1691
  4385  0020CA  5019               	movf	__div_to_l_@f2,w,c
  4386  0020CC  5E16               	subwf	__div_to_l_@f1,f,c
  4387  0020CE  501A               	movf	__div_to_l_@f2+1,w,c
  4388  0020D0  5A17               	subwfb	__div_to_l_@f1+1,f,c
  4389  0020D2  501B               	movf	__div_to_l_@f2+2,w,c
  4390  0020D4  5A18               	subwfb	__div_to_l_@f1+2,f,c
  4391  0020D6  501C               	movf	__div_to_l_@f2+3,w,c
  4392  0020D8  5A19               	subwfb	__div_to_l_@f1+3,f,c
  4393  0020DA  801C               	bsf	__div_to_l_@quot,0,c
  4394  0020DC                     l1691:
  4395  0020DC  90D8               	bcf	status,0,c
  4396  0020DE  3616               	rlcf	__div_to_l_@f1,f,c
  4397  0020E0  3617               	rlcf	__div_to_l_@f1+1,f,c
  4398  0020E2  3618               	rlcf	__div_to_l_@f1+2,f,c
  4399  0020E4  3619               	rlcf	__div_to_l_@f1+3,f,c
  4400  0020E6  2E20               	decfsz	__div_to_l_@cntr,f,c
  4401  0020E8  D7E1               	goto	l1690
  4402  0020EA  AE21               	btfss	__div_to_l_@exp1,7,c
  4403  0020EC  D016               	goto	l1693
  4404  0020EE  5021               	movf	__div_to_l_@exp1,w,c
  4405  0020F0  0A80               	xorlw	128
  4406  0020F2  0F9F               	addlw	159
  4407  0020F4  B0D8               	btfsc	status,0,c
  4408  0020F6  D009               	goto	l1694
  4409  0020F8  0E00               	movlw	0
  4410  0020FA  6E16               	movwf	?__div_to_l_,c
  4411  0020FC  0E00               	movlw	0
  4412  0020FE  6E17               	movwf	?__div_to_l_+1,c
  4413  002100  0E00               	movlw	0
  4414  002102  6E18               	movwf	?__div_to_l_+2,c
  4415  002104  0E00               	movlw	0
  4416  002106  6E19               	movwf	?__div_to_l_+3,c
  4417  002108  0012               	return	
  4418  00210A                     l1694:
  4419  00210A  90D8               	bcf	status,0,c
  4420  00210C  321F               	rrcf	__div_to_l_@quot+3,f,c
  4421  00210E  321E               	rrcf	__div_to_l_@quot+2,f,c
  4422  002110  321D               	rrcf	__div_to_l_@quot+1,f,c
  4423  002112  321C               	rrcf	__div_to_l_@quot,f,c
  4424  002114  3E21               	incfsz	__div_to_l_@exp1,f,c
  4425  002116  D7F9               	goto	l1694
  4426  002118  D015               	goto	u6490
  4427  00211A                     l1693:
  4428  00211A  0E1F               	movlw	31
  4429  00211C  6421               	cpfsgt	__div_to_l_@exp1,c
  4430  00211E  D00F               	goto	l1699
  4431  002120  0E00               	movlw	0
  4432  002122  6E16               	movwf	?__div_to_l_,c
  4433  002124  0E00               	movlw	0
  4434  002126  6E17               	movwf	?__div_to_l_+1,c
  4435  002128  0E00               	movlw	0
  4436  00212A  6E18               	movwf	?__div_to_l_+2,c
  4437  00212C  0E00               	movlw	0
  4438  00212E  6E19               	movwf	?__div_to_l_+3,c
  4439  002130  0012               	return	
  4440  002132  90D8               	bcf	status,0,c
  4441  002134  361C               	rlcf	__div_to_l_@quot,f,c
  4442  002136  361D               	rlcf	__div_to_l_@quot+1,f,c
  4443  002138  361E               	rlcf	__div_to_l_@quot+2,f,c
  4444  00213A  361F               	rlcf	__div_to_l_@quot+3,f,c
  4445  00213C  0621               	decf	__div_to_l_@exp1,f,c
  4446  00213E                     l1699:
  4447  00213E  5021               	movf	__div_to_l_@exp1,w,c
  4448  002140  A4D8               	btfss	status,2,c
  4449  002142  D7F7               	goto	l1700
  4450  002144                     u6490:
  4451  002144  C01C  F016         	movff	__div_to_l_@quot,?__div_to_l_
  4452  002148  C01D  F017         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  4453  00214C  C01E  F018         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  4454  002150  C01F  F019         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  4455  002154  0012               	return		;funcret
  4456  002156                     __end_of__div_to_l_:
  4457                           	opt stack 0
  4458                           tblptru	equ	0xFF8
  4459                           tblptrh	equ	0xFF7
  4460                           tblptrl	equ	0xFF6
  4461                           tablat	equ	0xFF5
  4462                           prodh	equ	0xFF4
  4463                           prodl	equ	0xFF3
  4464                           postinc0	equ	0xFEE
  4465                           wreg	equ	0xFE8
  4466                           indf1	equ	0xFE7
  4467                           fsr1h	equ	0xFE2
  4468                           fsr1l	equ	0xFE1
  4469                           indf2	equ	0xFDF
  4470                           postinc2	equ	0xFDE
  4471                           postdec2	equ	0xFDD
  4472                           fsr2h	equ	0xFDA
  4473                           fsr2l	equ	0xFD9
  4474                           status	equ	0xFD8
  4475                           
  4476 ;; *************** function ___lltoft *****************
  4477 ;; Defined at:
  4478 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lltoft.c"
  4479 ;; Parameters:    Size  Location     Type
  4480 ;;  c               4   29[COMRAM] unsigned long 
  4481 ;; Auto vars:     Size  Location     Type
  4482 ;;  exp             1   37[COMRAM] unsigned char 
  4483 ;; Return value:  Size  Location     Type
  4484 ;;                  3   29[COMRAM] float 
  4485 ;; Registers used:
  4486 ;;		wreg, status,2, status,0, cstack
  4487 ;; Tracked objects:
  4488 ;;		On entry : 0/0
  4489 ;;		On exit  : 0/0
  4490 ;;		Unchanged: 0/0
  4491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4492 ;;      Params:         4       0       0       0       0       0       0       0       0
  4493 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4494 ;;      Temps:          4       0       0       0       0       0       0       0       0
  4495 ;;      Totals:         9       0       0       0       0       0       0       0       0
  4496 ;;Total ram usage:        9 bytes
  4497 ;; Hardware stack levels used:    1
  4498 ;; Hardware stack levels required when called:    4
  4499 ;; This function calls:
  4500 ;;		___ftpack
  4501 ;; This function is called by:
  4502 ;;		_sprintf
  4503 ;; This function uses a non-reentrant model
  4504 ;;
  4505                           
  4506                           	psect	text11
  4507  002740                     __ptext11:
  4508                           	opt stack 0
  4509  002740                     ___lltoft:
  4510                           	opt stack 25
  4511                           
  4512                           ;incstack = 0
  4513  002740  0E8E               	movlw	142
  4514  002742  6E26               	movwf	___lltoft@exp,c
  4515  002744  D006               	goto	l1898
  4516  002746  90D8               	bcf	status,0,c
  4517  002748  3221               	rrcf	___lltoft@c+3,f,c
  4518  00274A  3220               	rrcf	___lltoft@c+2,f,c
  4519  00274C  321F               	rrcf	___lltoft@c+1,f,c
  4520  00274E  321E               	rrcf	___lltoft@c,f,c
  4521  002750  2A26               	incf	___lltoft@exp,f,c
  4522  002752                     l1898:
  4523  002752  0E00               	movlw	0
  4524  002754  141E               	andwf	___lltoft@c,w,c
  4525  002756  6E22               	movwf	??___lltoft& (0+255),c
  4526  002758  0E00               	movlw	0
  4527  00275A  141F               	andwf	___lltoft@c+1,w,c
  4528  00275C  6E23               	movwf	(??___lltoft+1)& (0+255),c
  4529  00275E  0E00               	movlw	0
  4530  002760  1420               	andwf	___lltoft@c+2,w,c
  4531  002762  6E24               	movwf	(??___lltoft+2)& (0+255),c
  4532  002764  0EFF               	movlw	255
  4533  002766  1421               	andwf	___lltoft@c+3,w,c
  4534  002768  6E25               	movwf	(??___lltoft+3)& (0+255),c
  4535  00276A  5022               	movf	??___lltoft,w,c
  4536  00276C  1023               	iorwf	??___lltoft+1,w,c
  4537  00276E  1024               	iorwf	??___lltoft+2,w,c
  4538  002770  1025               	iorwf	??___lltoft+3,w,c
  4539  002772  A4D8               	btfss	status,2,c
  4540  002774  D7E8               	goto	l1899
  4541  002776  C01E  F016         	movff	___lltoft@c,___ftpack@arg
  4542  00277A  C01F  F017         	movff	___lltoft@c+1,___ftpack@arg+1
  4543  00277E  C020  F018         	movff	___lltoft@c+2,___ftpack@arg+2
  4544  002782  C026  F019         	movff	___lltoft@exp,___ftpack@exp
  4545  002786  0E00               	movlw	0
  4546  002788  6E1A               	movwf	___ftpack@sign,c
  4547  00278A  ECC1  F011         	call	___ftpack	;wreg free
  4548  00278E  C016  F01E         	movff	?___ftpack,?___lltoft
  4549  002792  C017  F01F         	movff	?___ftpack+1,?___lltoft+1
  4550  002796  C018  F020         	movff	?___ftpack+2,?___lltoft+2
  4551  00279A  0012               	return	
  4552  00279C                     __end_of___lltoft:
  4553                           	opt stack 0
  4554                           tblptru	equ	0xFF8
  4555                           tblptrh	equ	0xFF7
  4556                           tblptrl	equ	0xFF6
  4557                           tablat	equ	0xFF5
  4558                           prodh	equ	0xFF4
  4559                           prodl	equ	0xFF3
  4560                           postinc0	equ	0xFEE
  4561                           wreg	equ	0xFE8
  4562                           indf1	equ	0xFE7
  4563                           fsr1h	equ	0xFE2
  4564                           fsr1l	equ	0xFE1
  4565                           indf2	equ	0xFDF
  4566                           postinc2	equ	0xFDE
  4567                           postdec2	equ	0xFDD
  4568                           fsr2h	equ	0xFDA
  4569                           fsr2l	equ	0xFD9
  4570                           status	equ	0xFD8
  4571                           
  4572 ;; *************** function ___llmod *****************
  4573 ;; Defined at:
  4574 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\llmod.c"
  4575 ;; Parameters:    Size  Location     Type
  4576 ;;  dividend        4   21[COMRAM] unsigned long 
  4577 ;;  divisor         4   25[COMRAM] unsigned long 
  4578 ;; Auto vars:     Size  Location     Type
  4579 ;;  counter         1   29[COMRAM] unsigned char 
  4580 ;; Return value:  Size  Location     Type
  4581 ;;                  4   21[COMRAM] unsigned long 
  4582 ;; Registers used:
  4583 ;;		wreg, status,2, status,0
  4584 ;; Tracked objects:
  4585 ;;		On entry : 0/0
  4586 ;;		On exit  : 0/0
  4587 ;;		Unchanged: 0/0
  4588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4589 ;;      Params:         8       0       0       0       0       0       0       0       0
  4590 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4591 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4592 ;;      Totals:         9       0       0       0       0       0       0       0       0
  4593 ;;Total ram usage:        9 bytes
  4594 ;; Hardware stack levels used:    1
  4595 ;; Hardware stack levels required when called:    3
  4596 ;; This function calls:
  4597 ;;		Nothing
  4598 ;; This function is called by:
  4599 ;;		_sprintf
  4600 ;; This function uses a non-reentrant model
  4601 ;;
  4602                           
  4603                           	psect	text12
  4604  0026DA                     __ptext12:
  4605                           	opt stack 0
  4606  0026DA                     ___llmod:
  4607                           	opt stack 26
  4608                           
  4609                           ;incstack = 0
  4610  0026DA  501A               	movf	___llmod@divisor,w,c
  4611  0026DC  101B               	iorwf	___llmod@divisor+1,w,c
  4612  0026DE  101C               	iorwf	___llmod@divisor+2,w,c
  4613  0026E0  101D               	iorwf	___llmod@divisor+3,w,c
  4614  0026E2  B4D8               	btfsc	status,2,c
  4615  0026E4  D024               	goto	l1892
  4616  0026E6  0E01               	movlw	1
  4617  0026E8  6E1E               	movwf	___llmod@counter,c
  4618  0026EA  D006               	goto	l1887
  4619  0026EC  90D8               	bcf	status,0,c
  4620  0026EE  361A               	rlcf	___llmod@divisor,f,c
  4621  0026F0  361B               	rlcf	___llmod@divisor+1,f,c
  4622  0026F2  361C               	rlcf	___llmod@divisor+2,f,c
  4623  0026F4  361D               	rlcf	___llmod@divisor+3,f,c
  4624  0026F6  2A1E               	incf	___llmod@counter,f,c
  4625  0026F8                     l1887:
  4626  0026F8  AE1D               	btfss	___llmod@divisor+3,7,c
  4627  0026FA  D7F8               	goto	l1888
  4628  0026FC                     u6670:
  4629  0026FC  501A               	movf	___llmod@divisor,w,c
  4630  0026FE  5C16               	subwf	___llmod@dividend,w,c
  4631  002700  501B               	movf	___llmod@divisor+1,w,c
  4632  002702  5817               	subwfb	___llmod@dividend+1,w,c
  4633  002704  501C               	movf	___llmod@divisor+2,w,c
  4634  002706  5818               	subwfb	___llmod@dividend+2,w,c
  4635  002708  501D               	movf	___llmod@divisor+3,w,c
  4636  00270A  5819               	subwfb	___llmod@dividend+3,w,c
  4637  00270C  A0D8               	btfss	status,0,c
  4638  00270E  D008               	goto	l1891
  4639  002710  501A               	movf	___llmod@divisor,w,c
  4640  002712  5E16               	subwf	___llmod@dividend,f,c
  4641  002714  501B               	movf	___llmod@divisor+1,w,c
  4642  002716  5A17               	subwfb	___llmod@dividend+1,f,c
  4643  002718  501C               	movf	___llmod@divisor+2,w,c
  4644  00271A  5A18               	subwfb	___llmod@dividend+2,f,c
  4645  00271C  501D               	movf	___llmod@divisor+3,w,c
  4646  00271E  5A19               	subwfb	___llmod@dividend+3,f,c
  4647  002720                     l1891:
  4648  002720  90D8               	bcf	status,0,c
  4649  002722  321D               	rrcf	___llmod@divisor+3,f,c
  4650  002724  321C               	rrcf	___llmod@divisor+2,f,c
  4651  002726  321B               	rrcf	___llmod@divisor+1,f,c
  4652  002728  321A               	rrcf	___llmod@divisor,f,c
  4653  00272A  2E1E               	decfsz	___llmod@counter,f,c
  4654  00272C  D7E7               	goto	u6670
  4655  00272E                     l1892:
  4656  00272E  C016  F016         	movff	___llmod@dividend,?___llmod
  4657  002732  C017  F017         	movff	___llmod@dividend+1,?___llmod+1
  4658  002736  C018  F018         	movff	___llmod@dividend+2,?___llmod+2
  4659  00273A  C019  F019         	movff	___llmod@dividend+3,?___llmod+3
  4660  00273E  0012               	return		;funcret
  4661  002740                     __end_of___llmod:
  4662                           	opt stack 0
  4663                           tblptru	equ	0xFF8
  4664                           tblptrh	equ	0xFF7
  4665                           tblptrl	equ	0xFF6
  4666                           tablat	equ	0xFF5
  4667                           prodh	equ	0xFF4
  4668                           prodl	equ	0xFF3
  4669                           postinc0	equ	0xFEE
  4670                           wreg	equ	0xFE8
  4671                           indf1	equ	0xFE7
  4672                           fsr1h	equ	0xFE2
  4673                           fsr1l	equ	0xFE1
  4674                           indf2	equ	0xFDF
  4675                           postinc2	equ	0xFDE
  4676                           postdec2	equ	0xFDD
  4677                           fsr2h	equ	0xFDA
  4678                           fsr2l	equ	0xFD9
  4679                           status	equ	0xFD8
  4680                           
  4681 ;; *************** function ___lldiv *****************
  4682 ;; Defined at:
  4683 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lldiv.c"
  4684 ;; Parameters:    Size  Location     Type
  4685 ;;  dividend        4   21[COMRAM] unsigned long 
  4686 ;;  divisor         4   25[COMRAM] unsigned long 
  4687 ;; Auto vars:     Size  Location     Type
  4688 ;;  quotient        4   29[COMRAM] unsigned long 
  4689 ;;  counter         1   33[COMRAM] unsigned char 
  4690 ;; Return value:  Size  Location     Type
  4691 ;;                  4   21[COMRAM] unsigned long 
  4692 ;; Registers used:
  4693 ;;		wreg, status,2, status,0
  4694 ;; Tracked objects:
  4695 ;;		On entry : 0/0
  4696 ;;		On exit  : 0/0
  4697 ;;		Unchanged: 0/0
  4698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4699 ;;      Params:         8       0       0       0       0       0       0       0       0
  4700 ;;      Locals:         5       0       0       0       0       0       0       0       0
  4701 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4702 ;;      Totals:        13       0       0       0       0       0       0       0       0
  4703 ;;Total ram usage:       13 bytes
  4704 ;; Hardware stack levels used:    1
  4705 ;; Hardware stack levels required when called:    3
  4706 ;; This function calls:
  4707 ;;		Nothing
  4708 ;; This function is called by:
  4709 ;;		_sprintf
  4710 ;; This function uses a non-reentrant model
  4711 ;;
  4712                           
  4713                           	psect	text13
  4714  0025E8                     __ptext13:
  4715                           	opt stack 0
  4716  0025E8                     ___lldiv:
  4717                           	opt stack 26
  4718                           
  4719                           ;incstack = 0
  4720  0025E8  0E00               	movlw	0
  4721  0025EA  6E1E               	movwf	___lldiv@quotient,c
  4722  0025EC  0E00               	movlw	0
  4723  0025EE  6E1F               	movwf	___lldiv@quotient+1,c
  4724  0025F0  0E00               	movlw	0
  4725  0025F2  6E20               	movwf	___lldiv@quotient+2,c
  4726  0025F4  0E00               	movlw	0
  4727  0025F6  6E21               	movwf	___lldiv@quotient+3,c
  4728  0025F8  501A               	movf	___lldiv@divisor,w,c
  4729  0025FA  101B               	iorwf	___lldiv@divisor+1,w,c
  4730  0025FC  101C               	iorwf	___lldiv@divisor+2,w,c
  4731  0025FE  101D               	iorwf	___lldiv@divisor+3,w,c
  4732  002600  B4D8               	btfsc	status,2,c
  4733  002602  D02A               	goto	l1882
  4734  002604  0E01               	movlw	1
  4735  002606  6E22               	movwf	___lldiv@counter,c
  4736  002608  D006               	goto	l1877
  4737  00260A  90D8               	bcf	status,0,c
  4738  00260C  361A               	rlcf	___lldiv@divisor,f,c
  4739  00260E  361B               	rlcf	___lldiv@divisor+1,f,c
  4740  002610  361C               	rlcf	___lldiv@divisor+2,f,c
  4741  002612  361D               	rlcf	___lldiv@divisor+3,f,c
  4742  002614  2A22               	incf	___lldiv@counter,f,c
  4743  002616                     l1877:
  4744  002616  AE1D               	btfss	___lldiv@divisor+3,7,c
  4745  002618  D7F8               	goto	l1878
  4746  00261A                     u6640:
  4747  00261A  90D8               	bcf	status,0,c
  4748  00261C  361E               	rlcf	___lldiv@quotient,f,c
  4749  00261E  361F               	rlcf	___lldiv@quotient+1,f,c
  4750  002620  3620               	rlcf	___lldiv@quotient+2,f,c
  4751  002622  3621               	rlcf	___lldiv@quotient+3,f,c
  4752  002624  501A               	movf	___lldiv@divisor,w,c
  4753  002626  5C16               	subwf	___lldiv@dividend,w,c
  4754  002628  501B               	movf	___lldiv@divisor+1,w,c
  4755  00262A  5817               	subwfb	___lldiv@dividend+1,w,c
  4756  00262C  501C               	movf	___lldiv@divisor+2,w,c
  4757  00262E  5818               	subwfb	___lldiv@dividend+2,w,c
  4758  002630  501D               	movf	___lldiv@divisor+3,w,c
  4759  002632  5819               	subwfb	___lldiv@dividend+3,w,c
  4760  002634  A0D8               	btfss	status,0,c
  4761  002636  D009               	goto	l1881
  4762  002638  501A               	movf	___lldiv@divisor,w,c
  4763  00263A  5E16               	subwf	___lldiv@dividend,f,c
  4764  00263C  501B               	movf	___lldiv@divisor+1,w,c
  4765  00263E  5A17               	subwfb	___lldiv@dividend+1,f,c
  4766  002640  501C               	movf	___lldiv@divisor+2,w,c
  4767  002642  5A18               	subwfb	___lldiv@dividend+2,f,c
  4768  002644  501D               	movf	___lldiv@divisor+3,w,c
  4769  002646  5A19               	subwfb	___lldiv@dividend+3,f,c
  4770  002648  801E               	bsf	___lldiv@quotient,0,c
  4771  00264A                     l1881:
  4772  00264A  90D8               	bcf	status,0,c
  4773  00264C  321D               	rrcf	___lldiv@divisor+3,f,c
  4774  00264E  321C               	rrcf	___lldiv@divisor+2,f,c
  4775  002650  321B               	rrcf	___lldiv@divisor+1,f,c
  4776  002652  321A               	rrcf	___lldiv@divisor,f,c
  4777  002654  2E22               	decfsz	___lldiv@counter,f,c
  4778  002656  D7E1               	goto	u6640
  4779  002658                     l1882:
  4780  002658  C01E  F016         	movff	___lldiv@quotient,?___lldiv
  4781  00265C  C01F  F017         	movff	___lldiv@quotient+1,?___lldiv+1
  4782  002660  C020  F018         	movff	___lldiv@quotient+2,?___lldiv+2
  4783  002664  C021  F019         	movff	___lldiv@quotient+3,?___lldiv+3
  4784  002668  0012               	return		;funcret
  4785  00266A                     __end_of___lldiv:
  4786                           	opt stack 0
  4787                           tblptru	equ	0xFF8
  4788                           tblptrh	equ	0xFF7
  4789                           tblptrl	equ	0xFF6
  4790                           tablat	equ	0xFF5
  4791                           prodh	equ	0xFF4
  4792                           prodl	equ	0xFF3
  4793                           postinc0	equ	0xFEE
  4794                           wreg	equ	0xFE8
  4795                           indf1	equ	0xFE7
  4796                           fsr1h	equ	0xFE2
  4797                           fsr1l	equ	0xFE1
  4798                           indf2	equ	0xFDF
  4799                           postinc2	equ	0xFDE
  4800                           postdec2	equ	0xFDD
  4801                           fsr2h	equ	0xFDA
  4802                           fsr2l	equ	0xFD9
  4803                           status	equ	0xFD8
  4804                           
  4805 ;; *************** function ___fttol *****************
  4806 ;; Defined at:
  4807 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\fttol.c"
  4808 ;; Parameters:    Size  Location     Type
  4809 ;;  f1              3   13[BANK0 ] float 
  4810 ;; Auto vars:     Size  Location     Type
  4811 ;;  lval            4   23[BANK0 ] unsigned long 
  4812 ;;  exp1            1   27[BANK0 ] unsigned char 
  4813 ;;  sign1           1   22[BANK0 ] unsigned char 
  4814 ;; Return value:  Size  Location     Type
  4815 ;;                  4   13[BANK0 ] long 
  4816 ;; Registers used:
  4817 ;;		wreg, status,2, status,0
  4818 ;; Tracked objects:
  4819 ;;		On entry : 0/0
  4820 ;;		On exit  : 0/0
  4821 ;;		Unchanged: 0/0
  4822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4823 ;;      Params:         0       4       0       0       0       0       0       0       0
  4824 ;;      Locals:         0       6       0       0       0       0       0       0       0
  4825 ;;      Temps:          0       5       0       0       0       0       0       0       0
  4826 ;;      Totals:         0      15       0       0       0       0       0       0       0
  4827 ;;Total ram usage:       15 bytes
  4828 ;; Hardware stack levels used:    1
  4829 ;; Hardware stack levels required when called:    3
  4830 ;; This function calls:
  4831 ;;		Nothing
  4832 ;; This function is called by:
  4833 ;;		_sprintf
  4834 ;; This function uses a non-reentrant model
  4835 ;;
  4836                           
  4837                           	psect	text14
  4838  001DB8                     __ptext14:
  4839                           	opt stack 0
  4840  001DB8                     ___fttol:
  4841                           	opt stack 26
  4842                           
  4843                           ;incstack = 0
  4844  001DB8  C06F  F071         	movff	___fttol@f1+2,??___fttol
  4845  001DBC  0100               	movlb	0	; () banked
  4846  001DBE  6B72               	clrf	(??___fttol+1)& (0+255),b
  4847  001DC0  6B73               	clrf	(??___fttol+2)& (0+255),b
  4848  001DC2  0100               	movlb	0	; () banked
  4849  001DC4  356E               	rlcf	(___fttol@f1+1)& (0+255),w,b
  4850  001DC6  0100               	movlb	0	; () banked
  4851  001DC8  3771               	rlcf	??___fttol& (0+255),f,b
  4852  001DCA  E301               	bnc	u6551
  4853  001DCC  8172               	bsf	(??___fttol+1)& (0+255),0,b
  4854  001DCE                     u6551:
  4855  001DCE  0100               	movlb	0	; () banked
  4856  001DD0  5171               	movf	??___fttol& (0+255),w,b
  4857  001DD2  0100               	movlb	0	; () banked
  4858  001DD4  6F7B               	movwf	___fttol@exp1& (0+255),b
  4859  001DD6  0100               	movlb	0	; () banked
  4860  001DD8  517B               	movf	___fttol@exp1& (0+255),w,b
  4861  001DDA  A4D8               	btfss	status,2,c
  4862  001DDC  D00A               	goto	l1836
  4863                           
  4864                           ; BSR set to: 0
  4865  001DDE  0E00               	movlw	0
  4866  001DE0  0100               	movlb	0	; () banked
  4867  001DE2  6F6D               	movwf	?___fttol& (0+255),b
  4868  001DE4  0E00               	movlw	0
  4869  001DE6  6F6E               	movwf	(?___fttol+1)& (0+255),b
  4870  001DE8  0E00               	movlw	0
  4871  001DEA  6F6F               	movwf	(?___fttol+2)& (0+255),b
  4872  001DEC  0E00               	movlw	0
  4873  001DEE  6F70               	movwf	(?___fttol+3)& (0+255),b
  4874                           
  4875                           ; BSR set to: 0
  4876  001DF0  0012               	return	
  4877  001DF2                     l1836:
  4878                           
  4879                           ; BSR set to: 0
  4880                           
  4881                           ; BSR set to: 0
  4882  001DF2  0E17               	movlw	23
  4883  001DF4  0100               	movlb	0	; () banked
  4884  001DF6  6F71               	movwf	??___fttol& (0+255),b
  4885  001DF8  C06D  F072         	movff	___fttol@f1,??___fttol+1
  4886  001DFC  C06E  F073         	movff	___fttol@f1+1,??___fttol+2
  4887  001E00  C06F  F074         	movff	___fttol@f1+2,??___fttol+3
  4888  001E04  0100               	movlb	0	; () banked
  4889  001E06  2971               	incf	??___fttol& (0+255),w,b
  4890  001E08  0100               	movlb	0	; () banked
  4891  001E0A  6F75               	movwf	(??___fttol+4)& (0+255),b
  4892  001E0C  D005               	goto	u6570
  4893  001E0E                     u6575:
  4894  001E0E  0100               	movlb	0	; () banked
  4895  001E10  90D8               	bcf	status,0,c
  4896  001E12  3374               	rrcf	(??___fttol+3)& (0+255),f,b
  4897  001E14  3373               	rrcf	(??___fttol+2)& (0+255),f,b
  4898  001E16  3372               	rrcf	(??___fttol+1)& (0+255),f,b
  4899  001E18                     u6570:
  4900  001E18  0100               	movlb	0	; () banked
  4901  001E1A  2F75               	decfsz	(??___fttol+4)& (0+255),f,b
  4902  001E1C  D7F8               	goto	u6575
  4903  001E1E  0100               	movlb	0	; () banked
  4904  001E20  5172               	movf	(??___fttol+1)& (0+255),w,b
  4905  001E22  0100               	movlb	0	; () banked
  4906  001E24  6F76               	movwf	___fttol@sign1& (0+255),b
  4907                           
  4908                           ; BSR set to: 0
  4909  001E26  0100               	movlb	0	; () banked
  4910  001E28  8F6E               	bsf	(___fttol@f1+1)& (0+255),7,b
  4911                           
  4912                           ; BSR set to: 0
  4913  001E2A  0EFF               	movlw	255
  4914  001E2C  0100               	movlb	0	; () banked
  4915  001E2E  176D               	andwf	___fttol@f1& (0+255),f,b
  4916  001E30  0EFF               	movlw	255
  4917  001E32  0100               	movlb	0	; () banked
  4918  001E34  176E               	andwf	(___fttol@f1+1)& (0+255),f,b
  4919  001E36  0E00               	movlw	0
  4920  001E38  0100               	movlb	0	; () banked
  4921  001E3A  176F               	andwf	(___fttol@f1+2)& (0+255),f,b
  4922                           
  4923                           ; BSR set to: 0
  4924  001E3C  0100               	movlb	0	; () banked
  4925  001E3E  516D               	movf	___fttol@f1& (0+255),w,b
  4926  001E40  0100               	movlb	0	; () banked
  4927  001E42  6F77               	movwf	___fttol@lval& (0+255),b
  4928  001E44  0100               	movlb	0	; () banked
  4929  001E46  516E               	movf	(___fttol@f1+1)& (0+255),w,b
  4930  001E48  0100               	movlb	0	; () banked
  4931  001E4A  6F78               	movwf	(___fttol@lval+1)& (0+255),b
  4932  001E4C  0100               	movlb	0	; () banked
  4933  001E4E  516F               	movf	(___fttol@f1+2)& (0+255),w,b
  4934  001E50  0100               	movlb	0	; () banked
  4935  001E52  6F79               	movwf	(___fttol@lval+2)& (0+255),b
  4936  001E54  0100               	movlb	0	; () banked
  4937  001E56  6B7A               	clrf	(___fttol@lval+3)& (0+255),b
  4938                           
  4939                           ; BSR set to: 0
  4940  001E58  0E8E               	movlw	142
  4941  001E5A  0100               	movlb	0	; () banked
  4942  001E5C  5F7B               	subwf	___fttol@exp1& (0+255),f,b
  4943                           
  4944                           ; BSR set to: 0
  4945  001E5E  0100               	movlb	0	; () banked
  4946  001E60  AF7B               	btfss	___fttol@exp1& (0+255),7,b
  4947  001E62  D01A               	goto	l1838
  4948                           
  4949                           ; BSR set to: 0
  4950  001E64  0100               	movlb	0	; () banked
  4951  001E66  517B               	movf	___fttol@exp1& (0+255),w,b
  4952  001E68  0A80               	xorlw	128
  4953  001E6A  0F8F               	addlw	143
  4954  001E6C  B0D8               	btfsc	status,0,c
  4955  001E6E  D00A               	goto	l1839
  4956                           
  4957                           ; BSR set to: 0
  4958  001E70  0E00               	movlw	0
  4959  001E72  0100               	movlb	0	; () banked
  4960  001E74  6F6D               	movwf	?___fttol& (0+255),b
  4961  001E76  0E00               	movlw	0
  4962  001E78  6F6E               	movwf	(?___fttol+1)& (0+255),b
  4963  001E7A  0E00               	movlw	0
  4964  001E7C  6F6F               	movwf	(?___fttol+2)& (0+255),b
  4965  001E7E  0E00               	movlw	0
  4966  001E80  6F70               	movwf	(?___fttol+3)& (0+255),b
  4967                           
  4968                           ; BSR set to: 0
  4969  001E82  0012               	return	
  4970  001E84                     l1839:
  4971                           
  4972                           ; BSR set to: 0
  4973                           
  4974                           ; BSR set to: 0
  4975                           
  4976                           ; BSR set to: 0
  4977  001E84  0100               	movlb	0	; () banked
  4978  001E86  90D8               	bcf	status,0,c
  4979  001E88  337A               	rrcf	(___fttol@lval+3)& (0+255),f,b
  4980  001E8A  3379               	rrcf	(___fttol@lval+2)& (0+255),f,b
  4981  001E8C  3378               	rrcf	(___fttol@lval+1)& (0+255),f,b
  4982  001E8E  3377               	rrcf	___fttol@lval& (0+255),f,b
  4983                           
  4984                           ; BSR set to: 0
  4985  001E90  0100               	movlb	0	; () banked
  4986  001E92  3F7B               	incfsz	___fttol@exp1& (0+255),f,b
  4987  001E94  D7F7               	goto	l1839
  4988                           
  4989                           ; BSR set to: 0
  4990  001E96  D01B               	goto	u6610
  4991  001E98                     l1838:
  4992                           
  4993                           ; BSR set to: 0
  4994                           
  4995                           ; BSR set to: 0
  4996  001E98  0E17               	movlw	23
  4997  001E9A  0100               	movlb	0	; () banked
  4998  001E9C  657B               	cpfsgt	___fttol@exp1& (0+255),b
  4999  001E9E  D012               	goto	l1844
  5000                           
  5001                           ; BSR set to: 0
  5002  001EA0  0E00               	movlw	0
  5003  001EA2  0100               	movlb	0	; () banked
  5004  001EA4  6F6D               	movwf	?___fttol& (0+255),b
  5005  001EA6  0E00               	movlw	0
  5006  001EA8  6F6E               	movwf	(?___fttol+1)& (0+255),b
  5007  001EAA  0E00               	movlw	0
  5008  001EAC  6F6F               	movwf	(?___fttol+2)& (0+255),b
  5009  001EAE  0E00               	movlw	0
  5010  001EB0  6F70               	movwf	(?___fttol+3)& (0+255),b
  5011                           
  5012                           ; BSR set to: 0
  5013  001EB2  0012               	return	
  5014  001EB4                     
  5015                           ; BSR set to: 0
  5016                           
  5017                           ; BSR set to: 0
  5018  001EB4  0100               	movlb	0	; () banked
  5019  001EB6  90D8               	bcf	status,0,c
  5020  001EB8  3777               	rlcf	___fttol@lval& (0+255),f,b
  5021  001EBA  3778               	rlcf	(___fttol@lval+1)& (0+255),f,b
  5022  001EBC  3779               	rlcf	(___fttol@lval+2)& (0+255),f,b
  5023  001EBE  377A               	rlcf	(___fttol@lval+3)& (0+255),f,b
  5024  001EC0  0100               	movlb	0	; () banked
  5025  001EC2  077B               	decf	___fttol@exp1& (0+255),f,b
  5026  001EC4                     l1844:
  5027                           
  5028                           ; BSR set to: 0
  5029                           
  5030                           ; BSR set to: 0
  5031  001EC4  0100               	movlb	0	; () banked
  5032  001EC6  517B               	movf	___fttol@exp1& (0+255),w,b
  5033  001EC8  0100               	movlb	0	; () banked
  5034  001ECA  A4D8               	btfss	status,2,c
  5035  001ECC  D7F3               	goto	l1845
  5036  001ECE                     u6610:
  5037                           
  5038                           ; BSR set to: 0
  5039                           
  5040                           ; BSR set to: 0
  5041                           
  5042                           ; BSR set to: 0
  5043  001ECE  0100               	movlb	0	; () banked
  5044  001ED0  5176               	movf	___fttol@sign1& (0+255),w,b
  5045  001ED2  0100               	movlb	0	; () banked
  5046  001ED4  B4D8               	btfsc	status,2,c
  5047  001ED6  D009               	goto	l1847
  5048                           
  5049                           ; BSR set to: 0
  5050  001ED8  0100               	movlb	0	; () banked
  5051  001EDA  1F7A               	comf	(___fttol@lval+3)& (0+255),f,b
  5052  001EDC  1F79               	comf	(___fttol@lval+2)& (0+255),f,b
  5053  001EDE  1F78               	comf	(___fttol@lval+1)& (0+255),f,b
  5054  001EE0  6D77               	negf	___fttol@lval& (0+255),b
  5055  001EE2  0E00               	movlw	0
  5056  001EE4  2378               	addwfc	(___fttol@lval+1)& (0+255),f,b
  5057  001EE6  2379               	addwfc	(___fttol@lval+2)& (0+255),f,b
  5058  001EE8  237A               	addwfc	(___fttol@lval+3)& (0+255),f,b
  5059  001EEA                     l1847:
  5060                           
  5061                           ; BSR set to: 0
  5062                           
  5063                           ; BSR set to: 0
  5064  001EEA  C077  F06D         	movff	___fttol@lval,?___fttol
  5065  001EEE  C078  F06E         	movff	___fttol@lval+1,?___fttol+1
  5066  001EF2  C079  F06F         	movff	___fttol@lval+2,?___fttol+2
  5067  001EF6  C07A  F070         	movff	___fttol@lval+3,?___fttol+3
  5068  001EFA  0012               	return	
  5069  001EFC                     __end_of___fttol:
  5070                           	opt stack 0
  5071                           tblptru	equ	0xFF8
  5072                           tblptrh	equ	0xFF7
  5073                           tblptrl	equ	0xFF6
  5074                           tablat	equ	0xFF5
  5075                           prodh	equ	0xFF4
  5076                           prodl	equ	0xFF3
  5077                           postinc0	equ	0xFEE
  5078                           wreg	equ	0xFE8
  5079                           indf1	equ	0xFE7
  5080                           fsr1h	equ	0xFE2
  5081                           fsr1l	equ	0xFE1
  5082                           indf2	equ	0xFDF
  5083                           postinc2	equ	0xFDE
  5084                           postdec2	equ	0xFDD
  5085                           fsr2h	equ	0xFDA
  5086                           fsr2l	equ	0xFD9
  5087                           status	equ	0xFD8
  5088                           
  5089 ;; *************** function ___ftsub *****************
  5090 ;; Defined at:
  5091 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftsub.c"
  5092 ;; Parameters:    Size  Location     Type
  5093 ;;  f1              3   28[BANK0 ] float 
  5094 ;;  f2              3   31[BANK0 ] float 
  5095 ;; Auto vars:     Size  Location     Type
  5096 ;;		None
  5097 ;; Return value:  Size  Location     Type
  5098 ;;                  3   28[BANK0 ] float 
  5099 ;; Registers used:
  5100 ;;		wreg, status,2, status,0, cstack
  5101 ;; Tracked objects:
  5102 ;;		On entry : 0/0
  5103 ;;		On exit  : 0/0
  5104 ;;		Unchanged: 0/0
  5105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5106 ;;      Params:         0       6       0       0       0       0       0       0       0
  5107 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5108 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5109 ;;      Totals:         0       6       0       0       0       0       0       0       0
  5110 ;;Total ram usage:        6 bytes
  5111 ;; Hardware stack levels used:    1
  5112 ;; Hardware stack levels required when called:    5
  5113 ;; This function calls:
  5114 ;;		___ftadd
  5115 ;; This function is called by:
  5116 ;;		_sprintf
  5117 ;; This function uses a non-reentrant model
  5118 ;;
  5119                           
  5120                           	psect	text15
  5121  0027EE                     __ptext15:
  5122                           	opt stack 0
  5123  0027EE                     ___ftsub:
  5124                           	opt stack 24
  5125                           
  5126                           ; BSR set to: 0
  5127                           ;incstack = 0
  5128  0027EE  0100               	movlb	0	; () banked
  5129  0027F0  517F               	movf	___ftsub@f2& (0+255),w,b
  5130  0027F2  0100               	movlb	0	; () banked
  5131  0027F4  1180               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  5132  0027F6  0100               	movlb	0	; () banked
  5133  0027F8  1181               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  5134  0027FA  B4D8               	btfsc	status,2,c
  5135  0027FC  D009               	goto	l1832
  5136                           
  5137                           ; BSR set to: 0
  5138  0027FE  0E00               	movlw	0
  5139  002800  0100               	movlb	0	; () banked
  5140  002802  1B7F               	xorwf	___ftsub@f2& (0+255),f,b
  5141  002804  0E00               	movlw	0
  5142  002806  0100               	movlb	0	; () banked
  5143  002808  1B80               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  5144  00280A  0E80               	movlw	128
  5145  00280C  0100               	movlb	0	; () banked
  5146  00280E  1B81               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  5147  002810                     l1832:
  5148                           
  5149                           ; BSR set to: 0
  5150                           
  5151                           ; BSR set to: 0
  5152  002810  C07C  F070         	movff	___ftsub@f1,___ftadd@f1
  5153  002814  C07D  F071         	movff	___ftsub@f1+1,___ftadd@f1+1
  5154  002818  C07E  F072         	movff	___ftsub@f1+2,___ftadd@f1+2
  5155  00281C  C07F  F073         	movff	___ftsub@f2,___ftadd@f2
  5156  002820  C080  F074         	movff	___ftsub@f2+1,___ftadd@f2+1
  5157  002824  C081  F075         	movff	___ftsub@f2+2,___ftadd@f2+2
  5158  002828  ECA2  F00A         	call	___ftadd	;wreg free
  5159  00282C  C070  F07C         	movff	?___ftadd,?___ftsub
  5160  002830  C071  F07D         	movff	?___ftadd+1,?___ftsub+1
  5161  002834  C072  F07E         	movff	?___ftadd+2,?___ftsub+2
  5162  002838  0012               	return	
  5163  00283A                     __end_of___ftsub:
  5164                           	opt stack 0
  5165                           tblptru	equ	0xFF8
  5166                           tblptrh	equ	0xFF7
  5167                           tblptrl	equ	0xFF6
  5168                           tablat	equ	0xFF5
  5169                           prodh	equ	0xFF4
  5170                           prodl	equ	0xFF3
  5171                           postinc0	equ	0xFEE
  5172                           wreg	equ	0xFE8
  5173                           indf1	equ	0xFE7
  5174                           fsr1h	equ	0xFE2
  5175                           fsr1l	equ	0xFE1
  5176                           indf2	equ	0xFDF
  5177                           postinc2	equ	0xFDE
  5178                           postdec2	equ	0xFDD
  5179                           fsr2h	equ	0xFDA
  5180                           fsr2l	equ	0xFD9
  5181                           status	equ	0xFD8
  5182                           
  5183 ;; *************** function ___ftadd *****************
  5184 ;; Defined at:
  5185 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftadd.c"
  5186 ;; Parameters:    Size  Location     Type
  5187 ;;  f1              3   16[BANK0 ] float 
  5188 ;;  f2              3   19[BANK0 ] float 
  5189 ;; Auto vars:     Size  Location     Type
  5190 ;;  exp1            1   27[BANK0 ] unsigned char 
  5191 ;;  exp2            1   26[BANK0 ] unsigned char 
  5192 ;;  sign            1   25[BANK0 ] unsigned char 
  5193 ;; Return value:  Size  Location     Type
  5194 ;;                  3   16[BANK0 ] float 
  5195 ;; Registers used:
  5196 ;;		wreg, status,2, status,0, cstack
  5197 ;; Tracked objects:
  5198 ;;		On entry : 0/0
  5199 ;;		On exit  : 0/0
  5200 ;;		Unchanged: 0/0
  5201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5202 ;;      Params:         0       6       0       0       0       0       0       0       0
  5203 ;;      Locals:         0       3       0       0       0       0       0       0       0
  5204 ;;      Temps:          0       3       0       0       0       0       0       0       0
  5205 ;;      Totals:         0      12       0       0       0       0       0       0       0
  5206 ;;Total ram usage:       12 bytes
  5207 ;; Hardware stack levels used:    1
  5208 ;; Hardware stack levels required when called:    4
  5209 ;; This function calls:
  5210 ;;		___ftpack
  5211 ;; This function is called by:
  5212 ;;		_sprintf
  5213 ;;		___ftsub
  5214 ;; This function uses a non-reentrant model
  5215 ;;
  5216                           
  5217                           	psect	text16
  5218  001544                     __ptext16:
  5219                           	opt stack 0
  5220  001544                     ___ftadd:
  5221                           	opt stack 24
  5222                           
  5223                           ;incstack = 0
  5224  001544  C072  F076         	movff	___ftadd@f1+2,??___ftadd
  5225  001548  0100               	movlb	0	; () banked
  5226  00154A  6B77               	clrf	(??___ftadd+1)& (0+255),b
  5227  00154C  6B78               	clrf	(??___ftadd+2)& (0+255),b
  5228  00154E  0100               	movlb	0	; () banked
  5229  001550  3571               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  5230  001552  0100               	movlb	0	; () banked
  5231  001554  3776               	rlcf	??___ftadd& (0+255),f,b
  5232  001556  E301               	bnc	u5831
  5233  001558  8177               	bsf	(??___ftadd+1)& (0+255),0,b
  5234  00155A                     u5831:
  5235  00155A  0100               	movlb	0	; () banked
  5236  00155C  5176               	movf	??___ftadd& (0+255),w,b
  5237  00155E  0100               	movlb	0	; () banked
  5238  001560  6F7B               	movwf	___ftadd@exp1& (0+255),b
  5239  001562  C075  F076         	movff	___ftadd@f2+2,??___ftadd
  5240  001566  0100               	movlb	0	; () banked
  5241  001568  6B77               	clrf	(??___ftadd+1)& (0+255),b
  5242  00156A  6B78               	clrf	(??___ftadd+2)& (0+255),b
  5243  00156C  0100               	movlb	0	; () banked
  5244  00156E  3574               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  5245  001570  0100               	movlb	0	; () banked
  5246  001572  3776               	rlcf	??___ftadd& (0+255),f,b
  5247  001574  E301               	bnc	u5841
  5248  001576  8177               	bsf	(??___ftadd+1)& (0+255),0,b
  5249  001578                     u5841:
  5250  001578  0100               	movlb	0	; () banked
  5251  00157A  5176               	movf	??___ftadd& (0+255),w,b
  5252  00157C  0100               	movlb	0	; () banked
  5253  00157E  6F7A               	movwf	___ftadd@exp2& (0+255),b
  5254                           
  5255                           ; BSR set to: 0
  5256  001580  0100               	movlb	0	; () banked
  5257  001582  517B               	movf	___ftadd@exp1& (0+255),w,b
  5258  001584  0100               	movlb	0	; () banked
  5259  001586  B4D8               	btfsc	status,2,c
  5260  001588  D011               	goto	u5870
  5261                           
  5262                           ; BSR set to: 0
  5263  00158A  0100               	movlb	0	; () banked
  5264  00158C  517A               	movf	___ftadd@exp2& (0+255),w,b
  5265  00158E  0100               	movlb	0	; () banked
  5266  001590  5D7B               	subwf	___ftadd@exp1& (0+255),w,b
  5267  001592  B0D8               	btfsc	status,0,c
  5268  001594  D012               	goto	l1750
  5269                           
  5270                           ; BSR set to: 0
  5271  001596  0100               	movlb	0	; () banked
  5272  001598  517B               	movf	___ftadd@exp1& (0+255),w,b
  5273  00159A  0800               	sublw	0
  5274  00159C  0100               	movlb	0	; () banked
  5275  00159E  257A               	addwf	___ftadd@exp2& (0+255),w,b
  5276  0015A0  0100               	movlb	0	; () banked
  5277  0015A2  6F76               	movwf	??___ftadd& (0+255),b
  5278  0015A4  0E18               	movlw	24
  5279  0015A6  0100               	movlb	0	; () banked
  5280  0015A8  6576               	cpfsgt	??___ftadd& (0+255),b
  5281  0015AA  D007               	goto	l1750
  5282  0015AC                     u5870:
  5283                           
  5284                           ; BSR set to: 0
  5285  0015AC  C073  F070         	movff	___ftadd@f2,?___ftadd
  5286  0015B0  C074  F071         	movff	___ftadd@f2+1,?___ftadd+1
  5287  0015B4  C075  F072         	movff	___ftadd@f2+2,?___ftadd+2
  5288  0015B8  0012               	return	
  5289  0015BA                     l1750:
  5290                           
  5291                           ; BSR set to: 0
  5292                           
  5293                           ; BSR set to: 0
  5294  0015BA  0100               	movlb	0	; () banked
  5295  0015BC  517A               	movf	___ftadd@exp2& (0+255),w,b
  5296  0015BE  0100               	movlb	0	; () banked
  5297  0015C0  B4D8               	btfsc	status,2,c
  5298  0015C2  D011               	goto	u5900
  5299                           
  5300                           ; BSR set to: 0
  5301  0015C4  0100               	movlb	0	; () banked
  5302  0015C6  517B               	movf	___ftadd@exp1& (0+255),w,b
  5303  0015C8  0100               	movlb	0	; () banked
  5304  0015CA  5D7A               	subwf	___ftadd@exp2& (0+255),w,b
  5305  0015CC  B0D8               	btfsc	status,0,c
  5306  0015CE  D012               	goto	l1754
  5307                           
  5308                           ; BSR set to: 0
  5309  0015D0  0100               	movlb	0	; () banked
  5310  0015D2  517A               	movf	___ftadd@exp2& (0+255),w,b
  5311  0015D4  0800               	sublw	0
  5312  0015D6  0100               	movlb	0	; () banked
  5313  0015D8  257B               	addwf	___ftadd@exp1& (0+255),w,b
  5314  0015DA  0100               	movlb	0	; () banked
  5315  0015DC  6F76               	movwf	??___ftadd& (0+255),b
  5316  0015DE  0E18               	movlw	24
  5317  0015E0  0100               	movlb	0	; () banked
  5318  0015E2  6576               	cpfsgt	??___ftadd& (0+255),b
  5319  0015E4  D007               	goto	l1754
  5320  0015E6                     u5900:
  5321                           
  5322                           ; BSR set to: 0
  5323  0015E6  C070  F070         	movff	___ftadd@f1,?___ftadd
  5324  0015EA  C071  F071         	movff	___ftadd@f1+1,?___ftadd+1
  5325  0015EE  C072  F072         	movff	___ftadd@f1+2,?___ftadd+2
  5326  0015F2  0012               	return	
  5327  0015F4                     l1754:
  5328                           
  5329                           ; BSR set to: 0
  5330                           
  5331                           ; BSR set to: 0
  5332  0015F4  0E06               	movlw	6
  5333  0015F6  0100               	movlb	0	; () banked
  5334  0015F8  6F79               	movwf	___ftadd@sign& (0+255),b
  5335                           
  5336                           ; BSR set to: 0
  5337  0015FA  0100               	movlb	0	; () banked
  5338  0015FC  AF72               	btfss	(___ftadd@f1+2)& (0+255),7,b
  5339  0015FE  D002               	goto	l1757
  5340                           
  5341                           ; BSR set to: 0
  5342  001600  0100               	movlb	0	; () banked
  5343  001602  8F79               	bsf	___ftadd@sign& (0+255),7,b
  5344  001604                     l1757:
  5345                           
  5346                           ; BSR set to: 0
  5347                           
  5348                           ; BSR set to: 0
  5349  001604  0100               	movlb	0	; () banked
  5350  001606  AF75               	btfss	(___ftadd@f2+2)& (0+255),7,b
  5351  001608  D002               	goto	l1758
  5352                           
  5353                           ; BSR set to: 0
  5354  00160A  0100               	movlb	0	; () banked
  5355  00160C  8D79               	bsf	___ftadd@sign& (0+255),6,b
  5356  00160E                     l1758:
  5357                           
  5358                           ; BSR set to: 0
  5359  00160E  0100               	movlb	0	; () banked
  5360  001610  8F71               	bsf	(___ftadd@f1+1)& (0+255),7,b
  5361                           
  5362                           ; BSR set to: 0
  5363  001612  0EFF               	movlw	255
  5364  001614  0100               	movlb	0	; () banked
  5365  001616  1770               	andwf	___ftadd@f1& (0+255),f,b
  5366  001618  0EFF               	movlw	255
  5367  00161A  0100               	movlb	0	; () banked
  5368  00161C  1771               	andwf	(___ftadd@f1+1)& (0+255),f,b
  5369  00161E  0E00               	movlw	0
  5370  001620  0100               	movlb	0	; () banked
  5371  001622  1772               	andwf	(___ftadd@f1+2)& (0+255),f,b
  5372  001624  0100               	movlb	0	; () banked
  5373  001626  8F74               	bsf	(___ftadd@f2+1)& (0+255),7,b
  5374                           
  5375                           ; BSR set to: 0
  5376  001628  0EFF               	movlw	255
  5377  00162A  0100               	movlb	0	; () banked
  5378  00162C  1773               	andwf	___ftadd@f2& (0+255),f,b
  5379  00162E  0EFF               	movlw	255
  5380  001630  0100               	movlb	0	; () banked
  5381  001632  1774               	andwf	(___ftadd@f2+1)& (0+255),f,b
  5382  001634  0E00               	movlw	0
  5383  001636  0100               	movlb	0	; () banked
  5384  001638  1775               	andwf	(___ftadd@f2+2)& (0+255),f,b
  5385                           
  5386                           ; BSR set to: 0
  5387  00163A  0100               	movlb	0	; () banked
  5388  00163C  517A               	movf	___ftadd@exp2& (0+255),w,b
  5389  00163E  0100               	movlb	0	; () banked
  5390  001640  5D7B               	subwf	___ftadd@exp1& (0+255),w,b
  5391  001642  B0D8               	btfsc	status,0,c
  5392  001644  D025               	goto	l1759
  5393  001646                     u5930:
  5394                           
  5395                           ; BSR set to: 0
  5396                           
  5397                           ; BSR set to: 0
  5398  001646  0100               	movlb	0	; () banked
  5399  001648  90D8               	bcf	status,0,c
  5400  00164A  3773               	rlcf	___ftadd@f2& (0+255),f,b
  5401  00164C  3774               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  5402  00164E  3775               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  5403  001650  0100               	movlb	0	; () banked
  5404  001652  077A               	decf	___ftadd@exp2& (0+255),f,b
  5405                           
  5406                           ; BSR set to: 0
  5407  001654  0100               	movlb	0	; () banked
  5408  001656  517B               	movf	___ftadd@exp1& (0+255),w,b
  5409  001658  0100               	movlb	0	; () banked
  5410  00165A  197A               	xorwf	___ftadd@exp2& (0+255),w,b
  5411  00165C  B4D8               	btfsc	status,2,c
  5412  00165E  D011               	goto	l1764
  5413                           
  5414                           ; BSR set to: 0
  5415  001660  0100               	movlb	0	; () banked
  5416  001662  0779               	decf	___ftadd@sign& (0+255),f,b
  5417  001664  C079  F076         	movff	___ftadd@sign,??___ftadd
  5418  001668  0E07               	movlw	7
  5419  00166A  0100               	movlb	0	; () banked
  5420  00166C  1776               	andwf	??___ftadd& (0+255),f,b
  5421  00166E  B4D8               	btfsc	status,2,c
  5422  001670  D008               	goto	l1764
  5423  001672  D7E9               	goto	u5930
  5424  001674                     
  5425                           ; BSR set to: 0
  5426                           
  5427                           ; BSR set to: 0
  5428  001674  0100               	movlb	0	; () banked
  5429  001676  90D8               	bcf	status,0,c
  5430  001678  3372               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  5431  00167A  3371               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  5432  00167C  3370               	rrcf	___ftadd@f1& (0+255),f,b
  5433  00167E  0100               	movlb	0	; () banked
  5434  001680  2B7B               	incf	___ftadd@exp1& (0+255),f,b
  5435  001682                     l1764:
  5436                           
  5437                           ; BSR set to: 0
  5438                           
  5439                           ; BSR set to: 0
  5440  001682  0100               	movlb	0	; () banked
  5441  001684  517A               	movf	___ftadd@exp2& (0+255),w,b
  5442  001686  0100               	movlb	0	; () banked
  5443  001688  197B               	xorwf	___ftadd@exp1& (0+255),w,b
  5444  00168A  B4D8               	btfsc	status,2,c
  5445  00168C  D02B               	goto	u6000
  5446  00168E  D7F2               	goto	l1765
  5447  001690                     l1759:
  5448                           
  5449                           ; BSR set to: 0
  5450                           
  5451                           ; BSR set to: 0
  5452  001690  0100               	movlb	0	; () banked
  5453  001692  517B               	movf	___ftadd@exp1& (0+255),w,b
  5454  001694  0100               	movlb	0	; () banked
  5455  001696  5D7A               	subwf	___ftadd@exp2& (0+255),w,b
  5456  001698  B0D8               	btfsc	status,0,c
  5457  00169A  D024               	goto	u6000
  5458  00169C                     u5970:
  5459                           
  5460                           ; BSR set to: 0
  5461                           
  5462                           ; BSR set to: 0
  5463  00169C  0100               	movlb	0	; () banked
  5464  00169E  90D8               	bcf	status,0,c
  5465  0016A0  3770               	rlcf	___ftadd@f1& (0+255),f,b
  5466  0016A2  3771               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  5467  0016A4  3772               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  5468  0016A6  0100               	movlb	0	; () banked
  5469  0016A8  077B               	decf	___ftadd@exp1& (0+255),f,b
  5470                           
  5471                           ; BSR set to: 0
  5472  0016AA  0100               	movlb	0	; () banked
  5473  0016AC  517B               	movf	___ftadd@exp1& (0+255),w,b
  5474  0016AE  0100               	movlb	0	; () banked
  5475  0016B0  197A               	xorwf	___ftadd@exp2& (0+255),w,b
  5476  0016B2  B4D8               	btfsc	status,2,c
  5477  0016B4  D011               	goto	l1773
  5478                           
  5479                           ; BSR set to: 0
  5480  0016B6  0100               	movlb	0	; () banked
  5481  0016B8  0779               	decf	___ftadd@sign& (0+255),f,b
  5482  0016BA  C079  F076         	movff	___ftadd@sign,??___ftadd
  5483  0016BE  0E07               	movlw	7
  5484  0016C0  0100               	movlb	0	; () banked
  5485  0016C2  1776               	andwf	??___ftadd& (0+255),f,b
  5486  0016C4  B4D8               	btfsc	status,2,c
  5487  0016C6  D008               	goto	l1773
  5488  0016C8  D7E9               	goto	u5970
  5489  0016CA                     
  5490                           ; BSR set to: 0
  5491                           
  5492                           ; BSR set to: 0
  5493  0016CA  0100               	movlb	0	; () banked
  5494  0016CC  90D8               	bcf	status,0,c
  5495  0016CE  3375               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  5496  0016D0  3374               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  5497  0016D2  3373               	rrcf	___ftadd@f2& (0+255),f,b
  5498  0016D4  0100               	movlb	0	; () banked
  5499  0016D6  2B7A               	incf	___ftadd@exp2& (0+255),f,b
  5500  0016D8                     l1773:
  5501                           
  5502                           ; BSR set to: 0
  5503                           
  5504                           ; BSR set to: 0
  5505  0016D8  0100               	movlb	0	; () banked
  5506  0016DA  517A               	movf	___ftadd@exp2& (0+255),w,b
  5507  0016DC  0100               	movlb	0	; () banked
  5508  0016DE  197B               	xorwf	___ftadd@exp1& (0+255),w,b
  5509  0016E0  A4D8               	btfss	status,2,c
  5510  0016E2  D7F3               	goto	l1774
  5511  0016E4                     u6000:
  5512                           
  5513                           ; BSR set to: 0
  5514                           
  5515                           ; BSR set to: 0
  5516                           
  5517                           ; BSR set to: 0
  5518  0016E4  0100               	movlb	0	; () banked
  5519  0016E6  AF79               	btfss	___ftadd@sign& (0+255),7,b
  5520  0016E8  D012               	goto	l1776
  5521                           
  5522                           ; BSR set to: 0
  5523  0016EA  0EFF               	movlw	255
  5524  0016EC  0100               	movlb	0	; () banked
  5525  0016EE  1B70               	xorwf	___ftadd@f1& (0+255),f,b
  5526  0016F0  0EFF               	movlw	255
  5527  0016F2  0100               	movlb	0	; () banked
  5528  0016F4  1B71               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  5529  0016F6  0EFF               	movlw	255
  5530  0016F8  0100               	movlb	0	; () banked
  5531  0016FA  1B72               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  5532  0016FC  0E01               	movlw	1
  5533  0016FE  0100               	movlb	0	; () banked
  5534  001700  2770               	addwf	___ftadd@f1& (0+255),f,b
  5535  001702  0E00               	movlw	0
  5536  001704  0100               	movlb	0	; () banked
  5537  001706  2371               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  5538  001708  0E00               	movlw	0
  5539  00170A  0100               	movlb	0	; () banked
  5540  00170C  2372               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  5541  00170E                     l1776:
  5542                           
  5543                           ; BSR set to: 0
  5544  00170E  0100               	movlb	0	; () banked
  5545  001710  AD79               	btfss	___ftadd@sign& (0+255),6,b
  5546  001712  D012               	goto	l1777
  5547                           
  5548                           ; BSR set to: 0
  5549  001714  0EFF               	movlw	255
  5550  001716  0100               	movlb	0	; () banked
  5551  001718  1B73               	xorwf	___ftadd@f2& (0+255),f,b
  5552  00171A  0EFF               	movlw	255
  5553  00171C  0100               	movlb	0	; () banked
  5554  00171E  1B74               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  5555  001720  0EFF               	movlw	255
  5556  001722  0100               	movlb	0	; () banked
  5557  001724  1B75               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  5558  001726  0E01               	movlw	1
  5559  001728  0100               	movlb	0	; () banked
  5560  00172A  2773               	addwf	___ftadd@f2& (0+255),f,b
  5561  00172C  0E00               	movlw	0
  5562  00172E  0100               	movlb	0	; () banked
  5563  001730  2374               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  5564  001732  0E00               	movlw	0
  5565  001734  0100               	movlb	0	; () banked
  5566  001736  2375               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  5567  001738                     l1777:
  5568                           
  5569                           ; BSR set to: 0
  5570                           
  5571                           ; BSR set to: 0
  5572  001738  0E00               	movlw	0
  5573  00173A  0100               	movlb	0	; () banked
  5574  00173C  6F79               	movwf	___ftadd@sign& (0+255),b
  5575                           
  5576                           ; BSR set to: 0
  5577  00173E  0100               	movlb	0	; () banked
  5578  001740  5170               	movf	___ftadd@f1& (0+255),w,b
  5579  001742  0100               	movlb	0	; () banked
  5580  001744  2773               	addwf	___ftadd@f2& (0+255),f,b
  5581  001746  0100               	movlb	0	; () banked
  5582  001748  5171               	movf	(___ftadd@f1+1)& (0+255),w,b
  5583  00174A  0100               	movlb	0	; () banked
  5584  00174C  2374               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  5585  00174E  0100               	movlb	0	; () banked
  5586  001750  5172               	movf	(___ftadd@f1+2)& (0+255),w,b
  5587  001752  0100               	movlb	0	; () banked
  5588  001754  2375               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  5589                           
  5590                           ; BSR set to: 0
  5591  001756  0100               	movlb	0	; () banked
  5592  001758  AF75               	btfss	(___ftadd@f2+2)& (0+255),7,b
  5593  00175A  D015               	goto	l1778
  5594                           
  5595                           ; BSR set to: 0
  5596  00175C  0EFF               	movlw	255
  5597  00175E  0100               	movlb	0	; () banked
  5598  001760  1B73               	xorwf	___ftadd@f2& (0+255),f,b
  5599  001762  0EFF               	movlw	255
  5600  001764  0100               	movlb	0	; () banked
  5601  001766  1B74               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  5602  001768  0EFF               	movlw	255
  5603  00176A  0100               	movlb	0	; () banked
  5604  00176C  1B75               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  5605  00176E  0E01               	movlw	1
  5606  001770  0100               	movlb	0	; () banked
  5607  001772  2773               	addwf	___ftadd@f2& (0+255),f,b
  5608  001774  0E00               	movlw	0
  5609  001776  0100               	movlb	0	; () banked
  5610  001778  2374               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  5611  00177A  0E00               	movlw	0
  5612  00177C  0100               	movlb	0	; () banked
  5613  00177E  2375               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  5614                           
  5615                           ; BSR set to: 0
  5616  001780  0E01               	movlw	1
  5617  001782  0100               	movlb	0	; () banked
  5618  001784  6F79               	movwf	___ftadd@sign& (0+255),b
  5619  001786                     l1778:
  5620                           
  5621                           ; BSR set to: 0
  5622                           
  5623                           ; BSR set to: 0
  5624  001786  C073  F016         	movff	___ftadd@f2,___ftpack@arg
  5625  00178A  C074  F017         	movff	___ftadd@f2+1,___ftpack@arg+1
  5626  00178E  C075  F018         	movff	___ftadd@f2+2,___ftpack@arg+2
  5627  001792  C07B  F019         	movff	___ftadd@exp1,___ftpack@exp
  5628  001796  C079  F01A         	movff	___ftadd@sign,___ftpack@sign
  5629  00179A  ECC1  F011         	call	___ftpack	;wreg free
  5630  00179E  C016  F070         	movff	?___ftpack,?___ftadd
  5631  0017A2  C017  F071         	movff	?___ftpack+1,?___ftadd+1
  5632  0017A6  C018  F072         	movff	?___ftpack+2,?___ftadd+2
  5633  0017AA  0012               	return	
  5634  0017AC                     __end_of___ftadd:
  5635                           	opt stack 0
  5636                           tblptru	equ	0xFF8
  5637                           tblptrh	equ	0xFF7
  5638                           tblptrl	equ	0xFF6
  5639                           tablat	equ	0xFF5
  5640                           prodh	equ	0xFF4
  5641                           prodl	equ	0xFF3
  5642                           postinc0	equ	0xFEE
  5643                           wreg	equ	0xFE8
  5644                           indf1	equ	0xFE7
  5645                           fsr1h	equ	0xFE2
  5646                           fsr1l	equ	0xFE1
  5647                           indf2	equ	0xFDF
  5648                           postinc2	equ	0xFDE
  5649                           postdec2	equ	0xFDD
  5650                           fsr2h	equ	0xFDA
  5651                           fsr2l	equ	0xFD9
  5652                           status	equ	0xFD8
  5653                           
  5654 ;; *************** function ___ftneg *****************
  5655 ;; Defined at:
  5656 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftneg.c"
  5657 ;; Parameters:    Size  Location     Type
  5658 ;;  f1              3   21[COMRAM] float 
  5659 ;; Auto vars:     Size  Location     Type
  5660 ;;		None
  5661 ;; Return value:  Size  Location     Type
  5662 ;;                  3   21[COMRAM] float 
  5663 ;; Registers used:
  5664 ;;		wreg, status,2, status,0
  5665 ;; Tracked objects:
  5666 ;;		On entry : 0/0
  5667 ;;		On exit  : 0/0
  5668 ;;		Unchanged: 0/0
  5669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5670 ;;      Params:         3       0       0       0       0       0       0       0       0
  5671 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5672 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5673 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5674 ;;Total ram usage:        3 bytes
  5675 ;; Hardware stack levels used:    1
  5676 ;; Hardware stack levels required when called:    3
  5677 ;; This function calls:
  5678 ;;		Nothing
  5679 ;; This function is called by:
  5680 ;;		_sprintf
  5681 ;; This function uses a non-reentrant model
  5682 ;;
  5683                           
  5684                           	psect	text17
  5685  002A10                     __ptext17:
  5686                           	opt stack 0
  5687  002A10                     ___ftneg:
  5688                           	opt stack 26
  5689                           
  5690                           ;incstack = 0
  5691  002A10  5016               	movf	___ftneg@f1,w,c
  5692  002A12  1017               	iorwf	___ftneg@f1+1,w,c
  5693  002A14  1018               	iorwf	___ftneg@f1+2,w,c
  5694  002A16  B4D8               	btfsc	status,2,c
  5695  002A18  D006               	goto	l1826
  5696  002A1A  0E00               	movlw	0
  5697  002A1C  1A16               	xorwf	___ftneg@f1,f,c
  5698  002A1E  0E00               	movlw	0
  5699  002A20  1A17               	xorwf	___ftneg@f1+1,f,c
  5700  002A22  0E80               	movlw	128
  5701  002A24  1A18               	xorwf	___ftneg@f1+2,f,c
  5702  002A26                     l1826:
  5703  002A26  C016  F016         	movff	___ftneg@f1,?___ftneg
  5704  002A2A  C017  F017         	movff	___ftneg@f1+1,?___ftneg+1
  5705  002A2E  C018  F018         	movff	___ftneg@f1+2,?___ftneg+2
  5706  002A32  0012               	return		;funcret
  5707  002A34                     __end_of___ftneg:
  5708                           	opt stack 0
  5709                           tblptru	equ	0xFF8
  5710                           tblptrh	equ	0xFF7
  5711                           tblptrl	equ	0xFF6
  5712                           tablat	equ	0xFF5
  5713                           prodh	equ	0xFF4
  5714                           prodl	equ	0xFF3
  5715                           postinc0	equ	0xFEE
  5716                           wreg	equ	0xFE8
  5717                           indf1	equ	0xFE7
  5718                           fsr1h	equ	0xFE2
  5719                           fsr1l	equ	0xFE1
  5720                           indf2	equ	0xFDF
  5721                           postinc2	equ	0xFDE
  5722                           postdec2	equ	0xFDD
  5723                           fsr2h	equ	0xFDA
  5724                           fsr2l	equ	0xFD9
  5725                           status	equ	0xFD8
  5726                           
  5727 ;; *************** function ___ftge *****************
  5728 ;; Defined at:
  5729 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftge.c"
  5730 ;; Parameters:    Size  Location     Type
  5731 ;;  ff1             3   21[COMRAM] float 
  5732 ;;  ff2             3   24[COMRAM] float 
  5733 ;; Auto vars:     Size  Location     Type
  5734 ;;		None
  5735 ;; Return value:  Size  Location     Type
  5736 ;;		None               void
  5737 ;; Registers used:
  5738 ;;		wreg, status,2, status,0
  5739 ;; Tracked objects:
  5740 ;;		On entry : 0/0
  5741 ;;		On exit  : 0/0
  5742 ;;		Unchanged: 0/0
  5743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5744 ;;      Params:         6       0       0       0       0       0       0       0       0
  5745 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5746 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5747 ;;      Totals:         9       0       0       0       0       0       0       0       0
  5748 ;;Total ram usage:        9 bytes
  5749 ;; Hardware stack levels used:    1
  5750 ;; Hardware stack levels required when called:    3
  5751 ;; This function calls:
  5752 ;;		Nothing
  5753 ;; This function is called by:
  5754 ;;		_sprintf
  5755 ;; This function uses a non-reentrant model
  5756 ;;
  5757                           
  5758                           	psect	text18
  5759  0024D4                     __ptext18:
  5760                           	opt stack 0
  5761  0024D4                     ___ftge:
  5762                           	opt stack 26
  5763                           
  5764                           ;incstack = 0
  5765  0024D4  AE18               	btfss	___ftge@ff1+2,7,c
  5766  0024D6  D016               	goto	l1808
  5767  0024D8  C016  F01C         	movff	___ftge@ff1,??___ftge
  5768  0024DC  C017  F01D         	movff	___ftge@ff1+1,??___ftge+1
  5769  0024E0  C018  F01E         	movff	___ftge@ff1+2,??___ftge+2
  5770  0024E4  1E1C               	comf	??___ftge,f,c
  5771  0024E6  1E1D               	comf	??___ftge+1,f,c
  5772  0024E8  1E1E               	comf	??___ftge+2,f,c
  5773  0024EA  2A1C               	incf	??___ftge,f,c
  5774  0024EC  0E00               	movlw	0
  5775  0024EE  221D               	addwfc	??___ftge+1,f,c
  5776  0024F0  221E               	addwfc	??___ftge+2,f,c
  5777  0024F2  0E00               	movlw	0
  5778  0024F4  241C               	addwf	??___ftge,w,c
  5779  0024F6  6E16               	movwf	___ftge@ff1,c
  5780  0024F8  0E00               	movlw	0
  5781  0024FA  201D               	addwfc	??___ftge+1,w,c
  5782  0024FC  6E17               	movwf	___ftge@ff1+1,c
  5783  0024FE  0E80               	movlw	128
  5784  002500  201E               	addwfc	??___ftge+2,w,c
  5785  002502  6E18               	movwf	___ftge@ff1+2,c
  5786  002504                     l1808:
  5787  002504  AE1B               	btfss	___ftge@ff2+2,7,c
  5788  002506  D016               	goto	l1809
  5789  002508  C019  F01C         	movff	___ftge@ff2,??___ftge
  5790  00250C  C01A  F01D         	movff	___ftge@ff2+1,??___ftge+1
  5791  002510  C01B  F01E         	movff	___ftge@ff2+2,??___ftge+2
  5792  002514  1E1C               	comf	??___ftge,f,c
  5793  002516  1E1D               	comf	??___ftge+1,f,c
  5794  002518  1E1E               	comf	??___ftge+2,f,c
  5795  00251A  2A1C               	incf	??___ftge,f,c
  5796  00251C  0E00               	movlw	0
  5797  00251E  221D               	addwfc	??___ftge+1,f,c
  5798  002520  221E               	addwfc	??___ftge+2,f,c
  5799  002522  0E00               	movlw	0
  5800  002524  241C               	addwf	??___ftge,w,c
  5801  002526  6E19               	movwf	___ftge@ff2,c
  5802  002528  0E00               	movlw	0
  5803  00252A  201D               	addwfc	??___ftge+1,w,c
  5804  00252C  6E1A               	movwf	___ftge@ff2+1,c
  5805  00252E  0E80               	movlw	128
  5806  002530  201E               	addwfc	??___ftge+2,w,c
  5807  002532  6E1B               	movwf	___ftge@ff2+2,c
  5808  002534                     l1809:
  5809  002534  0E00               	movlw	0
  5810  002536  1A16               	xorwf	___ftge@ff1,f,c
  5811  002538  0E00               	movlw	0
  5812  00253A  1A17               	xorwf	___ftge@ff1+1,f,c
  5813  00253C  0E80               	movlw	128
  5814  00253E  1A18               	xorwf	___ftge@ff1+2,f,c
  5815  002540  0E00               	movlw	0
  5816  002542  1A19               	xorwf	___ftge@ff2,f,c
  5817  002544  0E00               	movlw	0
  5818  002546  1A1A               	xorwf	___ftge@ff2+1,f,c
  5819  002548  0E80               	movlw	128
  5820  00254A  1A1B               	xorwf	___ftge@ff2+2,f,c
  5821  00254C  5019               	movf	___ftge@ff2,w,c
  5822  00254E  5C16               	subwf	___ftge@ff1,w,c
  5823  002550  501A               	movf	___ftge@ff2+1,w,c
  5824  002552  5817               	subwfb	___ftge@ff1+1,w,c
  5825  002554  501B               	movf	___ftge@ff2+2,w,c
  5826  002556  5818               	subwfb	___ftge@ff1+2,w,c
  5827  002558  B0D8               	btfsc	status,0,c
  5828  00255A  D002               	goto	l5874
  5829  00255C  90D8               	bcf	status,0,c
  5830  00255E  0012               	return	
  5831  002560                     l5874:
  5832  002560  80D8               	bsf	status,0,c
  5833  002562  0012               	return	
  5834  002564                     __end_of___ftge:
  5835                           	opt stack 0
  5836                           tblptru	equ	0xFF8
  5837                           tblptrh	equ	0xFF7
  5838                           tblptrl	equ	0xFF6
  5839                           tablat	equ	0xFF5
  5840                           prodh	equ	0xFF4
  5841                           prodl	equ	0xFF3
  5842                           postinc0	equ	0xFEE
  5843                           wreg	equ	0xFE8
  5844                           indf1	equ	0xFE7
  5845                           fsr1h	equ	0xFE2
  5846                           fsr1l	equ	0xFE1
  5847                           indf2	equ	0xFDF
  5848                           postinc2	equ	0xFDE
  5849                           postdec2	equ	0xFDD
  5850                           fsr2h	equ	0xFDA
  5851                           fsr2l	equ	0xFD9
  5852                           status	equ	0xFD8
  5853                           
  5854 ;; *************** function ___lwtoft *****************
  5855 ;; Defined at:
  5856 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwtoft.c"
  5857 ;; Parameters:    Size  Location     Type
  5858 ;;  c               2   29[COMRAM] unsigned int 
  5859 ;; Auto vars:     Size  Location     Type
  5860 ;;		None
  5861 ;; Return value:  Size  Location     Type
  5862 ;;                  3   29[COMRAM] float 
  5863 ;; Registers used:
  5864 ;;		wreg, status,2, status,0, cstack
  5865 ;; Tracked objects:
  5866 ;;		On entry : 0/0
  5867 ;;		On exit  : 0/0
  5868 ;;		Unchanged: 0/0
  5869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5870 ;;      Params:         3       0       0       0       0       0       0       0       0
  5871 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5872 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5873 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5874 ;;Total ram usage:        3 bytes
  5875 ;; Hardware stack levels used:    1
  5876 ;; Hardware stack levels required when called:    4
  5877 ;; This function calls:
  5878 ;;		___ftpack
  5879 ;; This function is called by:
  5880 ;;		_main
  5881 ;; This function uses a non-reentrant model
  5882 ;;
  5883                           
  5884                           	psect	text19
  5885  002A34                     __ptext19:
  5886                           	opt stack 0
  5887  002A34                     ___lwtoft:
  5888                           	opt stack 26
  5889                           
  5890                           ;incstack = 0
  5891  002A34  C01E  F016         	movff	___lwtoft@c,___ftpack@arg
  5892  002A38  C01F  F017         	movff	___lwtoft@c+1,___ftpack@arg+1
  5893  002A3C  6A18               	clrf	___ftpack@arg+2,c
  5894  002A3E  0E8E               	movlw	142
  5895  002A40  6E19               	movwf	___ftpack@exp,c
  5896  002A42  0E00               	movlw	0
  5897  002A44  6E1A               	movwf	___ftpack@sign,c
  5898  002A46  ECC1  F011         	call	___ftpack	;wreg free
  5899  002A4A  C016  F01E         	movff	?___ftpack,?___lwtoft
  5900  002A4E  C017  F01F         	movff	?___ftpack+1,?___lwtoft+1
  5901  002A52  C018  F020         	movff	?___ftpack+2,?___lwtoft+2
  5902  002A56  0012               	return	
  5903  002A58                     __end_of___lwtoft:
  5904                           	opt stack 0
  5905                           tblptru	equ	0xFF8
  5906                           tblptrh	equ	0xFF7
  5907                           tblptrl	equ	0xFF6
  5908                           tablat	equ	0xFF5
  5909                           prodh	equ	0xFF4
  5910                           prodl	equ	0xFF3
  5911                           postinc0	equ	0xFEE
  5912                           wreg	equ	0xFE8
  5913                           indf1	equ	0xFE7
  5914                           fsr1h	equ	0xFE2
  5915                           fsr1l	equ	0xFE1
  5916                           indf2	equ	0xFDF
  5917                           postinc2	equ	0xFDE
  5918                           postdec2	equ	0xFDD
  5919                           fsr2h	equ	0xFDA
  5920                           fsr2l	equ	0xFD9
  5921                           status	equ	0xFD8
  5922                           
  5923 ;; *************** function ___ftpack *****************
  5924 ;; Defined at:
  5925 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\float.c"
  5926 ;; Parameters:    Size  Location     Type
  5927 ;;  arg             3   21[COMRAM] unsigned um
  5928 ;;  exp             1   24[COMRAM] unsigned char 
  5929 ;;  sign            1   25[COMRAM] unsigned char 
  5930 ;; Auto vars:     Size  Location     Type
  5931 ;;		None
  5932 ;; Return value:  Size  Location     Type
  5933 ;;                  3   21[COMRAM] float 
  5934 ;; Registers used:
  5935 ;;		wreg, status,2, status,0
  5936 ;; Tracked objects:
  5937 ;;		On entry : 0/0
  5938 ;;		On exit  : 0/0
  5939 ;;		Unchanged: 0/0
  5940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5941 ;;      Params:         5       0       0       0       0       0       0       0       0
  5942 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5943 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5944 ;;      Totals:         8       0       0       0       0       0       0       0       0
  5945 ;;Total ram usage:        8 bytes
  5946 ;; Hardware stack levels used:    1
  5947 ;; Hardware stack levels required when called:    3
  5948 ;; This function calls:
  5949 ;;		Nothing
  5950 ;; This function is called by:
  5951 ;;		___ftadd
  5952 ;;		___ftmul
  5953 ;;		___lltoft
  5954 ;;		___lwtoft
  5955 ;; This function uses a non-reentrant model
  5956 ;;
  5957                           
  5958                           	psect	text20
  5959  002382                     __ptext20:
  5960                           	opt stack 0
  5961  002382                     ___ftpack:
  5962                           	opt stack 24
  5963                           
  5964                           ;incstack = 0
  5965  002382  5019               	movf	___ftpack@exp,w,c
  5966  002384  B4D8               	btfsc	status,2,c
  5967  002386  D005               	goto	u5690
  5968  002388  5016               	movf	___ftpack@arg,w,c
  5969  00238A  1017               	iorwf	___ftpack@arg+1,w,c
  5970  00238C  1018               	iorwf	___ftpack@arg+2,w,c
  5971  00238E  A4D8               	btfss	status,2,c
  5972  002390  D00C               	goto	l1719
  5973  002392                     u5690:
  5974  002392  0E00               	movlw	0
  5975  002394  6E16               	movwf	?___ftpack,c
  5976  002396  0E00               	movlw	0
  5977  002398  6E17               	movwf	?___ftpack+1,c
  5978  00239A  0E00               	movlw	0
  5979  00239C  6E18               	movwf	?___ftpack+2,c
  5980  00239E  0012               	return	
  5981  0023A0  2A19               	incf	___ftpack@exp,f,c
  5982  0023A2  90D8               	bcf	status,0,c
  5983  0023A4  3218               	rrcf	___ftpack@arg+2,f,c
  5984  0023A6  3217               	rrcf	___ftpack@arg+1,f,c
  5985  0023A8  3216               	rrcf	___ftpack@arg,f,c
  5986  0023AA                     l1719:
  5987  0023AA  0E00               	movlw	0
  5988  0023AC  1416               	andwf	___ftpack@arg,w,c
  5989  0023AE  6E1B               	movwf	??___ftpack& (0+255),c
  5990  0023B0  0E00               	movlw	0
  5991  0023B2  1417               	andwf	___ftpack@arg+1,w,c
  5992  0023B4  6E1C               	movwf	(??___ftpack+1)& (0+255),c
  5993  0023B6  0EFE               	movlw	254
  5994  0023B8  1418               	andwf	___ftpack@arg+2,w,c
  5995  0023BA  6E1D               	movwf	(??___ftpack+2)& (0+255),c
  5996  0023BC  501B               	movf	??___ftpack,w,c
  5997  0023BE  101C               	iorwf	??___ftpack+1,w,c
  5998  0023C0  101D               	iorwf	??___ftpack+2,w,c
  5999  0023C2  B4D8               	btfsc	status,2,c
  6000  0023C4  D00C               	goto	l1722
  6001  0023C6  D7EC               	goto	l1720
  6002  0023C8  2A19               	incf	___ftpack@exp,f,c
  6003  0023CA  0E01               	movlw	1
  6004  0023CC  2616               	addwf	___ftpack@arg,f,c
  6005  0023CE  0E00               	movlw	0
  6006  0023D0  2217               	addwfc	___ftpack@arg+1,f,c
  6007  0023D2  0E00               	movlw	0
  6008  0023D4  2218               	addwfc	___ftpack@arg+2,f,c
  6009  0023D6  90D8               	bcf	status,0,c
  6010  0023D8  3218               	rrcf	___ftpack@arg+2,f,c
  6011  0023DA  3217               	rrcf	___ftpack@arg+1,f,c
  6012  0023DC  3216               	rrcf	___ftpack@arg,f,c
  6013  0023DE                     l1722:
  6014  0023DE  0E00               	movlw	0
  6015  0023E0  1416               	andwf	___ftpack@arg,w,c
  6016  0023E2  6E1B               	movwf	??___ftpack& (0+255),c
  6017  0023E4  0E00               	movlw	0
  6018  0023E6  1417               	andwf	___ftpack@arg+1,w,c
  6019  0023E8  6E1C               	movwf	(??___ftpack+1)& (0+255),c
  6020  0023EA  0EFF               	movlw	255
  6021  0023EC  1418               	andwf	___ftpack@arg+2,w,c
  6022  0023EE  6E1D               	movwf	(??___ftpack+2)& (0+255),c
  6023  0023F0  501B               	movf	??___ftpack,w,c
  6024  0023F2  101C               	iorwf	??___ftpack+1,w,c
  6025  0023F4  101D               	iorwf	??___ftpack+2,w,c
  6026  0023F6  B4D8               	btfsc	status,2,c
  6027  0023F8  D006               	goto	l1725
  6028  0023FA  D7E6               	goto	l1723
  6029  0023FC  0619               	decf	___ftpack@exp,f,c
  6030  0023FE  90D8               	bcf	status,0,c
  6031  002400  3616               	rlcf	___ftpack@arg,f,c
  6032  002402  3617               	rlcf	___ftpack@arg+1,f,c
  6033  002404  3618               	rlcf	___ftpack@arg+2,f,c
  6034  002406                     l1725:
  6035  002406  BE17               	btfsc	___ftpack@arg+1,7,c
  6036  002408  D003               	goto	u5730
  6037  00240A  0E02               	movlw	2
  6038  00240C  6019               	cpfslt	___ftpack@exp,c
  6039  00240E  D7F6               	goto	l1726
  6040  002410                     u5730:
  6041  002410  A019               	btfss	___ftpack@exp,0,c
  6042  002412  9E17               	bcf	___ftpack@arg+1,7,c
  6043  002414  90D8               	bcf	status,0,c
  6044  002416  3219               	rrcf	___ftpack@exp,f,c
  6045  002418  5019               	movf	___ftpack@exp,w,c
  6046  00241A  1218               	iorwf	___ftpack@arg+2,f,c
  6047  00241C  501A               	movf	___ftpack@sign,w,c
  6048  00241E  A4D8               	btfss	status,2,c
  6049  002420  8E18               	bsf	___ftpack@arg+2,7,c
  6050  002422  C016  F016         	movff	___ftpack@arg,?___ftpack
  6051  002426  C017  F017         	movff	___ftpack@arg+1,?___ftpack+1
  6052  00242A  C018  F018         	movff	___ftpack@arg+2,?___ftpack+2
  6053  00242E  0012               	return	
  6054  002430                     __end_of___ftpack:
  6055                           	opt stack 0
  6056                           tblptru	equ	0xFF8
  6057                           tblptrh	equ	0xFF7
  6058                           tblptrl	equ	0xFF6
  6059                           tablat	equ	0xFF5
  6060                           prodh	equ	0xFF4
  6061                           prodl	equ	0xFF3
  6062                           postinc0	equ	0xFEE
  6063                           wreg	equ	0xFE8
  6064                           indf1	equ	0xFE7
  6065                           fsr1h	equ	0xFE2
  6066                           fsr1l	equ	0xFE1
  6067                           indf2	equ	0xFDF
  6068                           postinc2	equ	0xFDE
  6069                           postdec2	equ	0xFDD
  6070                           fsr2h	equ	0xFDA
  6071                           fsr2l	equ	0xFD9
  6072                           status	equ	0xFD8
  6073                           
  6074 ;; *************** function _WriteDataXLCD *****************
  6075 ;; Defined at:
  6076 ;;		line 16 in file "XLCD/writdata.c"
  6077 ;; Parameters:    Size  Location     Type
  6078 ;;  data            1    wreg     unsigned char 
  6079 ;; Auto vars:     Size  Location     Type
  6080 ;;  data            1   21[COMRAM] unsigned char 
  6081 ;; Return value:  Size  Location     Type
  6082 ;;                  1    wreg      void 
  6083 ;; Registers used:
  6084 ;;		wreg, status,2, status,0, cstack
  6085 ;; Tracked objects:
  6086 ;;		On entry : 0/0
  6087 ;;		On exit  : 0/0
  6088 ;;		Unchanged: 0/0
  6089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6090 ;;      Params:         0       0       0       0       0       0       0       0       0
  6091 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6092 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6093 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6094 ;;Total ram usage:        1 bytes
  6095 ;; Hardware stack levels used:    1
  6096 ;; Hardware stack levels required when called:    4
  6097 ;; This function calls:
  6098 ;;		_DelayFor18TCY
  6099 ;; This function is called by:
  6100 ;;		_main
  6101 ;;		_putrsXLCD
  6102 ;;		_putsXLCD
  6103 ;; This function uses a non-reentrant model
  6104 ;;
  6105                           
  6106                           	psect	text21
  6107  00283A                     __ptext21:
  6108                           	opt stack 0
  6109  00283A                     _WriteDataXLCD:
  6110                           	opt stack 26
  6111                           
  6112                           ;incstack = 0
  6113                           ;WriteDataXLCD@data stored from wreg
  6114  00283A  6E16               	movwf	WriteDataXLCD@data,c
  6115                           
  6116                           ;writdata.c: 35: TRISD &= 0xf0;
  6117  00283C  0EF0               	movlw	240
  6118  00283E  1695               	andwf	3989,f,c	;volatile
  6119                           
  6120                           ;writdata.c: 36: PORTD &= 0xf0;
  6121  002840  0EF0               	movlw	240
  6122  002842  1683               	andwf	3971,f,c	;volatile
  6123                           
  6124                           ;writdata.c: 37: PORTD |= ((data>>4)&0x0f);
  6125  002844  3816               	swapf	WriteDataXLCD@data,w,c
  6126  002846  0B0F               	andlw	15
  6127  002848  0B0F               	andlw	15
  6128  00284A  1283               	iorwf	3971,f,c	;volatile
  6129                           
  6130                           ;writdata.c: 39: LATDbits.LATD4 = 1;
  6131  00284C  888C               	bsf	3980,4,c	;volatile
  6132                           
  6133                           ;writdata.c: 40: LATDbits.LATD5 = 0;
  6134  00284E  9A8C               	bcf	3980,5,c	;volatile
  6135                           
  6136                           ;writdata.c: 41: DelayFor18TCY();
  6137  002850  EC80  F015         	call	_DelayFor18TCY	;wreg free
  6138                           
  6139                           ;writdata.c: 42: LATDbits.LATD6 = 1;
  6140  002854  8C8C               	bsf	3980,6,c	;volatile
  6141                           
  6142                           ;writdata.c: 43: DelayFor18TCY();
  6143  002856  EC80  F015         	call	_DelayFor18TCY	;wreg free
  6144                           
  6145                           ;writdata.c: 44: LATDbits.LATD6 = 0;
  6146  00285A  9C8C               	bcf	3980,6,c	;volatile
  6147                           
  6148                           ;writdata.c: 49: PORTD &= 0xf0;
  6149  00285C  0EF0               	movlw	240
  6150  00285E  1683               	andwf	3971,f,c	;volatile
  6151                           
  6152                           ;writdata.c: 50: PORTD |= (data&0x0f);
  6153  002860  5016               	movf	WriteDataXLCD@data,w,c
  6154  002862  0B0F               	andlw	15
  6155  002864  1283               	iorwf	3971,f,c	;volatile
  6156                           
  6157                           ;writdata.c: 52: DelayFor18TCY();
  6158  002866  EC80  F015         	call	_DelayFor18TCY	;wreg free
  6159                           
  6160                           ;writdata.c: 53: LATDbits.LATD6 = 1;
  6161  00286A  8C8C               	bsf	3980,6,c	;volatile
  6162                           
  6163                           ;writdata.c: 54: DelayFor18TCY();
  6164  00286C  EC80  F015         	call	_DelayFor18TCY	;wreg free
  6165                           
  6166                           ;writdata.c: 55: LATDbits.LATD6 = 0;
  6167  002870  9C8C               	bcf	3980,6,c	;volatile
  6168                           
  6169                           ;writdata.c: 59: TRISD |= 0x0f;
  6170  002872  0E0F               	movlw	15
  6171  002874  1295               	iorwf	3989,f,c	;volatile
  6172  002876  0012               	return	
  6173  002878                     __end_of_WriteDataXLCD:
  6174                           	opt stack 0
  6175                           tblptru	equ	0xFF8
  6176                           tblptrh	equ	0xFF7
  6177                           tblptrl	equ	0xFF6
  6178                           tablat	equ	0xFF5
  6179                           prodh	equ	0xFF4
  6180                           prodl	equ	0xFF3
  6181                           postinc0	equ	0xFEE
  6182                           wreg	equ	0xFE8
  6183                           indf1	equ	0xFE7
  6184                           fsr1h	equ	0xFE2
  6185                           fsr1l	equ	0xFE1
  6186                           indf2	equ	0xFDF
  6187                           postinc2	equ	0xFDE
  6188                           postdec2	equ	0xFDD
  6189                           fsr2h	equ	0xFDA
  6190                           fsr2l	equ	0xFD9
  6191                           status	equ	0xFD8
  6192                           
  6193 ;; *************** function _SYSTEM_Initialize *****************
  6194 ;; Defined at:
  6195 ;;		line 77 in file "mcc.c"
  6196 ;; Parameters:    Size  Location     Type
  6197 ;;		None
  6198 ;; Auto vars:     Size  Location     Type
  6199 ;;		None
  6200 ;; Return value:  Size  Location     Type
  6201 ;;                  1    wreg      void 
  6202 ;; Registers used:
  6203 ;;		wreg, status,2, status,0, cstack
  6204 ;; Tracked objects:
  6205 ;;		On entry : 0/0
  6206 ;;		On exit  : 0/0
  6207 ;;		Unchanged: 0/0
  6208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6209 ;;      Params:         0       0       0       0       0       0       0       0       0
  6210 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6211 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6212 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6213 ;;Total ram usage:        0 bytes
  6214 ;; Hardware stack levels used:    1
  6215 ;; Hardware stack levels required when called:    7
  6216 ;; This function calls:
  6217 ;;		_ADC_Initialize
  6218 ;;		_OSCILLATOR_Initialize
  6219 ;;		_PIN_MANAGER_Initialize
  6220 ;;		_XLCD_Initialize
  6221 ;; This function is called by:
  6222 ;;		_main
  6223 ;; This function uses a non-reentrant model
  6224 ;;
  6225                           
  6226                           	psect	text22
  6227  002ABC                     __ptext22:
  6228                           	opt stack 0
  6229  002ABC                     _SYSTEM_Initialize:
  6230                           	opt stack 23
  6231                           
  6232                           ;mcc.c: 81: PIN_MANAGER_Initialize();
  6233                           
  6234                           ;incstack = 0
  6235  002ABC  EC70  F015         	call	_PIN_MANAGER_Initialize	;wreg free
  6236                           
  6237                           ;mcc.c: 82: OSCILLATOR_Initialize();
  6238  002AC0  EC76  F015         	call	_OSCILLATOR_Initialize	;wreg free
  6239                           
  6240                           ;mcc.c: 83: XLCD_Initialize();
  6241  002AC4  EC5B  F014         	call	_XLCD_Initialize	;wreg free
  6242                           
  6243                           ;mcc.c: 86: ADC_Initialize();
  6244  002AC8  EC3B  F015         	call	_ADC_Initialize	;wreg free
  6245  002ACC  0012               	return		;funcret
  6246  002ACE                     __end_of_SYSTEM_Initialize:
  6247                           	opt stack 0
  6248                           tblptru	equ	0xFF8
  6249                           tblptrh	equ	0xFF7
  6250                           tblptrl	equ	0xFF6
  6251                           tablat	equ	0xFF5
  6252                           prodh	equ	0xFF4
  6253                           prodl	equ	0xFF3
  6254                           postinc0	equ	0xFEE
  6255                           wreg	equ	0xFE8
  6256                           indf1	equ	0xFE7
  6257                           fsr1h	equ	0xFE2
  6258                           fsr1l	equ	0xFE1
  6259                           indf2	equ	0xFDF
  6260                           postinc2	equ	0xFDE
  6261                           postdec2	equ	0xFDD
  6262                           fsr2h	equ	0xFDA
  6263                           fsr2l	equ	0xFD9
  6264                           status	equ	0xFD8
  6265                           
  6266 ;; *************** function _XLCD_Initialize *****************
  6267 ;; Defined at:
  6268 ;;		line 6 in file "user_xlcd.c"
  6269 ;; Parameters:    Size  Location     Type
  6270 ;;		None
  6271 ;; Auto vars:     Size  Location     Type
  6272 ;;		None
  6273 ;; Return value:  Size  Location     Type
  6274 ;;                  1    wreg      void 
  6275 ;; Registers used:
  6276 ;;		wreg, status,2, status,0, cstack
  6277 ;; Tracked objects:
  6278 ;;		On entry : 0/0
  6279 ;;		On exit  : 0/0
  6280 ;;		Unchanged: 0/0
  6281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6282 ;;      Params:         0       0       0       0       0       0       0       0       0
  6283 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6284 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6285 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6286 ;;Total ram usage:        0 bytes
  6287 ;; Hardware stack levels used:    1
  6288 ;; Hardware stack levels required when called:    6
  6289 ;; This function calls:
  6290 ;;		_BusyXLCD
  6291 ;;		_OpenXLCD
  6292 ;;		_SetDDRamAddr
  6293 ;;		_WriteCmdXLCD
  6294 ;; This function is called by:
  6295 ;;		_SYSTEM_Initialize
  6296 ;; This function uses a non-reentrant model
  6297 ;;
  6298                           
  6299                           	psect	text23
  6300  0028B6                     __ptext23:
  6301                           	opt stack 0
  6302  0028B6                     _XLCD_Initialize:
  6303                           	opt stack 23
  6304                           
  6305                           ;user_xlcd.c: 11: TRISDbits.TRISD7 = 0;
  6306                           
  6307                           ;incstack = 0
  6308  0028B6  9E95               	bcf	3989,7,c	;volatile
  6309                           
  6310                           ;user_xlcd.c: 12: LATDbits.LATD7 = 1;
  6311  0028B8  8E8C               	bsf	3980,7,c	;volatile
  6312                           
  6313                           ;user_xlcd.c: 15: OpenXLCD(0b00101100 & 0b00111000);
  6314  0028BA  0E28               	movlw	40
  6315  0028BC  EC18  F012         	call	_OpenXLCD
  6316  0028C0  EC79  F014         	call	_BusyXLCD	;wreg free
  6317  0028C4  0900               	iorlw	0
  6318  0028C6  A4D8               	btfss	status,2,c
  6319  0028C8  D7FB               	goto	l891
  6320                           
  6321                           ;user_xlcd.c: 18: WriteCmdXLCD(0b00001111 & 0b00001111 & 0b00001111);
  6322  0028CA  0E0F               	movlw	15
  6323  0028CC  EC3C  F014         	call	_WriteCmdXLCD
  6324  0028D0  EC79  F014         	call	_BusyXLCD	;wreg free
  6325  0028D4  0900               	iorlw	0
  6326  0028D6  A4D8               	btfss	status,2,c
  6327  0028D8  D7FB               	goto	l894
  6328                           
  6329                           ;user_xlcd.c: 21: WriteCmdXLCD(0b00000110);
  6330  0028DA  0E06               	movlw	6
  6331  0028DC  EC3C  F014         	call	_WriteCmdXLCD
  6332  0028E0  EC79  F014         	call	_BusyXLCD	;wreg free
  6333  0028E4  0900               	iorlw	0
  6334  0028E6  A4D8               	btfss	status,2,c
  6335  0028E8  D7FB               	goto	l897
  6336                           
  6337                           ;user_xlcd.c: 24: SetDDRamAddr(0x0);
  6338  0028EA  0E00               	movlw	0
  6339  0028EC  ECCE  F013         	call	_SetDDRamAddr
  6340  0028F0  0012               	return		;funcret
  6341  0028F2                     __end_of_XLCD_Initialize:
  6342                           	opt stack 0
  6343                           tblptru	equ	0xFF8
  6344                           tblptrh	equ	0xFF7
  6345                           tblptrl	equ	0xFF6
  6346                           tablat	equ	0xFF5
  6347                           prodh	equ	0xFF4
  6348                           prodl	equ	0xFF3
  6349                           postinc0	equ	0xFEE
  6350                           wreg	equ	0xFE8
  6351                           indf1	equ	0xFE7
  6352                           fsr1h	equ	0xFE2
  6353                           fsr1l	equ	0xFE1
  6354                           indf2	equ	0xFDF
  6355                           postinc2	equ	0xFDE
  6356                           postdec2	equ	0xFDD
  6357                           fsr2h	equ	0xFDA
  6358                           fsr2l	equ	0xFD9
  6359                           status	equ	0xFD8
  6360                           
  6361 ;; *************** function _OpenXLCD *****************
  6362 ;; Defined at:
  6363 ;;		line 19 in file "XLCD/openxlcd.c"
  6364 ;; Parameters:    Size  Location     Type
  6365 ;;  lcdtype         1    wreg     unsigned char 
  6366 ;; Auto vars:     Size  Location     Type
  6367 ;;  lcdtype         1   25[COMRAM] unsigned char 
  6368 ;; Return value:  Size  Location     Type
  6369 ;;                  1    wreg      void 
  6370 ;; Registers used:
  6371 ;;		wreg, status,2, status,0, cstack
  6372 ;; Tracked objects:
  6373 ;;		On entry : 0/0
  6374 ;;		On exit  : 0/0
  6375 ;;		Unchanged: 0/0
  6376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6377 ;;      Params:         0       0       0       0       0       0       0       0       0
  6378 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6379 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6380 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6381 ;;Total ram usage:        1 bytes
  6382 ;; Hardware stack levels used:    1
  6383 ;; Hardware stack levels required when called:    5
  6384 ;; This function calls:
  6385 ;;		_BusyXLCD
  6386 ;;		_Delay10KTCYx
  6387 ;;		_DelayPORXLCD
  6388 ;;		_SetDDRamAddr
  6389 ;;		_WriteCmdXLCD
  6390 ;; This function is called by:
  6391 ;;		_XLCD_Initialize
  6392 ;; This function uses a non-reentrant model
  6393 ;;
  6394                           
  6395                           	psect	text24
  6396  002430                     __ptext24:
  6397                           	opt stack 0
  6398  002430                     _OpenXLCD:
  6399                           	opt stack 23
  6400                           
  6401                           ;incstack = 0
  6402                           ;OpenXLCD@lcdtype stored from wreg
  6403  002430  6E1A               	movwf	OpenXLCD@lcdtype,c
  6404                           
  6405                           ;openxlcd.c: 31: PORTD &= 0xf0;
  6406  002432  0EF0               	movlw	240
  6407  002434  1683               	andwf	3971,f,c	;volatile
  6408                           
  6409                           ;openxlcd.c: 32: TRISD &= 0xF0;
  6410  002436  0EF0               	movlw	240
  6411  002438  1695               	andwf	3989,f,c	;volatile
  6412                           
  6413                           ;openxlcd.c: 35: TRISDbits.TRISD5 = 0;
  6414  00243A  9A95               	bcf	3989,5,c	;volatile
  6415                           
  6416                           ;openxlcd.c: 36: TRISDbits.TRISD4 = 0;
  6417  00243C  9895               	bcf	3989,4,c	;volatile
  6418                           
  6419                           ;openxlcd.c: 37: TRISDbits.TRISD6 = 0;
  6420  00243E  9C95               	bcf	3989,6,c	;volatile
  6421                           
  6422                           ;openxlcd.c: 38: LATDbits.LATD5 = 0;
  6423  002440  9A8C               	bcf	3980,5,c	;volatile
  6424                           
  6425                           ;openxlcd.c: 39: LATDbits.LATD4 = 0;
  6426  002442  988C               	bcf	3980,4,c	;volatile
  6427                           
  6428                           ;openxlcd.c: 40: LATDbits.LATD6 = 0;
  6429  002444  9C8C               	bcf	3980,6,c	;volatile
  6430                           
  6431                           ;openxlcd.c: 43: DelayPORXLCD();
  6432  002446  EC67  F015         	call	_DelayPORXLCD	;wreg free
  6433                           
  6434                           ;openxlcd.c: 45: WriteCmdXLCD(0x30);
  6435  00244A  0E30               	movlw	48
  6436  00244C  EC3C  F014         	call	_WriteCmdXLCD
  6437                           
  6438                           ;openxlcd.c: 46: Delay10KTCYx(0x05);
  6439  002450  0E05               	movlw	5
  6440  002452  EC53  F015         	call	_Delay10KTCYx
  6441                           
  6442                           ;openxlcd.c: 48: WriteCmdXLCD(0x30);
  6443  002456  0E30               	movlw	48
  6444  002458  EC3C  F014         	call	_WriteCmdXLCD
  6445                           
  6446                           ;openxlcd.c: 49: Delay10KTCYx(0x01);
  6447  00245C  0E01               	movlw	1
  6448  00245E  EC53  F015         	call	_Delay10KTCYx
  6449                           
  6450                           ;openxlcd.c: 52: WriteCmdXLCD(0x32);
  6451  002462  0E32               	movlw	50
  6452  002464  EC3C  F014         	call	_WriteCmdXLCD
  6453  002468  EC79  F014         	call	_BusyXLCD	;wreg free
  6454  00246C  0900               	iorlw	0
  6455  00246E  A4D8               	btfss	status,2,c
  6456  002470  D7FB               	goto	l65
  6457  002472                     u5760:
  6458                           
  6459                           ;openxlcd.c: 58: while(BusyXLCD());
  6460  002472  EC79  F014         	call	_BusyXLCD	;wreg free
  6461  002476  0900               	iorlw	0
  6462  002478  A4D8               	btfss	status,2,c
  6463  00247A  D7FB               	goto	u5760
  6464                           
  6465                           ;openxlcd.c: 59: WriteCmdXLCD(lcdtype);
  6466  00247C  501A               	movf	OpenXLCD@lcdtype,w,c
  6467  00247E  EC3C  F014         	call	_WriteCmdXLCD
  6468  002482  EC79  F014         	call	_BusyXLCD	;wreg free
  6469  002486  0900               	iorlw	0
  6470  002488  A4D8               	btfss	status,2,c
  6471  00248A  D7FB               	goto	l71
  6472                           
  6473                           ;openxlcd.c: 63: WriteCmdXLCD(0b00001011&0b00001101&0b00001110);
  6474  00248C  0E08               	movlw	8
  6475  00248E  EC3C  F014         	call	_WriteCmdXLCD
  6476  002492  EC79  F014         	call	_BusyXLCD	;wreg free
  6477  002496  0900               	iorlw	0
  6478  002498  A4D8               	btfss	status,2,c
  6479  00249A  D7FB               	goto	l74
  6480                           
  6481                           ;openxlcd.c: 65: WriteCmdXLCD(0b00001111&0b00001111&0b00001111);
  6482  00249C  0E0F               	movlw	15
  6483  00249E  EC3C  F014         	call	_WriteCmdXLCD
  6484  0024A2  EC79  F014         	call	_BusyXLCD	;wreg free
  6485  0024A6  0900               	iorlw	0
  6486  0024A8  A4D8               	btfss	status,2,c
  6487  0024AA  D7FB               	goto	l77
  6488                           
  6489                           ;openxlcd.c: 69: WriteCmdXLCD(0x01);
  6490  0024AC  0E01               	movlw	1
  6491  0024AE  EC3C  F014         	call	_WriteCmdXLCD
  6492  0024B2  EC79  F014         	call	_BusyXLCD	;wreg free
  6493  0024B6  0900               	iorlw	0
  6494  0024B8  A4D8               	btfss	status,2,c
  6495  0024BA  D7FB               	goto	l80
  6496                           
  6497                           ;openxlcd.c: 73: WriteCmdXLCD(0b00000100);
  6498  0024BC  0E04               	movlw	4
  6499  0024BE  EC3C  F014         	call	_WriteCmdXLCD
  6500  0024C2  EC79  F014         	call	_BusyXLCD	;wreg free
  6501  0024C6  0900               	iorlw	0
  6502  0024C8  A4D8               	btfss	status,2,c
  6503  0024CA  D7FB               	goto	l83
  6504                           
  6505                           ;openxlcd.c: 77: SetDDRamAddr(0x80);
  6506  0024CC  0E80               	movlw	128
  6507  0024CE  ECCE  F013         	call	_SetDDRamAddr
  6508  0024D2  0012               	return	
  6509  0024D4                     __end_of_OpenXLCD:
  6510                           	opt stack 0
  6511                           tblptru	equ	0xFF8
  6512                           tblptrh	equ	0xFF7
  6513                           tblptrl	equ	0xFF6
  6514                           tablat	equ	0xFF5
  6515                           prodh	equ	0xFF4
  6516                           prodl	equ	0xFF3
  6517                           postinc0	equ	0xFEE
  6518                           wreg	equ	0xFE8
  6519                           indf1	equ	0xFE7
  6520                           fsr1h	equ	0xFE2
  6521                           fsr1l	equ	0xFE1
  6522                           indf2	equ	0xFDF
  6523                           postinc2	equ	0xFDE
  6524                           postdec2	equ	0xFDD
  6525                           fsr2h	equ	0xFDA
  6526                           fsr2l	equ	0xFD9
  6527                           status	equ	0xFD8
  6528                           
  6529 ;; *************** function _WriteCmdXLCD *****************
  6530 ;; Defined at:
  6531 ;;		line 13 in file "XLCD/wcmdxlcd.c"
  6532 ;; Parameters:    Size  Location     Type
  6533 ;;  cmd             1    wreg     unsigned char 
  6534 ;; Auto vars:     Size  Location     Type
  6535 ;;  cmd             1   21[COMRAM] unsigned char 
  6536 ;; Return value:  Size  Location     Type
  6537 ;;                  1    wreg      void 
  6538 ;; Registers used:
  6539 ;;		wreg, status,2, status,0, cstack
  6540 ;; Tracked objects:
  6541 ;;		On entry : 0/0
  6542 ;;		On exit  : 0/0
  6543 ;;		Unchanged: 0/0
  6544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6545 ;;      Params:         0       0       0       0       0       0       0       0       0
  6546 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6547 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6548 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6549 ;;Total ram usage:        1 bytes
  6550 ;; Hardware stack levels used:    1
  6551 ;; Hardware stack levels required when called:    4
  6552 ;; This function calls:
  6553 ;;		_DelayFor18TCY
  6554 ;; This function is called by:
  6555 ;;		_OpenXLCD
  6556 ;;		_main
  6557 ;;		_XLCD_Initialize
  6558 ;; This function uses a non-reentrant model
  6559 ;;
  6560                           
  6561                           	psect	text25
  6562  002878                     __ptext25:
  6563                           	opt stack 0
  6564  002878                     _WriteCmdXLCD:
  6565                           	opt stack 26
  6566                           
  6567                           ;incstack = 0
  6568                           ;WriteCmdXLCD@cmd stored from wreg
  6569  002878  6E16               	movwf	WriteCmdXLCD@cmd,c
  6570                           
  6571                           ;wcmdxlcd.c: 32: TRISD &= 0xf0;
  6572  00287A  0EF0               	movlw	240
  6573  00287C  1695               	andwf	3989,f,c	;volatile
  6574                           
  6575                           ;wcmdxlcd.c: 33: PORTD &= 0xf0;
  6576  00287E  0EF0               	movlw	240
  6577  002880  1683               	andwf	3971,f,c	;volatile
  6578                           
  6579                           ;wcmdxlcd.c: 34: PORTD |= (cmd>>4)&0x0f;
  6580  002882  3816               	swapf	WriteCmdXLCD@cmd,w,c
  6581  002884  0B0F               	andlw	15
  6582  002886  0B0F               	andlw	15
  6583  002888  1283               	iorwf	3971,f,c	;volatile
  6584                           
  6585                           ;wcmdxlcd.c: 36: LATDbits.LATD5 = 0;
  6586  00288A  9A8C               	bcf	3980,5,c	;volatile
  6587                           
  6588                           ;wcmdxlcd.c: 37: LATDbits.LATD4 = 0;
  6589  00288C  988C               	bcf	3980,4,c	;volatile
  6590                           
  6591                           ;wcmdxlcd.c: 38: DelayFor18TCY();
  6592  00288E  EC80  F015         	call	_DelayFor18TCY	;wreg free
  6593                           
  6594                           ;wcmdxlcd.c: 39: LATDbits.LATD6 = 1;
  6595  002892  8C8C               	bsf	3980,6,c	;volatile
  6596                           
  6597                           ;wcmdxlcd.c: 40: DelayFor18TCY();
  6598  002894  EC80  F015         	call	_DelayFor18TCY	;wreg free
  6599                           
  6600                           ;wcmdxlcd.c: 41: LATDbits.LATD6 = 0;
  6601  002898  9C8C               	bcf	3980,6,c	;volatile
  6602                           
  6603                           ;wcmdxlcd.c: 46: PORTD &= 0xf0;
  6604  00289A  0EF0               	movlw	240
  6605  00289C  1683               	andwf	3971,f,c	;volatile
  6606                           
  6607                           ;wcmdxlcd.c: 47: PORTD |= cmd&0x0f;
  6608  00289E  5016               	movf	WriteCmdXLCD@cmd,w,c
  6609  0028A0  0B0F               	andlw	15
  6610  0028A2  1283               	iorwf	3971,f,c	;volatile
  6611                           
  6612                           ;wcmdxlcd.c: 49: DelayFor18TCY();
  6613  0028A4  EC80  F015         	call	_DelayFor18TCY	;wreg free
  6614                           
  6615                           ;wcmdxlcd.c: 50: LATDbits.LATD6 = 1;
  6616  0028A8  8C8C               	bsf	3980,6,c	;volatile
  6617                           
  6618                           ;wcmdxlcd.c: 51: DelayFor18TCY();
  6619  0028AA  EC80  F015         	call	_DelayFor18TCY	;wreg free
  6620                           
  6621                           ;wcmdxlcd.c: 52: LATDbits.LATD6 = 0;
  6622  0028AE  9C8C               	bcf	3980,6,c	;volatile
  6623                           
  6624                           ;wcmdxlcd.c: 56: TRISD |= 0x0f;
  6625  0028B0  0E0F               	movlw	15
  6626  0028B2  1295               	iorwf	3989,f,c	;volatile
  6627  0028B4  0012               	return	
  6628  0028B6                     __end_of_WriteCmdXLCD:
  6629                           	opt stack 0
  6630                           tblptru	equ	0xFF8
  6631                           tblptrh	equ	0xFF7
  6632                           tblptrl	equ	0xFF6
  6633                           tablat	equ	0xFF5
  6634                           prodh	equ	0xFF4
  6635                           prodl	equ	0xFF3
  6636                           postinc0	equ	0xFEE
  6637                           wreg	equ	0xFE8
  6638                           indf1	equ	0xFE7
  6639                           fsr1h	equ	0xFE2
  6640                           fsr1l	equ	0xFE1
  6641                           indf2	equ	0xFDF
  6642                           postinc2	equ	0xFDE
  6643                           postdec2	equ	0xFDD
  6644                           fsr2h	equ	0xFDA
  6645                           fsr2l	equ	0xFD9
  6646                           status	equ	0xFD8
  6647                           
  6648 ;; *************** function _SetDDRamAddr *****************
  6649 ;; Defined at:
  6650 ;;		line 13 in file "XLCD/setddram.c"
  6651 ;; Parameters:    Size  Location     Type
  6652 ;;  DDaddr          1    wreg     unsigned char 
  6653 ;; Auto vars:     Size  Location     Type
  6654 ;;  DDaddr          1   24[COMRAM] unsigned char 
  6655 ;; Return value:  Size  Location     Type
  6656 ;;                  1    wreg      void 
  6657 ;; Registers used:
  6658 ;;		wreg, status,2, status,0, cstack
  6659 ;; Tracked objects:
  6660 ;;		On entry : 0/0
  6661 ;;		On exit  : 0/0
  6662 ;;		Unchanged: 0/0
  6663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6664 ;;      Params:         0       0       0       0       0       0       0       0       0
  6665 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6666 ;;      Temps:          3       0       0       0       0       0       0       0       0
  6667 ;;      Totals:         4       0       0       0       0       0       0       0       0
  6668 ;;Total ram usage:        4 bytes
  6669 ;; Hardware stack levels used:    1
  6670 ;; Hardware stack levels required when called:    4
  6671 ;; This function calls:
  6672 ;;		_DelayFor18TCY
  6673 ;; This function is called by:
  6674 ;;		_OpenXLCD
  6675 ;;		_main
  6676 ;;		_XLCD_Initialize
  6677 ;; This function uses a non-reentrant model
  6678 ;;
  6679                           
  6680                           	psect	text26
  6681  00279C                     __ptext26:
  6682                           	opt stack 0
  6683  00279C                     _SetDDRamAddr:
  6684                           	opt stack 26
  6685                           
  6686                           ;incstack = 0
  6687                           ;SetDDRamAddr@DDaddr stored from wreg
  6688  00279C  6E19               	movwf	SetDDRamAddr@DDaddr,c
  6689                           
  6690                           ;setddram.c: 32: TRISD &= 0xf0;
  6691  00279E  0EF0               	movlw	240
  6692  0027A0  1695               	andwf	3989,f,c	;volatile
  6693                           
  6694                           ;setddram.c: 33: PORTD &= 0xf0;
  6695  0027A2  0EF0               	movlw	240
  6696  0027A4  1683               	andwf	3971,f,c	;volatile
  6697                           
  6698                           ;setddram.c: 34: PORTD |= (((DDaddr | 0b10000000)>>4) & 0x0f);
  6699  0027A6  5019               	movf	SetDDRamAddr@DDaddr,w,c
  6700  0027A8  6E16               	movwf	??_SetDDRamAddr& (0+255),c
  6701  0027AA  6A17               	clrf	(??_SetDDRamAddr+1)& (0+255),c
  6702  0027AC  8E16               	bsf	??_SetDDRamAddr,7,c
  6703  0027AE  0E04               	movlw	4
  6704  0027B0  6E18               	movwf	(??_SetDDRamAddr+2)& (0+255),c
  6705  0027B2                     u5675:
  6706  0027B2  3417               	rlcf	??_SetDDRamAddr+1,w,c
  6707  0027B4  3217               	rrcf	??_SetDDRamAddr+1,f,c
  6708  0027B6  3216               	rrcf	??_SetDDRamAddr,f,c
  6709  0027B8  2E18               	decfsz	(??_SetDDRamAddr+2)& (0+255),f,c
  6710  0027BA  D7FB               	goto	u5675
  6711  0027BC  5016               	movf	??_SetDDRamAddr,w,c
  6712  0027BE  0B0F               	andlw	15
  6713  0027C0  1283               	iorwf	3971,f,c	;volatile
  6714                           
  6715                           ;setddram.c: 36: LATDbits.LATD5 = 0;
  6716  0027C2  9A8C               	bcf	3980,5,c	;volatile
  6717                           
  6718                           ;setddram.c: 37: LATDbits.LATD4 = 0;
  6719  0027C4  988C               	bcf	3980,4,c	;volatile
  6720                           
  6721                           ;setddram.c: 38: DelayFor18TCY();
  6722  0027C6  EC80  F015         	call	_DelayFor18TCY	;wreg free
  6723                           
  6724                           ;setddram.c: 39: LATDbits.LATD6 = 1;
  6725  0027CA  8C8C               	bsf	3980,6,c	;volatile
  6726                           
  6727                           ;setddram.c: 40: DelayFor18TCY();
  6728  0027CC  EC80  F015         	call	_DelayFor18TCY	;wreg free
  6729                           
  6730                           ;setddram.c: 41: LATDbits.LATD6 = 0;
  6731  0027D0  9C8C               	bcf	3980,6,c	;volatile
  6732                           
  6733                           ;setddram.c: 46: PORTD &= 0xf0;
  6734  0027D2  0EF0               	movlw	240
  6735  0027D4  1683               	andwf	3971,f,c	;volatile
  6736                           
  6737                           ;setddram.c: 47: PORTD |= (DDaddr&0x0f);
  6738  0027D6  5019               	movf	SetDDRamAddr@DDaddr,w,c
  6739  0027D8  0B0F               	andlw	15
  6740  0027DA  1283               	iorwf	3971,f,c	;volatile
  6741                           
  6742                           ;setddram.c: 49: DelayFor18TCY();
  6743  0027DC  EC80  F015         	call	_DelayFor18TCY	;wreg free
  6744                           
  6745                           ;setddram.c: 50: LATDbits.LATD6 = 1;
  6746  0027E0  8C8C               	bsf	3980,6,c	;volatile
  6747                           
  6748                           ;setddram.c: 51: DelayFor18TCY();
  6749  0027E2  EC80  F015         	call	_DelayFor18TCY	;wreg free
  6750                           
  6751                           ;setddram.c: 52: LATDbits.LATD6 = 0;
  6752  0027E6  9C8C               	bcf	3980,6,c	;volatile
  6753                           
  6754                           ;setddram.c: 56: TRISD |= 0x0f;
  6755  0027E8  0E0F               	movlw	15
  6756  0027EA  1295               	iorwf	3989,f,c	;volatile
  6757  0027EC  0012               	return	
  6758  0027EE                     __end_of_SetDDRamAddr:
  6759                           	opt stack 0
  6760                           tblptru	equ	0xFF8
  6761                           tblptrh	equ	0xFF7
  6762                           tblptrl	equ	0xFF6
  6763                           tablat	equ	0xFF5
  6764                           prodh	equ	0xFF4
  6765                           prodl	equ	0xFF3
  6766                           postinc0	equ	0xFEE
  6767                           wreg	equ	0xFE8
  6768                           indf1	equ	0xFE7
  6769                           fsr1h	equ	0xFE2
  6770                           fsr1l	equ	0xFE1
  6771                           indf2	equ	0xFDF
  6772                           postinc2	equ	0xFDE
  6773                           postdec2	equ	0xFDD
  6774                           fsr2h	equ	0xFDA
  6775                           fsr2l	equ	0xFD9
  6776                           status	equ	0xFD8
  6777                           
  6778 ;; *************** function _DelayPORXLCD *****************
  6779 ;; Defined at:
  6780 ;;		line 34 in file "user_xlcd.c"
  6781 ;; Parameters:    Size  Location     Type
  6782 ;;		None
  6783 ;; Auto vars:     Size  Location     Type
  6784 ;;		None
  6785 ;; Return value:  Size  Location     Type
  6786 ;;                  1    wreg      void 
  6787 ;; Registers used:
  6788 ;;		wreg
  6789 ;; Tracked objects:
  6790 ;;		On entry : 0/0
  6791 ;;		On exit  : 0/0
  6792 ;;		Unchanged: 0/0
  6793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6794 ;;      Params:         0       0       0       0       0       0       0       0       0
  6795 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6796 ;;      Temps:          1       0       0       0       0       0       0       0       0
  6797 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6798 ;;Total ram usage:        1 bytes
  6799 ;; Hardware stack levels used:    1
  6800 ;; Hardware stack levels required when called:    3
  6801 ;; This function calls:
  6802 ;;		Nothing
  6803 ;; This function is called by:
  6804 ;;		_OpenXLCD
  6805 ;; This function uses a non-reentrant model
  6806 ;;
  6807                           
  6808                           	psect	text27
  6809  002ACE                     __ptext27:
  6810                           	opt stack 0
  6811  002ACE                     _DelayPORXLCD:
  6812                           	opt stack 24
  6813                           
  6814                           ;user_xlcd.c: 37: _delay((unsigned long)((15)*(24000000ul/4000.0)));
  6815                           
  6816                           ;incstack = 0
  6817  002ACE  0E75               	movlw	117
  6818  002AD0  6E16               	movwf	??_DelayPORXLCD& (0+255),c
  6819  002AD2  0EE1               	movlw	225
  6820  002AD4                     u7237:
  6821  002AD4  2EE8               	decfsz	wreg,f,c
  6822  002AD6  D7FE               	bra	u7237
  6823  002AD8  2E16               	decfsz	??_DelayPORXLCD& (0+255),f,c
  6824  002ADA  D7FC               	bra	u7237
  6825  002ADC  F000               	nop	
  6826  002ADE  0012               	return		;funcret
  6827  002AE0                     __end_of_DelayPORXLCD:
  6828                           	opt stack 0
  6829                           tblptru	equ	0xFF8
  6830                           tblptrh	equ	0xFF7
  6831                           tblptrl	equ	0xFF6
  6832                           tablat	equ	0xFF5
  6833                           prodh	equ	0xFF4
  6834                           prodl	equ	0xFF3
  6835                           postinc0	equ	0xFEE
  6836                           wreg	equ	0xFE8
  6837                           indf1	equ	0xFE7
  6838                           fsr1h	equ	0xFE2
  6839                           fsr1l	equ	0xFE1
  6840                           indf2	equ	0xFDF
  6841                           postinc2	equ	0xFDE
  6842                           postdec2	equ	0xFDD
  6843                           fsr2h	equ	0xFDA
  6844                           fsr2l	equ	0xFD9
  6845                           status	equ	0xFD8
  6846                           
  6847 ;; *************** function _Delay10KTCYx *****************
  6848 ;; Defined at:
  6849 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\pic18\d10ktcyx.c"
  6850 ;; Parameters:    Size  Location     Type
  6851 ;;  unit            1    wreg     unsigned char 
  6852 ;; Auto vars:     Size  Location     Type
  6853 ;;  unit            1   22[COMRAM] unsigned char 
  6854 ;; Return value:  Size  Location     Type
  6855 ;;                  1    wreg      void 
  6856 ;; Registers used:
  6857 ;;		wreg
  6858 ;; Tracked objects:
  6859 ;;		On entry : 0/0
  6860 ;;		On exit  : 0/0
  6861 ;;		Unchanged: 0/0
  6862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6863 ;;      Params:         0       0       0       0       0       0       0       0       0
  6864 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6865 ;;      Temps:          1       0       0       0       0       0       0       0       0
  6866 ;;      Totals:         2       0       0       0       0       0       0       0       0
  6867 ;;Total ram usage:        2 bytes
  6868 ;; Hardware stack levels used:    1
  6869 ;; Hardware stack levels required when called:    3
  6870 ;; This function calls:
  6871 ;;		Nothing
  6872 ;; This function is called by:
  6873 ;;		_OpenXLCD
  6874 ;; This function uses a non-reentrant model
  6875 ;;
  6876                           
  6877                           	psect	text28
  6878  002AA6                     __ptext28:
  6879                           	opt stack 0
  6880  002AA6                     _Delay10KTCYx:
  6881                           	opt stack 24
  6882                           
  6883                           ;incstack = 0
  6884                           ;Delay10KTCYx@unit stored from wreg
  6885  002AA6  6E17               	movwf	Delay10KTCYx@unit,c
  6886  002AA8                     l1682:
  6887  002AA8  0E0D               	movlw	13
  6888  002AAA  6E16               	movwf	??_Delay10KTCYx& (0+255),c
  6889  002AAC  0EFC               	movlw	252
  6890  002AAE                     u7247:
  6891  002AAE  2EE8               	decfsz	wreg,f,c
  6892  002AB0  D7FE               	bra	u7247
  6893  002AB2  2E16               	decfsz	??_Delay10KTCYx& (0+255),f,c
  6894  002AB4  D7FC               	bra	u7247
  6895  002AB6  2E17               	decfsz	Delay10KTCYx@unit,f,c
  6896  002AB8  D7F7               	goto	l1682
  6897  002ABA  0012               	return	
  6898  002ABC                     __end_of_Delay10KTCYx:
  6899                           	opt stack 0
  6900                           tblptru	equ	0xFF8
  6901                           tblptrh	equ	0xFF7
  6902                           tblptrl	equ	0xFF6
  6903                           tablat	equ	0xFF5
  6904                           prodh	equ	0xFF4
  6905                           prodl	equ	0xFF3
  6906                           postinc0	equ	0xFEE
  6907                           wreg	equ	0xFE8
  6908                           indf1	equ	0xFE7
  6909                           fsr1h	equ	0xFE2
  6910                           fsr1l	equ	0xFE1
  6911                           indf2	equ	0xFDF
  6912                           postinc2	equ	0xFDE
  6913                           postdec2	equ	0xFDD
  6914                           fsr2h	equ	0xFDA
  6915                           fsr2l	equ	0xFD9
  6916                           status	equ	0xFD8
  6917                           
  6918 ;; *************** function _BusyXLCD *****************
  6919 ;; Defined at:
  6920 ;;		line 11 in file "XLCD/busyxlcd.c"
  6921 ;; Parameters:    Size  Location     Type
  6922 ;;		None
  6923 ;; Auto vars:     Size  Location     Type
  6924 ;;		None
  6925 ;; Return value:  Size  Location     Type
  6926 ;;                  1    wreg      unsigned char 
  6927 ;; Registers used:
  6928 ;;		wreg, cstack
  6929 ;; Tracked objects:
  6930 ;;		On entry : 0/0
  6931 ;;		On exit  : 0/0
  6932 ;;		Unchanged: 0/0
  6933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6934 ;;      Params:         0       0       0       0       0       0       0       0       0
  6935 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6936 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6937 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6938 ;;Total ram usage:        0 bytes
  6939 ;; Hardware stack levels used:    1
  6940 ;; Hardware stack levels required when called:    4
  6941 ;; This function calls:
  6942 ;;		_DelayFor18TCY
  6943 ;; This function is called by:
  6944 ;;		_OpenXLCD
  6945 ;;		_main
  6946 ;;		_XLCD_Initialize
  6947 ;;		_putrsXLCD
  6948 ;;		_putsXLCD
  6949 ;; This function uses a non-reentrant model
  6950 ;;
  6951                           
  6952                           	psect	text29
  6953  0028F2                     __ptext29:
  6954                           	opt stack 0
  6955  0028F2                     _BusyXLCD:
  6956                           	opt stack 23
  6957                           
  6958                           ;busyxlcd.c: 13: LATDbits.LATD5 = 1;
  6959                           
  6960                           ;incstack = 0
  6961  0028F2  8A8C               	bsf	3980,5,c	;volatile
  6962                           
  6963                           ;busyxlcd.c: 14: LATDbits.LATD4 = 0;
  6964  0028F4  988C               	bcf	3980,4,c	;volatile
  6965                           
  6966                           ;busyxlcd.c: 15: DelayFor18TCY();
  6967  0028F6  EC80  F015         	call	_DelayFor18TCY	;wreg free
  6968                           
  6969                           ;busyxlcd.c: 16: LATDbits.LATD6 = 1;
  6970  0028FA  8C8C               	bsf	3980,6,c	;volatile
  6971                           
  6972                           ;busyxlcd.c: 17: DelayFor18TCY();
  6973  0028FC  EC80  F015         	call	_DelayFor18TCY	;wreg free
  6974                           
  6975                           ;busyxlcd.c: 35: if(PORTD&0x08)
  6976  002900  A683               	btfss	3971,3,c	;volatile
  6977  002902  D00A               	goto	l41
  6978                           
  6979                           ;busyxlcd.c: 37: {
  6980                           ;busyxlcd.c: 38: LATDbits.LATD6 = 0;
  6981  002904  9C8C               	bcf	3980,6,c	;volatile
  6982                           
  6983                           ;busyxlcd.c: 39: DelayFor18TCY();
  6984  002906  EC80  F015         	call	_DelayFor18TCY	;wreg free
  6985                           
  6986                           ;busyxlcd.c: 40: LATDbits.LATD6 = 1;
  6987  00290A  8C8C               	bsf	3980,6,c	;volatile
  6988                           
  6989                           ;busyxlcd.c: 41: DelayFor18TCY();
  6990  00290C  EC80  F015         	call	_DelayFor18TCY	;wreg free
  6991                           
  6992                           ;busyxlcd.c: 42: LATDbits.LATD6 = 0;
  6993  002910  9C8C               	bcf	3980,6,c	;volatile
  6994                           
  6995                           ;busyxlcd.c: 43: LATDbits.LATD5 = 0;
  6996  002912  9A8C               	bcf	3980,5,c	;volatile
  6997                           
  6998                           ;busyxlcd.c: 44: return 1;
  6999  002914  0E01               	movlw	1
  7000                           
  7001                           ;busyxlcd.c: 45: }
  7002  002916  0012               	return	
  7003  002918                     l41:
  7004                           
  7005                           ;busyxlcd.c: 46: else
  7006                           ;busyxlcd.c: 47: {
  7007                           ;busyxlcd.c: 48: LATDbits.LATD6 = 0;
  7008  002918  9C8C               	bcf	3980,6,c	;volatile
  7009                           
  7010                           ;busyxlcd.c: 49: DelayFor18TCY();
  7011  00291A  EC80  F015         	call	_DelayFor18TCY	;wreg free
  7012                           
  7013                           ;busyxlcd.c: 50: LATDbits.LATD6 = 1;
  7014  00291E  8C8C               	bsf	3980,6,c	;volatile
  7015                           
  7016                           ;busyxlcd.c: 51: DelayFor18TCY();
  7017  002920  EC80  F015         	call	_DelayFor18TCY	;wreg free
  7018                           
  7019                           ;busyxlcd.c: 52: LATDbits.LATD6 = 0;
  7020  002924  9C8C               	bcf	3980,6,c	;volatile
  7021                           
  7022                           ;busyxlcd.c: 53: LATDbits.LATD5 = 0;
  7023  002926  9A8C               	bcf	3980,5,c	;volatile
  7024                           
  7025                           ;busyxlcd.c: 54: return 0;
  7026  002928  0E00               	movlw	0
  7027  00292A  0012               	return	
  7028  00292C                     __end_of_BusyXLCD:
  7029                           	opt stack 0
  7030                           tblptru	equ	0xFF8
  7031                           tblptrh	equ	0xFF7
  7032                           tblptrl	equ	0xFF6
  7033                           tablat	equ	0xFF5
  7034                           prodh	equ	0xFF4
  7035                           prodl	equ	0xFF3
  7036                           postinc0	equ	0xFEE
  7037                           wreg	equ	0xFE8
  7038                           indf1	equ	0xFE7
  7039                           fsr1h	equ	0xFE2
  7040                           fsr1l	equ	0xFE1
  7041                           indf2	equ	0xFDF
  7042                           postinc2	equ	0xFDE
  7043                           postdec2	equ	0xFDD
  7044                           fsr2h	equ	0xFDA
  7045                           fsr2l	equ	0xFD9
  7046                           status	equ	0xFD8
  7047                           
  7048 ;; *************** function _DelayFor18TCY *****************
  7049 ;; Defined at:
  7050 ;;		line 28 in file "user_xlcd.c"
  7051 ;; Parameters:    Size  Location     Type
  7052 ;;		None
  7053 ;; Auto vars:     Size  Location     Type
  7054 ;;		None
  7055 ;; Return value:  Size  Location     Type
  7056 ;;                  1    wreg      void 
  7057 ;; Registers used:
  7058 ;;		wreg
  7059 ;; Tracked objects:
  7060 ;;		On entry : 0/0
  7061 ;;		On exit  : 0/0
  7062 ;;		Unchanged: 0/0
  7063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7064 ;;      Params:         0       0       0       0       0       0       0       0       0
  7065 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7066 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7067 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7068 ;;Total ram usage:        0 bytes
  7069 ;; Hardware stack levels used:    1
  7070 ;; Hardware stack levels required when called:    3
  7071 ;; This function calls:
  7072 ;;		Nothing
  7073 ;; This function is called by:
  7074 ;;		_BusyXLCD
  7075 ;;		_SetDDRamAddr
  7076 ;;		_WriteCmdXLCD
  7077 ;;		_WriteDataXLCD
  7078 ;;		_ReadAddrXLCD
  7079 ;;		_ReadDataXLCD
  7080 ;;		_SetCGRamAddr
  7081 ;; This function uses a non-reentrant model
  7082 ;;
  7083                           
  7084                           	psect	text30
  7085  002B00                     __ptext30:
  7086                           	opt stack 0
  7087  002B00                     _DelayFor18TCY:
  7088                           	opt stack 26
  7089                           
  7090                           ;user_xlcd.c: 30: _delay(18);
  7091                           
  7092                           ;incstack = 0
  7093  002B00  0E06               	movlw	6
  7094  002B02                     u7257:
  7095  002B02  2EE8               	decfsz	wreg,f,c
  7096  002B04  D7FE               	bra	u7257
  7097  002B06  0012               	return		;funcret
  7098  002B08                     __end_of_DelayFor18TCY:
  7099                           	opt stack 0
  7100                           tblptru	equ	0xFF8
  7101                           tblptrh	equ	0xFF7
  7102                           tblptrl	equ	0xFF6
  7103                           tablat	equ	0xFF5
  7104                           prodh	equ	0xFF4
  7105                           prodl	equ	0xFF3
  7106                           postinc0	equ	0xFEE
  7107                           wreg	equ	0xFE8
  7108                           indf1	equ	0xFE7
  7109                           fsr1h	equ	0xFE2
  7110                           fsr1l	equ	0xFE1
  7111                           indf2	equ	0xFDF
  7112                           postinc2	equ	0xFDE
  7113                           postdec2	equ	0xFDD
  7114                           fsr2h	equ	0xFDA
  7115                           fsr2l	equ	0xFD9
  7116                           status	equ	0xFD8
  7117                           
  7118 ;; *************** function _PIN_MANAGER_Initialize *****************
  7119 ;; Defined at:
  7120 ;;		line 5 in file "pin_manager.c"
  7121 ;; Parameters:    Size  Location     Type
  7122 ;;		None
  7123 ;; Auto vars:     Size  Location     Type
  7124 ;;		None
  7125 ;; Return value:  Size  Location     Type
  7126 ;;                  1    wreg      void 
  7127 ;; Registers used:
  7128 ;;		wreg, status,2
  7129 ;; Tracked objects:
  7130 ;;		On entry : 0/0
  7131 ;;		On exit  : 0/0
  7132 ;;		Unchanged: 0/0
  7133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7134 ;;      Params:         0       0       0       0       0       0       0       0       0
  7135 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7136 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7137 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7138 ;;Total ram usage:        0 bytes
  7139 ;; Hardware stack levels used:    1
  7140 ;; Hardware stack levels required when called:    3
  7141 ;; This function calls:
  7142 ;;		Nothing
  7143 ;; This function is called by:
  7144 ;;		_SYSTEM_Initialize
  7145 ;; This function uses a non-reentrant model
  7146 ;;
  7147                           
  7148                           	psect	text31
  7149  002AE0                     __ptext31:
  7150                           	opt stack 0
  7151  002AE0                     _PIN_MANAGER_Initialize:
  7152                           	opt stack 26
  7153                           
  7154                           ;pin_manager.c: 8: TRISAbits.TRISA0 = 1;
  7155                           
  7156                           ;incstack = 0
  7157  002AE0  8092               	bsf	3986,0,c	;volatile
  7158                           
  7159                           ;pin_manager.c: 10: ADCON1bits.PCFG = 0xD;
  7160  002AE2  50C1               	movf	4033,w,c	;volatile
  7161  002AE4  0BF0               	andlw	-16
  7162  002AE6  090D               	iorlw	13
  7163  002AE8  6EC1               	movwf	4033,c	;volatile
  7164  002AEA  0012               	return		;funcret
  7165  002AEC                     __end_of_PIN_MANAGER_Initialize:
  7166                           	opt stack 0
  7167                           tblptru	equ	0xFF8
  7168                           tblptrh	equ	0xFF7
  7169                           tblptrl	equ	0xFF6
  7170                           tablat	equ	0xFF5
  7171                           prodh	equ	0xFF4
  7172                           prodl	equ	0xFF3
  7173                           postinc0	equ	0xFEE
  7174                           wreg	equ	0xFE8
  7175                           indf1	equ	0xFE7
  7176                           fsr1h	equ	0xFE2
  7177                           fsr1l	equ	0xFE1
  7178                           indf2	equ	0xFDF
  7179                           postinc2	equ	0xFDE
  7180                           postdec2	equ	0xFDD
  7181                           fsr2h	equ	0xFDA
  7182                           fsr2l	equ	0xFD9
  7183                           status	equ	0xFD8
  7184                           
  7185 ;; *************** function _OSCILLATOR_Initialize *****************
  7186 ;; Defined at:
  7187 ;;		line 97 in file "mcc.c"
  7188 ;; Parameters:    Size  Location     Type
  7189 ;;		None
  7190 ;; Auto vars:     Size  Location     Type
  7191 ;;		None
  7192 ;; Return value:  Size  Location     Type
  7193 ;;                  1    wreg      void 
  7194 ;; Registers used:
  7195 ;;		wreg, status,2
  7196 ;; Tracked objects:
  7197 ;;		On entry : 0/0
  7198 ;;		On exit  : 0/0
  7199 ;;		Unchanged: 0/0
  7200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7201 ;;      Params:         0       0       0       0       0       0       0       0       0
  7202 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7203 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7204 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7205 ;;Total ram usage:        0 bytes
  7206 ;; Hardware stack levels used:    1
  7207 ;; Hardware stack levels required when called:    3
  7208 ;; This function calls:
  7209 ;;		Nothing
  7210 ;; This function is called by:
  7211 ;;		_SYSTEM_Initialize
  7212 ;; This function uses a non-reentrant model
  7213 ;;
  7214                           
  7215                           	psect	text32
  7216  002AEC                     __ptext32:
  7217                           	opt stack 0
  7218  002AEC                     _OSCILLATOR_Initialize:
  7219                           	opt stack 26
  7220                           
  7221                           ;mcc.c: 100: OSCCON = 0x60;
  7222                           
  7223                           ;incstack = 0
  7224  002AEC  0E60               	movlw	96
  7225  002AEE  6ED3               	movwf	4051,c	;volatile
  7226                           
  7227                           ;mcc.c: 102: OSCTUNE = 0x00;
  7228  002AF0  0E00               	movlw	0
  7229  002AF2  6E9B               	movwf	3995,c	;volatile
  7230  002AF4  0012               	return		;funcret
  7231  002AF6                     __end_of_OSCILLATOR_Initialize:
  7232                           	opt stack 0
  7233                           tblptru	equ	0xFF8
  7234                           tblptrh	equ	0xFF7
  7235                           tblptrl	equ	0xFF6
  7236                           tablat	equ	0xFF5
  7237                           prodh	equ	0xFF4
  7238                           prodl	equ	0xFF3
  7239                           postinc0	equ	0xFEE
  7240                           wreg	equ	0xFE8
  7241                           indf1	equ	0xFE7
  7242                           fsr1h	equ	0xFE2
  7243                           fsr1l	equ	0xFE1
  7244                           indf2	equ	0xFDF
  7245                           postinc2	equ	0xFDE
  7246                           postdec2	equ	0xFDD
  7247                           fsr2h	equ	0xFDA
  7248                           fsr2l	equ	0xFD9
  7249                           status	equ	0xFD8
  7250                           
  7251 ;; *************** function _ADC_Initialize *****************
  7252 ;; Defined at:
  7253 ;;		line 58 in file "adc.c"
  7254 ;; Parameters:    Size  Location     Type
  7255 ;;		None
  7256 ;; Auto vars:     Size  Location     Type
  7257 ;;		None
  7258 ;; Return value:  Size  Location     Type
  7259 ;;                  1    wreg      void 
  7260 ;; Registers used:
  7261 ;;		wreg, status,2
  7262 ;; Tracked objects:
  7263 ;;		On entry : 0/0
  7264 ;;		On exit  : 0/0
  7265 ;;		Unchanged: 0/0
  7266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7267 ;;      Params:         0       0       0       0       0       0       0       0       0
  7268 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7269 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7270 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7271 ;;Total ram usage:        0 bytes
  7272 ;; Hardware stack levels used:    1
  7273 ;; Hardware stack levels required when called:    3
  7274 ;; This function calls:
  7275 ;;		Nothing
  7276 ;; This function is called by:
  7277 ;;		_SYSTEM_Initialize
  7278 ;; This function uses a non-reentrant model
  7279 ;;
  7280                           
  7281                           	psect	text33
  7282  002A76                     __ptext33:
  7283                           	opt stack 0
  7284  002A76                     _ADC_Initialize:
  7285                           	opt stack 26
  7286                           
  7287                           ;adc.c: 61: ADCON0 = 0b00000001;
  7288                           
  7289                           ;incstack = 0
  7290  002A76  0E01               	movlw	1
  7291  002A78  6EC2               	movwf	4034,c	;volatile
  7292                           
  7293                           ;adc.c: 64: ADCON1bits.VCFG = 0x0;
  7294  002A7A  0ECF               	movlw	-49
  7295  002A7C  16C1               	andwf	4033,f,c	;volatile
  7296                           
  7297                           ;adc.c: 67: ADCON2 = 0b10111010;
  7298  002A7E  0EBA               	movlw	186
  7299  002A80  6EC0               	movwf	4032,c	;volatile
  7300                           
  7301                           ;adc.c: 70: ADRESL = 0x00;
  7302  002A82  0E00               	movlw	0
  7303  002A84  6EC3               	movwf	4035,c	;volatile
  7304                           
  7305                           ;adc.c: 73: ADRESH = 0x00;
  7306  002A86  0E00               	movlw	0
  7307  002A88  6EC4               	movwf	4036,c	;volatile
  7308                           
  7309                           ;adc.c: 76: PIR1bits.ADIF = 0;
  7310  002A8A  9C9E               	bcf	3998,6,c	;volatile
  7311  002A8C  0012               	return		;funcret
  7312  002A8E                     __end_of_ADC_Initialize:
  7313                           	opt stack 0
  7314                           tblptru	equ	0xFF8
  7315                           tblptrh	equ	0xFF7
  7316                           tblptrl	equ	0xFF6
  7317                           tablat	equ	0xFF5
  7318                           prodh	equ	0xFF4
  7319                           prodl	equ	0xFF3
  7320                           postinc0	equ	0xFEE
  7321                           wreg	equ	0xFE8
  7322                           indf1	equ	0xFE7
  7323                           fsr1h	equ	0xFE2
  7324                           fsr1l	equ	0xFE1
  7325                           indf2	equ	0xFDF
  7326                           postinc2	equ	0xFDE
  7327                           postdec2	equ	0xFDD
  7328                           fsr2h	equ	0xFDA
  7329                           fsr2l	equ	0xFD9
  7330                           status	equ	0xFD8
  7331                           
  7332 ;; *************** function _ADC_GetConversion *****************
  7333 ;; Defined at:
  7334 ;;		line 107 in file "adc.c"
  7335 ;; Parameters:    Size  Location     Type
  7336 ;;  channel         1    wreg     enum E5249
  7337 ;; Auto vars:     Size  Location     Type
  7338 ;;  channel         1   25[COMRAM] enum E5249
  7339 ;; Return value:  Size  Location     Type
  7340 ;;                  2   21[COMRAM] unsigned int 
  7341 ;; Registers used:
  7342 ;;		wreg, status,2, status,0
  7343 ;; Tracked objects:
  7344 ;;		On entry : 0/0
  7345 ;;		On exit  : 0/0
  7346 ;;		Unchanged: 0/0
  7347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7348 ;;      Params:         2       0       0       0       0       0       0       0       0
  7349 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7350 ;;      Temps:          2       0       0       0       0       0       0       0       0
  7351 ;;      Totals:         5       0       0       0       0       0       0       0       0
  7352 ;;Total ram usage:        5 bytes
  7353 ;; Hardware stack levels used:    1
  7354 ;; Hardware stack levels required when called:    3
  7355 ;; This function calls:
  7356 ;;		Nothing
  7357 ;; This function is called by:
  7358 ;;		_main
  7359 ;; This function uses a non-reentrant model
  7360 ;;
  7361                           
  7362                           	psect	text34
  7363  00295E                     __ptext34:
  7364                           	opt stack 0
  7365  00295E                     _ADC_GetConversion:
  7366                           	opt stack 27
  7367                           
  7368                           ;incstack = 0
  7369                           ;ADC_GetConversion@channel stored from wreg
  7370  00295E  6E1A               	movwf	ADC_GetConversion@channel,c
  7371                           
  7372                           ;adc.c: 110: ADCON0bits.CHS = channel;
  7373  002960  C01A  F018         	movff	ADC_GetConversion@channel,??_ADC_GetConversion
  7374  002964  4618               	rlncf	??_ADC_GetConversion,f,c
  7375  002966  4618               	rlncf	??_ADC_GetConversion,f,c
  7376  002968  50C2               	movf	4034,w,c	;volatile
  7377  00296A  1818               	xorwf	??_ADC_GetConversion,w,c
  7378  00296C  0BC3               	andlw	-61
  7379  00296E  1818               	xorwf	??_ADC_GetConversion,w,c
  7380  002970  6EC2               	movwf	4034,c	;volatile
  7381                           
  7382                           ;adc.c: 113: ADCON0bits.ADON = 1;
  7383  002972  80C2               	bsf	4034,0,c	;volatile
  7384                           
  7385                           ;adc.c: 117: ADCON0bits.GO_nDONE = 1;
  7386  002974  82C2               	bsf	4034,1,c	;volatile
  7387  002976                     
  7388                           ;adc.c: 121: {
  7389  002976  B2C2               	btfsc	4034,1,c	;volatile
  7390  002978  D7FE               	goto	l209
  7391                           
  7392                           ;adc.c: 122: }
  7393                           ;adc.c: 125: return ((ADRESH << 8) + ADRESL);
  7394  00297A  50C4               	movf	4036,w,c	;volatile
  7395  00297C  6E19               	movwf	(??_ADC_GetConversion+1)& (0+255),c
  7396  00297E  6A18               	clrf	??_ADC_GetConversion& (0+255),c
  7397  002980  50C3               	movf	4035,w,c	;volatile
  7398  002982  2418               	addwf	??_ADC_GetConversion,w,c
  7399  002984  6E16               	movwf	?_ADC_GetConversion,c
  7400  002986  0E00               	movlw	0
  7401  002988  2019               	addwfc	??_ADC_GetConversion+1,w,c
  7402  00298A  6E17               	movwf	?_ADC_GetConversion+1,c
  7403  00298C  0012               	return	
  7404  00298E                     __end_of_ADC_GetConversion:
  7405                           	opt stack 0
  7406                           tblptru	equ	0xFF8
  7407                           tblptrh	equ	0xFF7
  7408                           tblptrl	equ	0xFF6
  7409                           tablat	equ	0xFF5
  7410                           prodh	equ	0xFF4
  7411                           prodl	equ	0xFF3
  7412                           postinc0	equ	0xFEE
  7413                           wreg	equ	0xFE8
  7414                           indf1	equ	0xFE7
  7415                           fsr1h	equ	0xFE2
  7416                           fsr1l	equ	0xFE1
  7417                           indf2	equ	0xFDF
  7418                           postinc2	equ	0xFDE
  7419                           postdec2	equ	0xFDD
  7420                           fsr2h	equ	0xFDA
  7421                           fsr2l	equ	0xFD9
  7422                           status	equ	0xFD8
  7423                           
  7424 ;; *************** function _INTERRUPT_InterruptManager *****************
  7425 ;; Defined at:
  7426 ;;		line 38 in file "interrupt_manager.c"
  7427 ;; Parameters:    Size  Location     Type
  7428 ;;		None
  7429 ;; Auto vars:     Size  Location     Type
  7430 ;;  __portb__       1   20[COMRAM] unsigned char 
  7431 ;; Return value:  Size  Location     Type
  7432 ;;                  1    wreg      void 
  7433 ;; Registers used:
  7434 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  7435 ;; Tracked objects:
  7436 ;;		On entry : 0/0
  7437 ;;		On exit  : 0/0
  7438 ;;		Unchanged: 0/0
  7439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7440 ;;      Params:         0       0       0       0       0       0       0       0       0
  7441 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7442 ;;      Temps:         18       0       0       0       0       0       0       0       0
  7443 ;;      Totals:        19       0       0       0       0       0       0       0       0
  7444 ;;Total ram usage:       19 bytes
  7445 ;; Hardware stack levels used:    1
  7446 ;; Hardware stack levels required when called:    2
  7447 ;; This function calls:
  7448 ;;		_ADC_ISR
  7449 ;;		_EUSART1_Receive_ISR
  7450 ;;		_EUSART1_Transmit_ISR
  7451 ;;		_I2C1_BusCollisionISR
  7452 ;;		_I2C1_ISR
  7453 ;;		_MEMORY_ISR
  7454 ;;		_PIN_MANAGER_INT0
  7455 ;;		_PIN_MANAGER_INT1
  7456 ;;		_PIN_MANAGER_INT2
  7457 ;;		_PIN_MANAGER_IOC
  7458 ;;		_TMR0_ISR
  7459 ;;		_TMR1_ISR
  7460 ;;		_TMR2_ISR
  7461 ;;		_TMR3_ISR
  7462 ;; This function is called by:
  7463 ;;		Interrupt level 2
  7464 ;; This function uses a non-reentrant model
  7465 ;;
  7466                           
  7467                           	psect	intcode
  7468  000008                     __pintcode:
  7469                           	opt stack 0
  7470  000008                     _INTERRUPT_InterruptManager:
  7471                           	opt stack 23
  7472                           
  7473                           ;incstack = 0
  7474  000008  824A               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7475  00000A  ED29  F00E         	call	int_func,f	;refresh shadow registers
  7476                           tblptru	equ	0xFF8
  7477                           tblptrh	equ	0xFF7
  7478                           tblptrl	equ	0xFF6
  7479                           tablat	equ	0xFF5
  7480                           prodh	equ	0xFF4
  7481                           prodl	equ	0xFF3
  7482                           postinc0	equ	0xFEE
  7483                           wreg	equ	0xFE8
  7484                           indf1	equ	0xFE7
  7485                           fsr1h	equ	0xFE2
  7486                           fsr1l	equ	0xFE1
  7487                           indf2	equ	0xFDF
  7488                           postinc2	equ	0xFDE
  7489                           postdec2	equ	0xFDD
  7490                           fsr2h	equ	0xFDA
  7491                           fsr2l	equ	0xFD9
  7492                           status	equ	0xFD8
  7493                           
  7494                           	psect	intcode_body
  7495  001C52                     __pintcode_body:
  7496                           	opt stack 23
  7497  001C52                     int_func:
  7498                           	opt stack 23
  7499  001C52  0006               	pop		; remove dummy address from shadow register refresh
  7500  001C54  CFFA F003          	movff	pclath,??_INTERRUPT_InterruptManager
  7501  001C58  CFFB F004          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  7502  001C5C  CFE9 F005          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  7503  001C60  CFEA F006          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  7504  001C64  CFE1 F007          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  7505  001C68  CFE2 F008          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  7506  001C6C  CFD9 F009          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  7507  001C70  CFDA F00A          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  7508  001C74  CFF3 F00B          	movff	prodl,??_INTERRUPT_InterruptManager+8
  7509  001C78  CFF4 F00C          	movff	prodh,??_INTERRUPT_InterruptManager+9
  7510  001C7C  CFF6 F00D          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  7511  001C80  CFF7 F00E          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  7512  001C84  CFF8 F00F          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  7513  001C88  CFF5 F010          	movff	tablat,??_INTERRUPT_InterruptManager+13
  7514  001C8C  C04A  F011         	movff	btemp,??_INTERRUPT_InterruptManager+14
  7515  001C90  C04B  F012         	movff	btemp+1,??_INTERRUPT_InterruptManager+15
  7516  001C94  C04C  F013         	movff	btemp+2,??_INTERRUPT_InterruptManager+16
  7517  001C98  C04D  F014         	movff	btemp+3,??_INTERRUPT_InterruptManager+17
  7518                           
  7519                           ;interrupt_manager.c: 41: if(PIE1bits.ADIE == 1 && PIR1bits.ADIF == 1)
  7520  001C9C  BC9D               	btfsc	3997,6,c	;volatile
  7521  001C9E  AC9E               	btfss	3998,6,c	;volatile
  7522  001CA0  D004               	goto	i2l500
  7523                           
  7524                           ;interrupt_manager.c: 42: {
  7525                           ;interrupt_manager.c: 43: ADC_ISR();
  7526  001CA2  EC92  F015         	call	_ADC_ISR	;wreg free
  7527                           
  7528                           ;interrupt_manager.c: 45: PIR1bits.ADIF = 0;
  7529  001CA6  9C9E               	bcf	3998,6,c	;volatile
  7530                           
  7531                           ;interrupt_manager.c: 46: }
  7532  001CA8  D061               	goto	i2l528
  7533  001CAA                     i2l500:
  7534                           
  7535                           ;interrupt_manager.c: 47: else if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
  7536  001CAA  BAF2               	btfsc	intcon,5,c	;volatile
  7537  001CAC  A4F2               	btfss	intcon,2,c	;volatile
  7538  001CAE  D004               	goto	i2l502
  7539                           
  7540                           ;interrupt_manager.c: 48: {
  7541                           ;interrupt_manager.c: 49: TMR0_ISR();
  7542  001CB0  EC8B  F015         	call	_TMR0_ISR	;wreg free
  7543                           
  7544                           ;interrupt_manager.c: 51: INTCONbits.TMR0IF = 0;
  7545  001CB4  94F2               	bcf	intcon,2,c	;volatile
  7546                           
  7547                           ;interrupt_manager.c: 52: }
  7548  001CB6  D05A               	goto	i2l528
  7549  001CB8                     i2l502:
  7550                           
  7551                           ;interrupt_manager.c: 53: else if(PIE2bits.EEIE == 1 && PIR2bits.EEIF == 1)
  7552  001CB8  B8A0               	btfsc	4000,4,c	;volatile
  7553  001CBA  A8A1               	btfss	4001,4,c	;volatile
  7554  001CBC  D004               	goto	i2l504
  7555                           
  7556                           ;interrupt_manager.c: 54: {
  7557                           ;interrupt_manager.c: 55: MEMORY_ISR();
  7558  001CBE  EC90  F015         	call	_MEMORY_ISR	;wreg free
  7559                           
  7560                           ;interrupt_manager.c: 56: PIR2bits.EEIF = 0;
  7561  001CC2  98A1               	bcf	4001,4,c	;volatile
  7562                           
  7563                           ;interrupt_manager.c: 57: }
  7564  001CC4  D053               	goto	i2l528
  7565  001CC6                     i2l504:
  7566                           
  7567                           ;interrupt_manager.c: 58: else if(PIE2bits.BCLIE == 1 && PIR2bits.BCLIF == 1)
  7568  001CC6  B6A0               	btfsc	4000,3,c	;volatile
  7569  001CC8  A6A1               	btfss	4001,3,c	;volatile
  7570  001CCA  D004               	goto	i2l506
  7571                           
  7572                           ;interrupt_manager.c: 59: {
  7573                           ;interrupt_manager.c: 60: I2C1_BusCollisionISR();
  7574  001CCC  EC91  F015         	call	_I2C1_BusCollisionISR	;wreg free
  7575                           
  7576                           ;interrupt_manager.c: 61: PIR2bits.BCLIF = 0;
  7577  001CD0  96A1               	bcf	4001,3,c	;volatile
  7578                           
  7579                           ;interrupt_manager.c: 62: }
  7580  001CD2  D04C               	goto	i2l528
  7581  001CD4                     i2l506:
  7582                           
  7583                           ;interrupt_manager.c: 63: else if(PIE1bits.SSPIE == 1 && PIR1bits.SSPIF == 1)
  7584  001CD4  B69D               	btfsc	3997,3,c	;volatile
  7585  001CD6  A69E               	btfss	3998,3,c	;volatile
  7586  001CD8  D004               	goto	i2l508
  7587                           
  7588                           ;interrupt_manager.c: 64: {
  7589                           ;interrupt_manager.c: 65: I2C1_ISR();
  7590  001CDA  EC03  F00D         	call	_I2C1_ISR	;wreg free
  7591                           
  7592                           ;interrupt_manager.c: 66: PIR1bits.SSPIF = 0;
  7593  001CDE  969E               	bcf	3998,3,c	;volatile
  7594                           
  7595                           ;interrupt_manager.c: 67: }
  7596  001CE0  D045               	goto	i2l528
  7597  001CE2                     i2l508:
  7598                           
  7599                           ;interrupt_manager.c: 68: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
  7600  001CE2  B89D               	btfsc	3997,4,c	;volatile
  7601  001CE4  A89E               	btfss	3998,4,c	;volatile
  7602  001CE6  D004               	goto	i2l510
  7603                           
  7604                           ;interrupt_manager.c: 69: {
  7605                           ;interrupt_manager.c: 70: EUSART1_Transmit_ISR();
  7606  001CE8  ECDE  F014         	call	_EUSART1_Transmit_ISR	;wreg free
  7607                           
  7608                           ;interrupt_manager.c: 71: PIR1bits.TX1IF = 0;
  7609  001CEC  989E               	bcf	3998,4,c	;volatile
  7610                           
  7611                           ;interrupt_manager.c: 72: }
  7612  001CEE  D03E               	goto	i2l528
  7613  001CF0                     i2l510:
  7614                           
  7615                           ;interrupt_manager.c: 73: else if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
  7616  001CF0  BA9D               	btfsc	3997,5,c	;volatile
  7617  001CF2  AA9E               	btfss	3998,5,c	;volatile
  7618  001CF4  D004               	goto	i2l512
  7619                           
  7620                           ;interrupt_manager.c: 74: {
  7621                           ;interrupt_manager.c: 75: EUSART1_Receive_ISR();
  7622  001CF6  EC7B  F015         	call	_EUSART1_Receive_ISR	;wreg free
  7623                           
  7624                           ;interrupt_manager.c: 76: PIR1bits.RC1IF = 0;
  7625  001CFA  9A9E               	bcf	3998,5,c	;volatile
  7626                           
  7627                           ;interrupt_manager.c: 77: }
  7628  001CFC  D037               	goto	i2l528
  7629  001CFE                     i2l512:
  7630                           
  7631                           ;interrupt_manager.c: 78: else if(PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF == 1)
  7632  001CFE  B09D               	btfsc	3997,0,c	;volatile
  7633  001D00  A09E               	btfss	3998,0,c	;volatile
  7634  001D02  D004               	goto	i2l514
  7635                           
  7636                           ;interrupt_manager.c: 79: {
  7637                           ;interrupt_manager.c: 80: TMR1_ISR();
  7638  001D04  EC8A  F015         	call	_TMR1_ISR	;wreg free
  7639                           
  7640                           ;interrupt_manager.c: 81: PIR1bits.TMR1IF = 0;
  7641  001D08  909E               	bcf	3998,0,c	;volatile
  7642                           
  7643                           ;interrupt_manager.c: 82: }
  7644  001D0A  D030               	goto	i2l528
  7645  001D0C                     i2l514:
  7646                           
  7647                           ;interrupt_manager.c: 83: else if(INTCONbits.RBIE == 1 && INTCONbits.RBIF == 1)
  7648  001D0C  B6F2               	btfsc	intcon,3,c	;volatile
  7649  001D0E  A0F2               	btfss	intcon,0,c	;volatile
  7650  001D10  D006               	goto	i2l516
  7651                           
  7652                           ;interrupt_manager.c: 84: {
  7653                           ;interrupt_manager.c: 85: PIN_MANAGER_IOC();
  7654  001D12  EC8C  F015         	call	_PIN_MANAGER_IOC	;wreg free
  7655                           
  7656                           ;interrupt_manager.c: 88: unsigned char __portb__ = PORTB;
  7657  001D16  CF81 F015          	movff	3969,INTERRUPT_InterruptManager@__portb__	;volatile
  7658                           
  7659                           ;interrupt_manager.c: 89: INTCONbits.RBIF = 0;
  7660  001D1A  90F2               	bcf	intcon,0,c	;volatile
  7661                           
  7662                           ;interrupt_manager.c: 90: }
  7663  001D1C  D027               	goto	i2l528
  7664  001D1E                     i2l516:
  7665                           
  7666                           ;interrupt_manager.c: 91: else if(INTCONbits.INT0IE == 1 && INTCONbits.INT0IF == 1)
  7667  001D1E  B8F2               	btfsc	intcon,4,c	;volatile
  7668  001D20  A2F2               	btfss	intcon,1,c	;volatile
  7669  001D22  D004               	goto	i2l518
  7670                           
  7671                           ;interrupt_manager.c: 92: {
  7672                           ;interrupt_manager.c: 93: PIN_MANAGER_INT0();
  7673  001D24  EC8F  F015         	call	_PIN_MANAGER_INT0	;wreg free
  7674                           
  7675                           ;interrupt_manager.c: 95: INTCONbits.INT0IF = 0;
  7676  001D28  92F2               	bcf	intcon,1,c	;volatile
  7677                           
  7678                           ;interrupt_manager.c: 96: }
  7679  001D2A  D020               	goto	i2l528
  7680  001D2C                     i2l518:
  7681                           
  7682                           ;interrupt_manager.c: 97: else if(INTCON3bits.INT1IE == 1 && INTCON3bits.INT1IF == 1)
  7683  001D2C  B6F0               	btfsc	intcon3,3,c	;volatile
  7684  001D2E  A0F0               	btfss	intcon3,0,c	;volatile
  7685  001D30  D004               	goto	i2l520
  7686                           
  7687                           ;interrupt_manager.c: 98: {
  7688                           ;interrupt_manager.c: 99: PIN_MANAGER_INT1();
  7689  001D32  EC8E  F015         	call	_PIN_MANAGER_INT1	;wreg free
  7690                           
  7691                           ;interrupt_manager.c: 101: INTCON3bits.INT1IF = 0;
  7692  001D36  90F0               	bcf	intcon3,0,c	;volatile
  7693                           
  7694                           ;interrupt_manager.c: 102: }
  7695  001D38  D019               	goto	i2l528
  7696  001D3A                     i2l520:
  7697                           
  7698                           ;interrupt_manager.c: 103: else if(INTCON3bits.INT2IE == 1 && INTCON3bits.INT2IF == 1)
  7699  001D3A  B8F0               	btfsc	intcon3,4,c	;volatile
  7700  001D3C  A2F0               	btfss	intcon3,1,c	;volatile
  7701  001D3E  D004               	goto	i2l522
  7702                           
  7703                           ;interrupt_manager.c: 104: {
  7704                           ;interrupt_manager.c: 105: PIN_MANAGER_INT2();
  7705  001D40  EC8D  F015         	call	_PIN_MANAGER_INT2	;wreg free
  7706                           
  7707                           ;interrupt_manager.c: 107: INTCON3bits.INT2IF = 0;
  7708  001D44  92F0               	bcf	intcon3,1,c	;volatile
  7709                           
  7710                           ;interrupt_manager.c: 108: }
  7711  001D46  D012               	goto	i2l528
  7712  001D48                     i2l522:
  7713                           
  7714                           ;interrupt_manager.c: 109: else if(PIE2bits.CCP2IE == 1 && PIR2bits.CCP2IF == 1)
  7715  001D48  B0A0               	btfsc	4000,0,c	;volatile
  7716  001D4A  A0A1               	btfss	4001,0,c	;volatile
  7717  001D4C  D002               	goto	i2l524
  7718                           
  7719                           ;interrupt_manager.c: 110: {
  7720                           ;interrupt_manager.c: 113: PIR2bits.CCP2IF = 0;
  7721  001D4E  90A1               	bcf	4001,0,c	;volatile
  7722                           
  7723                           ;interrupt_manager.c: 114: }
  7724  001D50  D00D               	goto	i2l528
  7725  001D52                     i2l524:
  7726                           
  7727                           ;interrupt_manager.c: 115: else if(PIE2bits.TMR3IE == 1 && PIR2bits.TMR3IF == 1)
  7728  001D52  B2A0               	btfsc	4000,1,c	;volatile
  7729  001D54  A2A1               	btfss	4001,1,c	;volatile
  7730  001D56  D004               	goto	i2l526
  7731                           
  7732                           ;interrupt_manager.c: 116: {
  7733                           ;interrupt_manager.c: 117: TMR3_ISR();
  7734  001D58  ECC7  F014         	call	_TMR3_ISR	;wreg free
  7735                           
  7736                           ;interrupt_manager.c: 118: PIR2bits.TMR3IF = 0;
  7737  001D5C  92A1               	bcf	4001,1,c	;volatile
  7738                           
  7739                           ;interrupt_manager.c: 119: }
  7740  001D5E  D006               	goto	i2l528
  7741  001D60                     i2l526:
  7742                           
  7743                           ;interrupt_manager.c: 120: else if(PIE1bits.TMR2IE == 1 && PIR1bits.TMR2IF == 1)
  7744  001D60  B29D               	btfsc	3997,1,c	;volatile
  7745  001D62  A29E               	btfss	3998,1,c	;volatile
  7746  001D64  D003               	goto	i2l528
  7747                           
  7748                           ;interrupt_manager.c: 121: {
  7749                           ;interrupt_manager.c: 122: TMR2_ISR();
  7750  001D66  EC89  F015         	call	_TMR2_ISR	;wreg free
  7751                           
  7752                           ;interrupt_manager.c: 123: PIR1bits.TMR2IF = 0;
  7753  001D6A  929E               	bcf	3998,1,c	;volatile
  7754  001D6C                     i2l528:
  7755                           
  7756                           ;interrupt_manager.c: 125: else
  7757                           ;interrupt_manager.c: 126: {
  7758  001D6C  C014  F04D         	movff	??_INTERRUPT_InterruptManager+17,btemp+3
  7759  001D70  C013  F04C         	movff	??_INTERRUPT_InterruptManager+16,btemp+2
  7760  001D74  C012  F04B         	movff	??_INTERRUPT_InterruptManager+15,btemp+1
  7761  001D78  C011  F04A         	movff	??_INTERRUPT_InterruptManager+14,btemp
  7762  001D7C  C010  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  7763  001D80  C00F  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  7764  001D84  C00E  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  7765  001D88  C00D  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  7766  001D8C  C00C  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  7767  001D90  C00B  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  7768  001D94  C00A  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  7769  001D98  C009  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  7770  001D9C  C008  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  7771  001DA0  C007  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  7772  001DA4  C006  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  7773  001DA8  C005  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  7774  001DAC  C004  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  7775  001DB0  C003  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  7776  001DB4  924A               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7777  001DB6  0011               	retfie		f
  7778  001DB8                     __end_of_INTERRUPT_InterruptManager:
  7779                           	opt stack 0
  7780                           pclatu	equ	0xFFB
  7781                           pclath	equ	0xFFA
  7782                           tblptru	equ	0xFF8
  7783                           tblptrh	equ	0xFF7
  7784                           tblptrl	equ	0xFF6
  7785                           tablat	equ	0xFF5
  7786                           prodh	equ	0xFF4
  7787                           prodl	equ	0xFF3
  7788                           intcon	equ	0xFF2
  7789                           intcon3	equ	0xFF0
  7790                           postinc0	equ	0xFEE
  7791                           fsr0h	equ	0xFEA
  7792                           fsr0l	equ	0xFE9
  7793                           wreg	equ	0xFE8
  7794                           indf1	equ	0xFE7
  7795                           fsr1h	equ	0xFE2
  7796                           fsr1l	equ	0xFE1
  7797                           indf2	equ	0xFDF
  7798                           postinc2	equ	0xFDE
  7799                           postdec2	equ	0xFDD
  7800                           fsr2h	equ	0xFDA
  7801                           fsr2l	equ	0xFD9
  7802                           status	equ	0xFD8
  7803                           
  7804 ;; *************** function _TMR3_ISR *****************
  7805 ;; Defined at:
  7806 ;;		line 158 in file "tmr3.c"
  7807 ;; Parameters:    Size  Location     Type
  7808 ;;		None
  7809 ;; Auto vars:     Size  Location     Type
  7810 ;;		None
  7811 ;; Return value:  Size  Location     Type
  7812 ;;                  1    wreg      void 
  7813 ;; Registers used:
  7814 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  7815 ;; Tracked objects:
  7816 ;;		On entry : 0/0
  7817 ;;		On exit  : 0/0
  7818 ;;		Unchanged: 0/0
  7819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7820 ;;      Params:         0       0       0       0       0       0       0       0       0
  7821 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7822 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7823 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7824 ;;Total ram usage:        0 bytes
  7825 ;; Hardware stack levels used:    1
  7826 ;; Hardware stack levels required when called:    1
  7827 ;; This function calls:
  7828 ;;		Absolute function
  7829 ;;		_TMR3_DefaultInterruptHandler
  7830 ;; This function is called by:
  7831 ;;		_INTERRUPT_InterruptManager
  7832 ;; This function uses a non-reentrant model
  7833 ;;
  7834                           
  7835                           	psect	text36
  7836  00298E                     __ptext36:
  7837                           	opt stack 0
  7838  00298E                     _TMR3_ISR:
  7839                           	opt stack 23
  7840                           
  7841                           ;tmr3.c: 162: TMR3H = (timer3ReloadVal >> 8);
  7842                           
  7843                           ;incstack = 0
  7844  00298E  5036               	movf	_timer3ReloadVal+1,w,c	;volatile
  7845  002990  6EB3               	movwf	4019,c	;volatile
  7846                           
  7847                           ;tmr3.c: 163: TMR3L = (uint8_t) timer3ReloadVal;
  7848  002992  C035  FFB2         	movff	_timer3ReloadVal,4018	;volatile
  7849                           
  7850                           ;tmr3.c: 165: if(TMR3_InterruptHandler)
  7851  002996  0100               	movlb	0	; () banked
  7852  002998  51C1               	movf	_TMR3_InterruptHandler& (0+255),w,b
  7853  00299A  0100               	movlb	0	; () banked
  7854  00299C  11C2               	iorwf	(_TMR3_InterruptHandler+1)& (0+255),w,b
  7855  00299E  B4D8               	btfsc	status,2,c
  7856  0029A0  0012               	return	
  7857                           
  7858                           ; BSR set to: 0
  7859                           ;tmr3.c: 166: {
  7860                           ;tmr3.c: 167: TMR3_InterruptHandler();
  7861  0029A2  D801               	call	i2u472_48
  7862  0029A4  0012               	return	
  7863  0029A6                     i2u472_48:
  7864  0029A6  0005               	push	
  7865  0029A8  0100               	movlb	0	; () banked
  7866  0029AA  6EFA               	movwf	pclath,c
  7867  0029AC  51C1               	movf	_TMR3_InterruptHandler& (0+255),w,b
  7868  0029AE  6EFD               	movwf	tosl,c
  7869  0029B0  51C2               	movf	(_TMR3_InterruptHandler+1)& (0+255),w,b
  7870  0029B2  6EFE               	movwf	tosh,c
  7871  0029B4  50F8               	movf	tblptru,w,c
  7872  0029B6  6EFF               	movwf	tosu,c
  7873  0029B8  50FA               	movf	pclath,w,c
  7874  0029BA  0012               	return		;indir
  7875  0029BC                     __end_of_TMR3_ISR:
  7876                           	opt stack 0
  7877                           tosu	equ	0xFFF
  7878                           tosh	equ	0xFFE
  7879                           tosl	equ	0xFFD
  7880                           pclatu	equ	0xFFB
  7881                           pclath	equ	0xFFA
  7882                           tblptru	equ	0xFF8
  7883                           tblptrh	equ	0xFF7
  7884                           tblptrl	equ	0xFF6
  7885                           tablat	equ	0xFF5
  7886                           prodh	equ	0xFF4
  7887                           prodl	equ	0xFF3
  7888                           intcon	equ	0xFF2
  7889                           intcon3	equ	0xFF0
  7890                           postinc0	equ	0xFEE
  7891                           fsr0h	equ	0xFEA
  7892                           fsr0l	equ	0xFE9
  7893                           wreg	equ	0xFE8
  7894                           indf1	equ	0xFE7
  7895                           fsr1h	equ	0xFE2
  7896                           fsr1l	equ	0xFE1
  7897                           indf2	equ	0xFDF
  7898                           postinc2	equ	0xFDE
  7899                           postdec2	equ	0xFDD
  7900                           fsr2h	equ	0xFDA
  7901                           fsr2l	equ	0xFD9
  7902                           status	equ	0xFD8
  7903                           
  7904 ;; *************** function _TMR3_DefaultInterruptHandler *****************
  7905 ;; Defined at:
  7906 ;;		line 176 in file "tmr3.c"
  7907 ;; Parameters:    Size  Location     Type
  7908 ;;		None
  7909 ;; Auto vars:     Size  Location     Type
  7910 ;;		None
  7911 ;; Return value:  Size  Location     Type
  7912 ;;                  1    wreg      void 
  7913 ;; Registers used:
  7914 ;;		None
  7915 ;; Tracked objects:
  7916 ;;		On entry : 0/0
  7917 ;;		On exit  : 0/0
  7918 ;;		Unchanged: 0/0
  7919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7920 ;;      Params:         0       0       0       0       0       0       0       0       0
  7921 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7922 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7923 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7924 ;;Total ram usage:        0 bytes
  7925 ;; Hardware stack levels used:    1
  7926 ;; This function calls:
  7927 ;;		Nothing
  7928 ;; This function is called by:
  7929 ;;		_TMR3_Initialize
  7930 ;;		_TMR3_ISR
  7931 ;; This function uses a non-reentrant model
  7932 ;;
  7933                           
  7934                           	psect	text37
  7935  002B10                     __ptext37:
  7936                           	opt stack 0
  7937  002B10                     _TMR3_DefaultInterruptHandler:
  7938                           	opt stack 23
  7939                           
  7940                           ;incstack = 0
  7941  002B10  0012               	return		;funcret
  7942  002B12                     __end_of_TMR3_DefaultInterruptHandler:
  7943                           	opt stack 0
  7944                           tosu	equ	0xFFF
  7945                           tosh	equ	0xFFE
  7946                           tosl	equ	0xFFD
  7947                           pclatu	equ	0xFFB
  7948                           pclath	equ	0xFFA
  7949                           tblptru	equ	0xFF8
  7950                           tblptrh	equ	0xFF7
  7951                           tblptrl	equ	0xFF6
  7952                           tablat	equ	0xFF5
  7953                           prodh	equ	0xFF4
  7954                           prodl	equ	0xFF3
  7955                           intcon	equ	0xFF2
  7956                           intcon3	equ	0xFF0
  7957                           postinc0	equ	0xFEE
  7958                           fsr0h	equ	0xFEA
  7959                           fsr0l	equ	0xFE9
  7960                           wreg	equ	0xFE8
  7961                           indf1	equ	0xFE7
  7962                           fsr1h	equ	0xFE2
  7963                           fsr1l	equ	0xFE1
  7964                           indf2	equ	0xFDF
  7965                           postinc2	equ	0xFDE
  7966                           postdec2	equ	0xFDD
  7967                           fsr2h	equ	0xFDA
  7968                           fsr2l	equ	0xFD9
  7969                           status	equ	0xFD8
  7970                           
  7971 ;; *************** function _TMR2_ISR *****************
  7972 ;; Defined at:
  7973 ;;		line 123 in file "tmr2.c"
  7974 ;; Parameters:    Size  Location     Type
  7975 ;;		None
  7976 ;; Auto vars:     Size  Location     Type
  7977 ;;		None
  7978 ;; Return value:  Size  Location     Type
  7979 ;;                  1    wreg      void 
  7980 ;; Registers used:
  7981 ;;		None
  7982 ;; Tracked objects:
  7983 ;;		On entry : 0/0
  7984 ;;		On exit  : 0/0
  7985 ;;		Unchanged: 0/0
  7986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7987 ;;      Params:         0       0       0       0       0       0       0       0       0
  7988 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7989 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7990 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7991 ;;Total ram usage:        0 bytes
  7992 ;; Hardware stack levels used:    1
  7993 ;; This function calls:
  7994 ;;		Nothing
  7995 ;; This function is called by:
  7996 ;;		_INTERRUPT_InterruptManager
  7997 ;; This function uses a non-reentrant model
  7998 ;;
  7999                           
  8000                           	psect	text38
  8001  002B12                     __ptext38:
  8002                           	opt stack 0
  8003  002B12                     _TMR2_ISR:
  8004                           	opt stack 24
  8005                           
  8006                           ;incstack = 0
  8007  002B12  0012               	return		;funcret
  8008  002B14                     __end_of_TMR2_ISR:
  8009                           	opt stack 0
  8010                           tosu	equ	0xFFF
  8011                           tosh	equ	0xFFE
  8012                           tosl	equ	0xFFD
  8013                           pclatu	equ	0xFFB
  8014                           pclath	equ	0xFFA
  8015                           tblptru	equ	0xFF8
  8016                           tblptrh	equ	0xFF7
  8017                           tblptrl	equ	0xFF6
  8018                           tablat	equ	0xFF5
  8019                           prodh	equ	0xFF4
  8020                           prodl	equ	0xFF3
  8021                           intcon	equ	0xFF2
  8022                           intcon3	equ	0xFF0
  8023                           postinc0	equ	0xFEE
  8024                           fsr0h	equ	0xFEA
  8025                           fsr0l	equ	0xFE9
  8026                           wreg	equ	0xFE8
  8027                           indf1	equ	0xFE7
  8028                           fsr1h	equ	0xFE2
  8029                           fsr1l	equ	0xFE1
  8030                           indf2	equ	0xFDF
  8031                           postinc2	equ	0xFDE
  8032                           postdec2	equ	0xFDD
  8033                           fsr2h	equ	0xFDA
  8034                           fsr2l	equ	0xFD9
  8035                           status	equ	0xFD8
  8036                           
  8037 ;; *************** function _TMR1_ISR *****************
  8038 ;; Defined at:
  8039 ;;		line 151 in file "tmr1.c"
  8040 ;; Parameters:    Size  Location     Type
  8041 ;;		None
  8042 ;; Auto vars:     Size  Location     Type
  8043 ;;		None
  8044 ;; Return value:  Size  Location     Type
  8045 ;;                  1    wreg      void 
  8046 ;; Registers used:
  8047 ;;		None
  8048 ;; Tracked objects:
  8049 ;;		On entry : 0/0
  8050 ;;		On exit  : 0/0
  8051 ;;		Unchanged: 0/0
  8052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8053 ;;      Params:         0       0       0       0       0       0       0       0       0
  8054 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8055 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8056 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8057 ;;Total ram usage:        0 bytes
  8058 ;; Hardware stack levels used:    1
  8059 ;; This function calls:
  8060 ;;		Nothing
  8061 ;; This function is called by:
  8062 ;;		_INTERRUPT_InterruptManager
  8063 ;; This function uses a non-reentrant model
  8064 ;;
  8065                           
  8066                           	psect	text39
  8067  002B14                     __ptext39:
  8068                           	opt stack 0
  8069  002B14                     _TMR1_ISR:
  8070                           	opt stack 24
  8071                           
  8072                           ;incstack = 0
  8073  002B14  0012               	return		;funcret
  8074  002B16                     __end_of_TMR1_ISR:
  8075                           	opt stack 0
  8076                           tosu	equ	0xFFF
  8077                           tosh	equ	0xFFE
  8078                           tosl	equ	0xFFD
  8079                           pclatu	equ	0xFFB
  8080                           pclath	equ	0xFFA
  8081                           tblptru	equ	0xFF8
  8082                           tblptrh	equ	0xFF7
  8083                           tblptrl	equ	0xFF6
  8084                           tablat	equ	0xFF5
  8085                           prodh	equ	0xFF4
  8086                           prodl	equ	0xFF3
  8087                           intcon	equ	0xFF2
  8088                           intcon3	equ	0xFF0
  8089                           postinc0	equ	0xFEE
  8090                           fsr0h	equ	0xFEA
  8091                           fsr0l	equ	0xFE9
  8092                           wreg	equ	0xFE8
  8093                           indf1	equ	0xFE7
  8094                           fsr1h	equ	0xFE2
  8095                           fsr1l	equ	0xFE1
  8096                           indf2	equ	0xFDF
  8097                           postinc2	equ	0xFDE
  8098                           postdec2	equ	0xFDD
  8099                           fsr2h	equ	0xFDA
  8100                           fsr2l	equ	0xFD9
  8101                           status	equ	0xFD8
  8102                           
  8103 ;; *************** function _TMR0_ISR *****************
  8104 ;; Defined at:
  8105 ;;		line 149 in file "tmr0.c"
  8106 ;; Parameters:    Size  Location     Type
  8107 ;;		None
  8108 ;; Auto vars:     Size  Location     Type
  8109 ;;		None
  8110 ;; Return value:  Size  Location     Type
  8111 ;;                  1    wreg      void 
  8112 ;; Registers used:
  8113 ;;		None
  8114 ;; Tracked objects:
  8115 ;;		On entry : 0/0
  8116 ;;		On exit  : 0/0
  8117 ;;		Unchanged: 0/0
  8118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8119 ;;      Params:         0       0       0       0       0       0       0       0       0
  8120 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8121 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8122 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8123 ;;Total ram usage:        0 bytes
  8124 ;; Hardware stack levels used:    1
  8125 ;; This function calls:
  8126 ;;		Nothing
  8127 ;; This function is called by:
  8128 ;;		_INTERRUPT_InterruptManager
  8129 ;; This function uses a non-reentrant model
  8130 ;;
  8131                           
  8132                           	psect	text40
  8133  002B16                     __ptext40:
  8134                           	opt stack 0
  8135  002B16                     _TMR0_ISR:
  8136                           	opt stack 24
  8137                           
  8138                           ;incstack = 0
  8139  002B16  0012               	return		;funcret
  8140  002B18                     __end_of_TMR0_ISR:
  8141                           	opt stack 0
  8142                           tosu	equ	0xFFF
  8143                           tosh	equ	0xFFE
  8144                           tosl	equ	0xFFD
  8145                           pclatu	equ	0xFFB
  8146                           pclath	equ	0xFFA
  8147                           tblptru	equ	0xFF8
  8148                           tblptrh	equ	0xFF7
  8149                           tblptrl	equ	0xFF6
  8150                           tablat	equ	0xFF5
  8151                           prodh	equ	0xFF4
  8152                           prodl	equ	0xFF3
  8153                           intcon	equ	0xFF2
  8154                           intcon3	equ	0xFF0
  8155                           postinc0	equ	0xFEE
  8156                           fsr0h	equ	0xFEA
  8157                           fsr0l	equ	0xFE9
  8158                           wreg	equ	0xFE8
  8159                           indf1	equ	0xFE7
  8160                           fsr1h	equ	0xFE2
  8161                           fsr1l	equ	0xFE1
  8162                           indf2	equ	0xFDF
  8163                           postinc2	equ	0xFDE
  8164                           postdec2	equ	0xFDD
  8165                           fsr2h	equ	0xFDA
  8166                           fsr2l	equ	0xFD9
  8167                           status	equ	0xFD8
  8168                           
  8169 ;; *************** function _PIN_MANAGER_IOC *****************
  8170 ;; Defined at:
  8171 ;;		line 13 in file "pin_manager.c"
  8172 ;; Parameters:    Size  Location     Type
  8173 ;;		None
  8174 ;; Auto vars:     Size  Location     Type
  8175 ;;		None
  8176 ;; Return value:  Size  Location     Type
  8177 ;;                  1    wreg      void 
  8178 ;; Registers used:
  8179 ;;		None
  8180 ;; Tracked objects:
  8181 ;;		On entry : 0/0
  8182 ;;		On exit  : 0/0
  8183 ;;		Unchanged: 0/0
  8184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8185 ;;      Params:         0       0       0       0       0       0       0       0       0
  8186 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8187 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8188 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8189 ;;Total ram usage:        0 bytes
  8190 ;; Hardware stack levels used:    1
  8191 ;; This function calls:
  8192 ;;		Nothing
  8193 ;; This function is called by:
  8194 ;;		_INTERRUPT_InterruptManager
  8195 ;; This function uses a non-reentrant model
  8196 ;;
  8197                           
  8198                           	psect	text41
  8199  002B18                     __ptext41:
  8200                           	opt stack 0
  8201  002B18                     _PIN_MANAGER_IOC:
  8202                           	opt stack 24
  8203                           
  8204                           ;incstack = 0
  8205  002B18  0012               	return		;funcret
  8206  002B1A                     __end_of_PIN_MANAGER_IOC:
  8207                           	opt stack 0
  8208                           tosu	equ	0xFFF
  8209                           tosh	equ	0xFFE
  8210                           tosl	equ	0xFFD
  8211                           pclatu	equ	0xFFB
  8212                           pclath	equ	0xFFA
  8213                           tblptru	equ	0xFF8
  8214                           tblptrh	equ	0xFF7
  8215                           tblptrl	equ	0xFF6
  8216                           tablat	equ	0xFF5
  8217                           prodh	equ	0xFF4
  8218                           prodl	equ	0xFF3
  8219                           intcon	equ	0xFF2
  8220                           intcon3	equ	0xFF0
  8221                           postinc0	equ	0xFEE
  8222                           fsr0h	equ	0xFEA
  8223                           fsr0l	equ	0xFE9
  8224                           wreg	equ	0xFE8
  8225                           indf1	equ	0xFE7
  8226                           fsr1h	equ	0xFE2
  8227                           fsr1l	equ	0xFE1
  8228                           indf2	equ	0xFDF
  8229                           postinc2	equ	0xFDE
  8230                           postdec2	equ	0xFDD
  8231                           fsr2h	equ	0xFDA
  8232                           fsr2l	equ	0xFD9
  8233                           status	equ	0xFD8
  8234                           
  8235 ;; *************** function _PIN_MANAGER_INT2 *****************
  8236 ;; Defined at:
  8237 ;;		line 29 in file "pin_manager.c"
  8238 ;; Parameters:    Size  Location     Type
  8239 ;;		None
  8240 ;; Auto vars:     Size  Location     Type
  8241 ;;		None
  8242 ;; Return value:  Size  Location     Type
  8243 ;;                  1    wreg      void 
  8244 ;; Registers used:
  8245 ;;		None
  8246 ;; Tracked objects:
  8247 ;;		On entry : 0/0
  8248 ;;		On exit  : 0/0
  8249 ;;		Unchanged: 0/0
  8250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8251 ;;      Params:         0       0       0       0       0       0       0       0       0
  8252 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8253 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8254 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8255 ;;Total ram usage:        0 bytes
  8256 ;; Hardware stack levels used:    1
  8257 ;; This function calls:
  8258 ;;		Nothing
  8259 ;; This function is called by:
  8260 ;;		_INTERRUPT_InterruptManager
  8261 ;; This function uses a non-reentrant model
  8262 ;;
  8263                           
  8264                           	psect	text42
  8265  002B1A                     __ptext42:
  8266                           	opt stack 0
  8267  002B1A                     _PIN_MANAGER_INT2:
  8268                           	opt stack 24
  8269                           
  8270                           ;incstack = 0
  8271  002B1A  0012               	return		;funcret
  8272  002B1C                     __end_of_PIN_MANAGER_INT2:
  8273                           	opt stack 0
  8274                           tosu	equ	0xFFF
  8275                           tosh	equ	0xFFE
  8276                           tosl	equ	0xFFD
  8277                           pclatu	equ	0xFFB
  8278                           pclath	equ	0xFFA
  8279                           tblptru	equ	0xFF8
  8280                           tblptrh	equ	0xFF7
  8281                           tblptrl	equ	0xFF6
  8282                           tablat	equ	0xFF5
  8283                           prodh	equ	0xFF4
  8284                           prodl	equ	0xFF3
  8285                           intcon	equ	0xFF2
  8286                           intcon3	equ	0xFF0
  8287                           postinc0	equ	0xFEE
  8288                           fsr0h	equ	0xFEA
  8289                           fsr0l	equ	0xFE9
  8290                           wreg	equ	0xFE8
  8291                           indf1	equ	0xFE7
  8292                           fsr1h	equ	0xFE2
  8293                           fsr1l	equ	0xFE1
  8294                           indf2	equ	0xFDF
  8295                           postinc2	equ	0xFDE
  8296                           postdec2	equ	0xFDD
  8297                           fsr2h	equ	0xFDA
  8298                           fsr2l	equ	0xFD9
  8299                           status	equ	0xFD8
  8300                           
  8301 ;; *************** function _PIN_MANAGER_INT1 *****************
  8302 ;; Defined at:
  8303 ;;		line 24 in file "pin_manager.c"
  8304 ;; Parameters:    Size  Location     Type
  8305 ;;		None
  8306 ;; Auto vars:     Size  Location     Type
  8307 ;;		None
  8308 ;; Return value:  Size  Location     Type
  8309 ;;                  1    wreg      void 
  8310 ;; Registers used:
  8311 ;;		None
  8312 ;; Tracked objects:
  8313 ;;		On entry : 0/0
  8314 ;;		On exit  : 0/0
  8315 ;;		Unchanged: 0/0
  8316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8317 ;;      Params:         0       0       0       0       0       0       0       0       0
  8318 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8319 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8320 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8321 ;;Total ram usage:        0 bytes
  8322 ;; Hardware stack levels used:    1
  8323 ;; This function calls:
  8324 ;;		Nothing
  8325 ;; This function is called by:
  8326 ;;		_INTERRUPT_InterruptManager
  8327 ;; This function uses a non-reentrant model
  8328 ;;
  8329                           
  8330                           	psect	text43
  8331  002B1C                     __ptext43:
  8332                           	opt stack 0
  8333  002B1C                     _PIN_MANAGER_INT1:
  8334                           	opt stack 24
  8335                           
  8336                           ;incstack = 0
  8337  002B1C  0012               	return		;funcret
  8338  002B1E                     __end_of_PIN_MANAGER_INT1:
  8339                           	opt stack 0
  8340                           tosu	equ	0xFFF
  8341                           tosh	equ	0xFFE
  8342                           tosl	equ	0xFFD
  8343                           pclatu	equ	0xFFB
  8344                           pclath	equ	0xFFA
  8345                           tblptru	equ	0xFF8
  8346                           tblptrh	equ	0xFF7
  8347                           tblptrl	equ	0xFF6
  8348                           tablat	equ	0xFF5
  8349                           prodh	equ	0xFF4
  8350                           prodl	equ	0xFF3
  8351                           intcon	equ	0xFF2
  8352                           intcon3	equ	0xFF0
  8353                           postinc0	equ	0xFEE
  8354                           fsr0h	equ	0xFEA
  8355                           fsr0l	equ	0xFE9
  8356                           wreg	equ	0xFE8
  8357                           indf1	equ	0xFE7
  8358                           fsr1h	equ	0xFE2
  8359                           fsr1l	equ	0xFE1
  8360                           indf2	equ	0xFDF
  8361                           postinc2	equ	0xFDE
  8362                           postdec2	equ	0xFDD
  8363                           fsr2h	equ	0xFDA
  8364                           fsr2l	equ	0xFD9
  8365                           status	equ	0xFD8
  8366                           
  8367 ;; *************** function _PIN_MANAGER_INT0 *****************
  8368 ;; Defined at:
  8369 ;;		line 19 in file "pin_manager.c"
  8370 ;; Parameters:    Size  Location     Type
  8371 ;;		None
  8372 ;; Auto vars:     Size  Location     Type
  8373 ;;		None
  8374 ;; Return value:  Size  Location     Type
  8375 ;;                  1    wreg      void 
  8376 ;; Registers used:
  8377 ;;		None
  8378 ;; Tracked objects:
  8379 ;;		On entry : 0/0
  8380 ;;		On exit  : 0/0
  8381 ;;		Unchanged: 0/0
  8382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8383 ;;      Params:         0       0       0       0       0       0       0       0       0
  8384 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8385 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8386 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8387 ;;Total ram usage:        0 bytes
  8388 ;; Hardware stack levels used:    1
  8389 ;; This function calls:
  8390 ;;		Nothing
  8391 ;; This function is called by:
  8392 ;;		_INTERRUPT_InterruptManager
  8393 ;; This function uses a non-reentrant model
  8394 ;;
  8395                           
  8396                           	psect	text44
  8397  002B1E                     __ptext44:
  8398                           	opt stack 0
  8399  002B1E                     _PIN_MANAGER_INT0:
  8400                           	opt stack 24
  8401                           
  8402                           ;incstack = 0
  8403  002B1E  0012               	return		;funcret
  8404  002B20                     __end_of_PIN_MANAGER_INT0:
  8405                           	opt stack 0
  8406                           tosu	equ	0xFFF
  8407                           tosh	equ	0xFFE
  8408                           tosl	equ	0xFFD
  8409                           pclatu	equ	0xFFB
  8410                           pclath	equ	0xFFA
  8411                           tblptru	equ	0xFF8
  8412                           tblptrh	equ	0xFF7
  8413                           tblptrl	equ	0xFF6
  8414                           tablat	equ	0xFF5
  8415                           prodh	equ	0xFF4
  8416                           prodl	equ	0xFF3
  8417                           intcon	equ	0xFF2
  8418                           intcon3	equ	0xFF0
  8419                           postinc0	equ	0xFEE
  8420                           fsr0h	equ	0xFEA
  8421                           fsr0l	equ	0xFE9
  8422                           wreg	equ	0xFE8
  8423                           indf1	equ	0xFE7
  8424                           fsr1h	equ	0xFE2
  8425                           fsr1l	equ	0xFE1
  8426                           indf2	equ	0xFDF
  8427                           postinc2	equ	0xFDE
  8428                           postdec2	equ	0xFDD
  8429                           fsr2h	equ	0xFDA
  8430                           fsr2l	equ	0xFD9
  8431                           status	equ	0xFD8
  8432                           
  8433 ;; *************** function _MEMORY_ISR *****************
  8434 ;; Defined at:
  8435 ;;		line 198 in file "memory.c"
  8436 ;; Parameters:    Size  Location     Type
  8437 ;;		None
  8438 ;; Auto vars:     Size  Location     Type
  8439 ;;		None
  8440 ;; Return value:  Size  Location     Type
  8441 ;;                  1    wreg      void 
  8442 ;; Registers used:
  8443 ;;		None
  8444 ;; Tracked objects:
  8445 ;;		On entry : 0/0
  8446 ;;		On exit  : 0/0
  8447 ;;		Unchanged: 0/0
  8448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8449 ;;      Params:         0       0       0       0       0       0       0       0       0
  8450 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8451 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8452 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8453 ;;Total ram usage:        0 bytes
  8454 ;; Hardware stack levels used:    1
  8455 ;; This function calls:
  8456 ;;		Nothing
  8457 ;; This function is called by:
  8458 ;;		_INTERRUPT_InterruptManager
  8459 ;; This function uses a non-reentrant model
  8460 ;;
  8461                           
  8462                           	psect	text45
  8463  002B20                     __ptext45:
  8464                           	opt stack 0
  8465  002B20                     _MEMORY_ISR:
  8466                           	opt stack 24
  8467                           
  8468                           ;incstack = 0
  8469  002B20  0012               	return		;funcret
  8470  002B22                     __end_of_MEMORY_ISR:
  8471                           	opt stack 0
  8472                           tosu	equ	0xFFF
  8473                           tosh	equ	0xFFE
  8474                           tosl	equ	0xFFD
  8475                           pclatu	equ	0xFFB
  8476                           pclath	equ	0xFFA
  8477                           tblptru	equ	0xFF8
  8478                           tblptrh	equ	0xFF7
  8479                           tblptrl	equ	0xFF6
  8480                           tablat	equ	0xFF5
  8481                           prodh	equ	0xFF4
  8482                           prodl	equ	0xFF3
  8483                           intcon	equ	0xFF2
  8484                           intcon3	equ	0xFF0
  8485                           postinc0	equ	0xFEE
  8486                           fsr0h	equ	0xFEA
  8487                           fsr0l	equ	0xFE9
  8488                           wreg	equ	0xFE8
  8489                           indf1	equ	0xFE7
  8490                           fsr1h	equ	0xFE2
  8491                           fsr1l	equ	0xFE1
  8492                           indf2	equ	0xFDF
  8493                           postinc2	equ	0xFDE
  8494                           postdec2	equ	0xFDD
  8495                           fsr2h	equ	0xFDA
  8496                           fsr2l	equ	0xFD9
  8497                           status	equ	0xFD8
  8498                           
  8499 ;; *************** function _I2C1_ISR *****************
  8500 ;; Defined at:
  8501 ;;		line 236 in file "i2c1.c"
  8502 ;; Parameters:    Size  Location     Type
  8503 ;;		None
  8504 ;; Auto vars:     Size  Location     Type
  8505 ;;		None
  8506 ;; Return value:  Size  Location     Type
  8507 ;;                  1    wreg      void 
  8508 ;; Registers used:
  8509 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8510 ;; Tracked objects:
  8511 ;;		On entry : 0/0
  8512 ;;		On exit  : 0/0
  8513 ;;		Unchanged: 0/0
  8514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8515 ;;      Params:         0       0       0       0       0       0       0       0       0
  8516 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8517 ;;      Temps:          2       0       0       0       0       0       0       0       0
  8518 ;;      Totals:         2       0       0       0       0       0       0       0       0
  8519 ;;Total ram usage:        2 bytes
  8520 ;; Hardware stack levels used:    1
  8521 ;; Hardware stack levels required when called:    1
  8522 ;; This function calls:
  8523 ;;		_I2C1_FunctionComplete
  8524 ;;		_I2C1_Stop
  8525 ;; This function is called by:
  8526 ;;		_INTERRUPT_InterruptManager
  8527 ;; This function uses a non-reentrant model
  8528 ;;
  8529                           
  8530                           	psect	text46
  8531  001A06                     __ptext46:
  8532                           	opt stack 0
  8533  001A06                     _I2C1_ISR:
  8534                           	opt stack 23
  8535                           
  8536                           ;i2c1.c: 239: static uint8_t *pi2c_buf_ptr;
  8537                           ;i2c1.c: 240: static uint16_t i2c_address = 0;
  8538                           ;i2c1.c: 241: static uint8_t i2c_bytes_left = 0;
  8539                           ;i2c1.c: 242: static uint8_t i2c_10bit_address_restart = 0;
  8540                           ;i2c1.c: 244: PIR1bits.SSPIF = 0;
  8541                           
  8542                           ;incstack = 0
  8543  001A06  969E               	bcf	3998,3,c	;volatile
  8544                           
  8545                           ;i2c1.c: 248: if(SSPCON1bits.WCOL)
  8546  001A08  AEC6               	btfss	4038,7,c	;volatile
  8547  001A0A  D100               	goto	i2l348
  8548                           
  8549                           ;i2c1.c: 249: {
  8550                           ;i2c1.c: 251: SSPCON1bits.WCOL = 0;
  8551  001A0C  9EC6               	bcf	4038,7,c	;volatile
  8552                           
  8553                           ;i2c1.c: 253: *(p_i2c1_current->pTrFlag) = I2C1_MESSAGE_FAIL;
  8554  001A0E  0E00               	movlw	0
  8555  001A10  6E41               	movwf	_i2c1_state,c
  8556                           
  8557                           ;i2c1.c: 256: p_i2c1_current = (0);
  8558  001A12  0E00               	movlw	0
  8559  001A14  0100               	movlb	0	; () banked
  8560  001A16  6FBF               	movwf	_p_i2c1_current& (0+255),b
  8561  001A18  0E00               	movlw	0
  8562  001A1A  0100               	movlb	0	; () banked
  8563  001A1C  6FC0               	movwf	(_p_i2c1_current+1)& (0+255),b
  8564                           
  8565                           ; BSR set to: 0
  8566                           ;i2c1.c: 258: return;
  8567  001A1E  0012               	return	
  8568  001A20                     i2l349:
  8569                           
  8570                           ;i2c1.c: 266: if(i2c1_object.trStatus.s.empty != 1)
  8571  001A20  0100               	movlb	0	; () banked
  8572  001A22  B3B7               	btfsc	(_i2c1_object+4)& (0+255),1,b
  8573  001A24  0012               	return	
  8574                           
  8575                           ; BSR set to: 0
  8576                           ;i2c1.c: 267: {
  8577                           ;i2c1.c: 269: p_i2c1_current = i2c1_object.pTrHead;
  8578  001A26  C0B5  F0BF         	movff	_i2c1_object+2,_p_i2c1_current
  8579  001A2A  C0B6  F0C0         	movff	_i2c1_object+3,_p_i2c1_current+1
  8580                           
  8581                           ; BSR set to: 0
  8582                           ;i2c1.c: 270: i2c1_trb_count = i2c1_object.pTrHead->count;
  8583  001A2E  C0B5  FFD9         	movff	_i2c1_object+2,fsr2l
  8584  001A32  C0B6  FFDA         	movff	_i2c1_object+3,fsr2h
  8585  001A36  50DF               	movf	indf2,w,c
  8586  001A38  6E40               	movwf	_i2c1_trb_count,c
  8587                           
  8588                           ; BSR set to: 0
  8589                           ;i2c1.c: 271: p_i2c1_trb_current = i2c1_object.pTrHead->ptrb_list;
  8590  001A3A  0100               	movlb	0	; () banked
  8591  001A3C  EE20 F001          	lfsr	2,1
  8592  001A40  51B5               	movf	(_i2c1_object+2)& (0+255),w,b
  8593  001A42  26D9               	addwf	fsr2l,f,c
  8594  001A44  51B6               	movf	(_i2c1_object+3)& (0+255),w,b
  8595  001A46  22DA               	addwfc	fsr2h,f,c
  8596  001A48  CFDE F03B          	movff	postinc2,_p_i2c1_trb_current
  8597  001A4C  CFDD F03C          	movff	postdec2,_p_i2c1_trb_current+1
  8598                           
  8599                           ; BSR set to: 0
  8600                           ;i2c1.c: 273: i2c1_object.pTrHead++;
  8601  001A50  0E06               	movlw	6
  8602  001A52  0100               	movlb	0	; () banked
  8603  001A54  27B5               	addwf	(_i2c1_object+2)& (0+255),f,b
  8604  001A56  0E00               	movlw	0
  8605  001A58  23B6               	addwfc	(_i2c1_object+3)& (0+255),f,b
  8606                           
  8607                           ; BSR set to: 0
  8608                           ;i2c1.c: 276: if(i2c1_object.pTrHead == (i2c1_tr_queue + 1))
  8609  001A5A  0EE4               	movlw	low (_i2c1_tr_queue+6)
  8610  001A5C  0100               	movlb	0	; () banked
  8611  001A5E  19B5               	xorwf	(_i2c1_object+2)& (0+255),w,b
  8612  001A60  E10B               	bnz	i2l5162
  8613  001A62  0E00               	movlw	high (_i2c1_tr_queue+6)
  8614  001A64  0100               	movlb	0	; () banked
  8615  001A66  19B6               	xorwf	(_i2c1_object+3)& (0+255),w,b
  8616  001A68  A4D8               	btfss	status,2,c
  8617  001A6A  D006               	goto	i2l351
  8618                           
  8619                           ; BSR set to: 0
  8620                           ;i2c1.c: 277: {
  8621                           ;i2c1.c: 279: i2c1_object.pTrHead = i2c1_tr_queue;
  8622  001A6C  0EDE               	movlw	low _i2c1_tr_queue
  8623  001A6E  0100               	movlb	0	; () banked
  8624  001A70  6FB5               	movwf	(_i2c1_object+2)& (0+255),b
  8625  001A72  0E00               	movlw	high _i2c1_tr_queue
  8626  001A74  0100               	movlb	0	; () banked
  8627  001A76  6FB6               	movwf	(_i2c1_object+3)& (0+255),b
  8628  001A78                     i2l351:
  8629  001A78                     i2l5162:
  8630                           
  8631                           ; BSR set to: 0
  8632                           ;i2c1.c: 280: }
  8633                           ;i2c1.c: 284: i2c1_object.trStatus.s.full = 0;
  8634  001A78  0100               	movlb	0	; () banked
  8635  001A7A  91B7               	bcf	(_i2c1_object+4)& (0+255),0,b
  8636                           
  8637                           ;i2c1.c: 287: if(i2c1_object.pTrHead == i2c1_object.pTrTail)
  8638  001A7C  0100               	movlb	0	; () banked
  8639  001A7E  51B3               	movf	_i2c1_object& (0+255),w,b
  8640  001A80  0100               	movlb	0	; () banked
  8641  001A82  19B5               	xorwf	(_i2c1_object+2)& (0+255),w,b
  8642  001A84  E108               	bnz	i2l352
  8643  001A86  0100               	movlb	0	; () banked
  8644  001A88  51B4               	movf	(_i2c1_object+1)& (0+255),w,b
  8645  001A8A  0100               	movlb	0	; () banked
  8646  001A8C  19B6               	xorwf	(_i2c1_object+3)& (0+255),w,b
  8647  001A8E  A4D8               	btfss	status,2,c
  8648  001A90  D002               	goto	i2l352
  8649                           
  8650                           ; BSR set to: 0
  8651                           ;i2c1.c: 288: {
  8652                           ;i2c1.c: 290: i2c1_object.trStatus.s.empty = 1;
  8653  001A92  0100               	movlb	0	; () banked
  8654  001A94  83B7               	bsf	(_i2c1_object+4)& (0+255),1,b
  8655  001A96                     i2l352:
  8656                           
  8657                           ; BSR set to: 0
  8658                           ;i2c1.c: 291: }
  8659                           ;i2c1.c: 294: SSPCON2bits.SEN = 1;
  8660  001A96  80C5               	bsf	4037,0,c	;volatile
  8661                           
  8662                           ; BSR set to: 0
  8663                           ;i2c1.c: 297: i2c1_state = S_MASTER_SEND_ADDR;
  8664  001A98  0E02               	movlw	2
  8665  001A9A  6E41               	movwf	_i2c1_state,c
  8666                           
  8667                           ; BSR set to: 0
  8668                           ;i2c1.c: 298: }
  8669                           ;i2c1.c: 300: break;
  8670  001A9C  0012               	return	
  8671  001A9E                     i2l354:
  8672                           
  8673                           ;i2c1.c: 307: SSPCON2bits.RSEN = 1;
  8674  001A9E  82C5               	bsf	4037,1,c	;volatile
  8675                           
  8676                           ;i2c1.c: 310: i2c1_state = S_MASTER_SEND_ADDR;
  8677  001AA0  0E02               	movlw	2
  8678  001AA2  6E41               	movwf	_i2c1_state,c
  8679                           
  8680                           ;i2c1.c: 312: break;
  8681  001AA4  0012               	return	
  8682  001AA6                     i2l355:
  8683                           
  8684                           ;i2c1.c: 316: if(SSPCON2bits.ACKSTAT)
  8685  001AA6  ACC5               	btfss	4037,6,c	;volatile
  8686  001AA8  D006               	goto	i2l356
  8687                           
  8688                           ;i2c1.c: 317: {
  8689                           ;i2c1.c: 318: i2c1_object.i2cErrors++;
  8690  001AAA  0100               	movlb	0	; () banked
  8691  001AAC  2BB9               	incf	(_i2c1_object+6)& (0+255),f,b
  8692                           
  8693                           ; BSR set to: 0
  8694                           ;i2c1.c: 319: I2C1_Stop(I2C1_MESSAGE_ADDRESS_NO_ACK);
  8695  001AAE  0E04               	movlw	4
  8696  001AB0  EC84  F015         	call	_I2C1_Stop
  8697                           
  8698                           ;i2c1.c: 320: }
  8699  001AB4  0012               	return	
  8700  001AB6                     i2l356:
  8701                           
  8702                           ;i2c1.c: 321: else
  8703                           ;i2c1.c: 322: {
  8704                           ;i2c1.c: 324: SSPBUF = (i2c_address >> 1) & 0x00FF;
  8705  001AB6  90D8               	bcf	status,0,c
  8706  001AB8  3049               	rrcf	I2C1_ISR@i2c_address+1,w,c
  8707  001ABA  6E02               	movwf	(??_I2C1_ISR+1)& (0+255),c
  8708  001ABC  3048               	rrcf	I2C1_ISR@i2c_address,w,c
  8709  001ABE  6E01               	movwf	??_I2C1_ISR& (0+255),c
  8710  001AC0  5001               	movf	??_I2C1_ISR,w,c
  8711  001AC2  6EC9               	movwf	4041,c	;volatile
  8712                           
  8713                           ;i2c1.c: 327: if(i2c_address & 0x01)
  8714  001AC4  A048               	btfss	I2C1_ISR@i2c_address,0,c
  8715  001AC6  D003               	goto	i2l358
  8716                           
  8717                           ;i2c1.c: 328: {
  8718                           ;i2c1.c: 331: i2c1_state = S_MASTER_10BIT_RESTART;
  8719  001AC8  0E0B               	movlw	11
  8720  001ACA  6E41               	movwf	_i2c1_state,c
  8721                           
  8722                           ;i2c1.c: 332: }
  8723  001ACC  0012               	return	
  8724  001ACE                     i2l358:
  8725                           
  8726                           ;i2c1.c: 333: else
  8727                           ;i2c1.c: 334: {
  8728                           ;i2c1.c: 336: i2c1_state = S_MASTER_SEND_DATA;
  8729  001ACE  0E03               	movlw	3
  8730  001AD0  6E41               	movwf	_i2c1_state,c
  8731                           
  8732                           ;i2c1.c: 337: }
  8733                           ;i2c1.c: 338: }
  8734                           ;i2c1.c: 340: break;
  8735  001AD2  0012               	return	
  8736  001AD4                     i2l360:
  8737                           
  8738                           ;i2c1.c: 344: if(SSPCON2bits.ACKSTAT)
  8739  001AD4  ACC5               	btfss	4037,6,c	;volatile
  8740  001AD6  D006               	goto	i2l361
  8741                           
  8742                           ;i2c1.c: 345: {
  8743                           ;i2c1.c: 346: i2c1_object.i2cErrors++;
  8744  001AD8  0100               	movlb	0	; () banked
  8745  001ADA  2BB9               	incf	(_i2c1_object+6)& (0+255),f,b
  8746                           
  8747                           ; BSR set to: 0
  8748                           ;i2c1.c: 347: I2C1_Stop(I2C1_MESSAGE_ADDRESS_NO_ACK);
  8749  001ADC  0E04               	movlw	4
  8750  001ADE  EC84  F015         	call	_I2C1_Stop
  8751                           
  8752                           ;i2c1.c: 348: }
  8753  001AE2  0012               	return	
  8754  001AE4                     i2l361:
  8755                           
  8756                           ;i2c1.c: 349: else
  8757                           ;i2c1.c: 350: {
  8758                           ;i2c1.c: 353: SSPCON2bits.RSEN = 1;
  8759  001AE4  82C5               	bsf	4037,1,c	;volatile
  8760                           
  8761                           ;i2c1.c: 357: i2c_address = 0x00F0 | ((i2c_address >> 8) & 0x0006);
  8762  001AE6  C048  F001         	movff	I2C1_ISR@i2c_address,??_I2C1_ISR
  8763  001AEA  C049  F002         	movff	I2C1_ISR@i2c_address+1,??_I2C1_ISR+1
  8764  001AEE  C002  F001         	movff	??_I2C1_ISR+1,??_I2C1_ISR
  8765  001AF2  6A02               	clrf	??_I2C1_ISR+1,c
  8766  001AF4  0E06               	movlw	6
  8767  001AF6  1601               	andwf	??_I2C1_ISR,f,c
  8768  001AF8  0E00               	movlw	0
  8769  001AFA  1602               	andwf	??_I2C1_ISR+1,f,c
  8770  001AFC  0EF0               	movlw	240
  8771  001AFE  1001               	iorwf	??_I2C1_ISR,w,c
  8772  001B00  6E48               	movwf	I2C1_ISR@i2c_address,c
  8773  001B02  5002               	movf	??_I2C1_ISR+1,w,c
  8774  001B04  6E49               	movwf	I2C1_ISR@i2c_address+1,c
  8775                           
  8776                           ;i2c1.c: 360: i2c_address |= 0x0001;
  8777  001B06  8048               	bsf	I2C1_ISR@i2c_address,0,c
  8778                           
  8779                           ;i2c1.c: 363: i2c_10bit_address_restart = 1;
  8780  001B08  0E01               	movlw	1
  8781  001B0A  6E3E               	movwf	I2C1_ISR@i2c_10bit_address_restart,c
  8782                           
  8783                           ;i2c1.c: 366: i2c1_state = S_MASTER_SEND_ADDR;
  8784  001B0C  0E02               	movlw	2
  8785  001B0E  6E41               	movwf	_i2c1_state,c
  8786                           
  8787                           ;i2c1.c: 367: }
  8788                           ;i2c1.c: 369: break;
  8789  001B10  0012               	return	
  8790  001B12                     
  8791                           ;i2c1.c: 384: if(i2c_10bit_address_restart != 1)
  8792  001B12  043E               	decf	I2C1_ISR@i2c_10bit_address_restart,w,c
  8793  001B14  B4D8               	btfsc	status,2,c
  8794  001B16  D01A               	goto	i2l365
  8795                           
  8796                           ;i2c1.c: 385: {
  8797                           ;i2c1.c: 387: i2c_address = p_i2c1_trb_current->address;
  8798  001B18  C03B  FFD9         	movff	_p_i2c1_trb_current,fsr2l
  8799  001B1C  C03C  FFDA         	movff	_p_i2c1_trb_current+1,fsr2h
  8800  001B20  CFDE F048          	movff	postinc2,I2C1_ISR@i2c_address
  8801  001B24  CFDD F049          	movff	postdec2,I2C1_ISR@i2c_address+1
  8802                           
  8803                           ;i2c1.c: 388: pi2c_buf_ptr = p_i2c1_trb_current->pbuffer;
  8804  001B28  EE20 F003          	lfsr	2,3
  8805  001B2C  503B               	movf	_p_i2c1_trb_current,w,c
  8806  001B2E  26D9               	addwf	fsr2l,f,c
  8807  001B30  503C               	movf	_p_i2c1_trb_current+1,w,c
  8808  001B32  22DA               	addwfc	fsr2h,f,c
  8809  001B34  CFDE F0BD          	movff	postinc2,I2C1_ISR@pi2c_buf_ptr
  8810  001B38  CFDD F0BE          	movff	postdec2,I2C1_ISR@pi2c_buf_ptr+1
  8811                           
  8812                           ;i2c1.c: 389: i2c_bytes_left = p_i2c1_trb_current->length;
  8813  001B3C  EE20 F002          	lfsr	2,2
  8814  001B40  503B               	movf	_p_i2c1_trb_current,w,c
  8815  001B42  26D9               	addwf	fsr2l,f,c
  8816  001B44  503C               	movf	_p_i2c1_trb_current+1,w,c
  8817  001B46  22DA               	addwfc	fsr2h,f,c
  8818  001B48  50DF               	movf	indf2,w,c
  8819  001B4A  6E3F               	movwf	I2C1_ISR@i2c_bytes_left,c
  8820  001B4C                     i2l365:
  8821                           
  8822                           ;i2c1.c: 412: else
  8823                           ;i2c1.c: 413: {
  8824                           ;i2c1.c: 415: SSPBUF = i2c_address;
  8825  001B4C  C048  FFC9         	movff	I2C1_ISR@i2c_address,4041	;volatile
  8826                           
  8827                           ;i2c1.c: 416: if(i2c_address & 0x01)
  8828  001B50  A048               	btfss	I2C1_ISR@i2c_address,0,c
  8829  001B52  D003               	goto	i2l369
  8830                           
  8831                           ;i2c1.c: 417: {
  8832                           ;i2c1.c: 419: i2c1_state = S_MASTER_ACK_ADDR;
  8833  001B54  0E05               	movlw	5
  8834  001B56  6E41               	movwf	_i2c1_state,c
  8835                           
  8836                           ;i2c1.c: 420: }
  8837  001B58  0012               	return	
  8838  001B5A                     i2l369:
  8839                           
  8840                           ;i2c1.c: 421: else
  8841                           ;i2c1.c: 422: {
  8842                           ;i2c1.c: 424: i2c1_state = S_MASTER_SEND_DATA;
  8843  001B5A  0E03               	movlw	3
  8844  001B5C  6E41               	movwf	_i2c1_state,c
  8845                           
  8846                           ;i2c1.c: 425: }
  8847                           ;i2c1.c: 426: }
  8848                           ;i2c1.c: 427: break;
  8849  001B5E  0012               	return	
  8850  001B60                     i2l371:
  8851                           
  8852                           ;i2c1.c: 432: if(SSPCON2bits.ACKSTAT)
  8853  001B60  ACC5               	btfss	4037,6,c	;volatile
  8854  001B62  D007               	goto	i2l372
  8855                           
  8856                           ;i2c1.c: 433: {
  8857                           ;i2c1.c: 435: i2c1_object.i2cErrors++;
  8858  001B64  0100               	movlb	0	; () banked
  8859  001B66  2BB9               	incf	(_i2c1_object+6)& (0+255),f,b
  8860                           
  8861                           ; BSR set to: 0
  8862                           ;i2c1.c: 438: SSPCON2bits.ACKSTAT = 0;
  8863  001B68  9CC5               	bcf	4037,6,c	;volatile
  8864                           
  8865                           ; BSR set to: 0
  8866                           ;i2c1.c: 441: I2C1_Stop(I2C1_DATA_NO_ACK);
  8867  001B6A  0E05               	movlw	5
  8868  001B6C  EC84  F015         	call	_I2C1_Stop
  8869                           
  8870                           ;i2c1.c: 443: }
  8871  001B70  0012               	return	
  8872  001B72                     i2l372:
  8873                           
  8874                           ;i2c1.c: 444: else
  8875                           ;i2c1.c: 445: {
  8876                           ;i2c1.c: 447: if(i2c_bytes_left-- == 0U)
  8877  001B72  063F               	decf	I2C1_ISR@i2c_bytes_left,f,c
  8878  001B74  283F               	incf	I2C1_ISR@i2c_bytes_left,w,c
  8879  001B76  A4D8               	btfss	status,2,c
  8880  001B78  D00E               	goto	i2l374
  8881                           
  8882                           ;i2c1.c: 448: {
  8883                           ;i2c1.c: 452: p_i2c1_trb_current++;
  8884  001B7A  0E06               	movlw	6
  8885  001B7C  263B               	addwf	_p_i2c1_trb_current,f,c
  8886  001B7E  0E00               	movlw	0
  8887  001B80  223C               	addwfc	_p_i2c1_trb_current+1,f,c
  8888                           
  8889                           ;i2c1.c: 455: if(--i2c1_trb_count == 0)
  8890  001B82  2E40               	decfsz	_i2c1_trb_count,f,c
  8891  001B84  D004               	goto	i2l375
  8892                           
  8893                           ;i2c1.c: 456: {
  8894                           ;i2c1.c: 457: I2C1_Stop(I2C1_MESSAGE_COMPLETE);
  8895  001B86  0E00               	movlw	0
  8896  001B88  EC84  F015         	call	_I2C1_Stop
  8897                           
  8898                           ;i2c1.c: 458: }
  8899  001B8C  0012               	return	
  8900  001B8E                     i2l375:
  8901                           
  8902                           ;i2c1.c: 459: else
  8903                           ;i2c1.c: 460: {
  8904                           ;i2c1.c: 467: SSPCON2bits.RSEN = 1;
  8905  001B8E  82C5               	bsf	4037,1,c	;volatile
  8906                           
  8907                           ;i2c1.c: 470: i2c1_state = S_MASTER_SEND_ADDR;
  8908  001B90  0E02               	movlw	2
  8909  001B92  6E41               	movwf	_i2c1_state,c
  8910                           
  8911                           ;i2c1.c: 472: }
  8912                           ;i2c1.c: 473: }
  8913  001B94  0012               	return	
  8914  001B96                     i2l374:
  8915                           
  8916                           ;i2c1.c: 474: else
  8917                           ;i2c1.c: 475: {
  8918                           ;i2c1.c: 477: SSPBUF = *pi2c_buf_ptr++;
  8919  001B96  C0BD  FFD9         	movff	I2C1_ISR@pi2c_buf_ptr,fsr2l
  8920  001B9A  C0BE  FFDA         	movff	I2C1_ISR@pi2c_buf_ptr+1,fsr2h
  8921  001B9E  50DF               	movf	indf2,w,c
  8922  001BA0  6EC9               	movwf	4041,c	;volatile
  8923  001BA2  0100               	movlb	0	; () banked
  8924  001BA4  4BBD               	infsnz	I2C1_ISR@pi2c_buf_ptr& (0+255),f,b
  8925  001BA6  2BBE               	incf	(I2C1_ISR@pi2c_buf_ptr+1)& (0+255),f,b
  8926                           
  8927                           ; BSR set to: 0
  8928                           ;i2c1.c: 478: }
  8929                           ;i2c1.c: 479: }
  8930                           ;i2c1.c: 480: break;
  8931                           
  8932                           ; BSR set to: 0
  8933  001BA8  0012               	return	
  8934  001BAA                     i2l378:
  8935                           
  8936                           ;i2c1.c: 485: if(SSPCON2bits.ACKSTAT)
  8937  001BAA  ACC5               	btfss	4037,6,c	;volatile
  8938  001BAC  D007               	goto	i2l379
  8939                           
  8940                           ;i2c1.c: 486: {
  8941                           ;i2c1.c: 489: i2c1_object.i2cErrors++;
  8942  001BAE  0100               	movlb	0	; () banked
  8943  001BB0  2BB9               	incf	(_i2c1_object+6)& (0+255),f,b
  8944                           
  8945                           ; BSR set to: 0
  8946                           ;i2c1.c: 492: I2C1_Stop(I2C1_MESSAGE_ADDRESS_NO_ACK);
  8947  001BB2  0E04               	movlw	4
  8948  001BB4  EC84  F015         	call	_I2C1_Stop
  8949                           
  8950                           ;i2c1.c: 495: SSPCON2bits.ACKSTAT = 0;
  8951  001BB8  9CC5               	bcf	4037,6,c	;volatile
  8952                           
  8953                           ;i2c1.c: 496: }
  8954  001BBA  0012               	return	
  8955  001BBC                     i2l379:
  8956                           
  8957                           ;i2c1.c: 497: else
  8958                           ;i2c1.c: 498: {
  8959                           ;i2c1.c: 499: SSPCON2bits.RCEN = 1;
  8960  001BBC  86C5               	bsf	4037,3,c	;volatile
  8961                           
  8962                           ;i2c1.c: 500: i2c1_state = S_MASTER_ACK_RCV_DATA;
  8963  001BBE  0E08               	movlw	8
  8964  001BC0  6E41               	movwf	_i2c1_state,c
  8965                           
  8966                           ;i2c1.c: 501: }
  8967                           ;i2c1.c: 502: break;
  8968  001BC2  0012               	return	
  8969  001BC4                     
  8970                           ;i2c1.c: 509: i2c1_state = S_MASTER_ACK_RCV_DATA;
  8971  001BC4  0E08               	movlw	8
  8972  001BC6  6E41               	movwf	_i2c1_state,c
  8973                           
  8974                           ;i2c1.c: 512: SSPCON2bits.RCEN = 1;
  8975  001BC8  86C5               	bsf	4037,3,c	;volatile
  8976                           
  8977                           ;i2c1.c: 514: break;
  8978  001BCA  0012               	return	
  8979  001BCC                     
  8980                           ;i2c1.c: 519: *pi2c_buf_ptr++ = SSPBUF;
  8981  001BCC  C0BD  FFD9         	movff	I2C1_ISR@pi2c_buf_ptr,fsr2l
  8982  001BD0  C0BE  FFDA         	movff	I2C1_ISR@pi2c_buf_ptr+1,fsr2h
  8983  001BD4  CFC9 FFDF          	movff	4041,indf2	;volatile
  8984  001BD8  0100               	movlb	0	; () banked
  8985  001BDA  4BBD               	infsnz	I2C1_ISR@pi2c_buf_ptr& (0+255),f,b
  8986  001BDC  2BBE               	incf	(I2C1_ISR@pi2c_buf_ptr+1)& (0+255),f,b
  8987                           
  8988                           ; BSR set to: 0
  8989                           ;i2c1.c: 522: if(--i2c_bytes_left)
  8990  001BDE  0E01               	movlw	1
  8991  001BE0  5E3F               	subwf	I2C1_ISR@i2c_bytes_left,f,c
  8992  001BE2  B4D8               	btfsc	status,2,c
  8993  001BE4  D004               	goto	i2l383
  8994                           
  8995                           ; BSR set to: 0
  8996                           ;i2c1.c: 523: {
  8997                           ;i2c1.c: 529: SSPCON2bits.ACKDT = 0;
  8998  001BE6  9AC5               	bcf	4037,5,c	;volatile
  8999                           
  9000                           ; BSR set to: 0
  9001                           ;i2c1.c: 532: i2c1_state = S_MASTER_RCV_DATA;
  9002  001BE8  0E06               	movlw	6
  9003  001BEA  6E41               	movwf	_i2c1_state,c
  9004                           
  9005                           ;i2c1.c: 533: }
  9006  001BEC  D003               	goto	i2l384
  9007  001BEE                     i2l383:
  9008                           
  9009                           ; BSR set to: 0
  9010                           ;i2c1.c: 534: else
  9011                           ;i2c1.c: 535: {
  9012                           ;i2c1.c: 539: SSPCON2bits.ACKDT = 1;
  9013  001BEE  8AC5               	bsf	4037,5,c	;volatile
  9014                           
  9015                           ; BSR set to: 0
  9016                           ;i2c1.c: 541: I2C1_FunctionComplete();
  9017  001BF0  EC47  F015         	call	_I2C1_FunctionComplete	;wreg free
  9018  001BF4                     i2l384:
  9019                           
  9020                           ;i2c1.c: 542: }
  9021                           ;i2c1.c: 545: SSPCON2bits.ACKEN = 1;
  9022  001BF4  88C5               	bsf	4037,4,c	;volatile
  9023                           
  9024                           ;i2c1.c: 546: break;
  9025  001BF6  0012               	return	
  9026  001BF8                     
  9027                           ;i2c1.c: 549: case S_MASTER_SEND_STOP:
  9028                           ;i2c1.c: 552: I2C1_Stop(I2C1_MESSAGE_COMPLETE);
  9029  001BF8  0E00               	movlw	0
  9030  001BFA  EC84  F015         	call	_I2C1_Stop
  9031                           
  9032                           ;i2c1.c: 553: break;
  9033  001BFE  0012               	return	
  9034  001C00                     
  9035                           ;i2c1.c: 559: i2c1_object.i2cErrors++;
  9036  001C00  0100               	movlb	0	; () banked
  9037  001C02  2BB9               	incf	(_i2c1_object+6)& (0+255),f,b
  9038                           
  9039                           ; BSR set to: 0
  9040                           ;i2c1.c: 560: I2C1_Stop(I2C1_LOST_STATE);
  9041  001C04  0E06               	movlw	6
  9042  001C06  EC84  F015         	call	_I2C1_Stop
  9043                           
  9044                           ;i2c1.c: 563: }
  9045                           
  9046                           ;i2c1.c: 561: break;
  9047  001C0A  0012               	return	
  9048  001C0C                     i2l348:
  9049  001C0C  5041               	movf	_i2c1_state,w,c
  9050                           
  9051                           ; Switch size 1, requested type "space"
  9052                           ; Number of cases is 11, Range of values is 0 to 11
  9053                           ; switch strategies available:
  9054                           ; Name         Instructions Cycles
  9055                           ; simple_byte           34    18 (average)
  9056                           ;	Chosen strategy is simple_byte
  9057  001C0E  0A00               	xorlw	0	; case 0
  9058  001C10  B4D8               	btfsc	status,2,c
  9059  001C12  D706               	goto	i2l349
  9060  001C14  0A01               	xorlw	1	; case 1
  9061  001C16  B4D8               	btfsc	status,2,c
  9062  001C18  D742               	goto	i2l354
  9063  001C1A  0A03               	xorlw	3	; case 2
  9064  001C1C  B4D8               	btfsc	status,2,c
  9065  001C1E  D779               	goto	i2l363
  9066  001C20  0A01               	xorlw	1	; case 3
  9067  001C22  B4D8               	btfsc	status,2,c
  9068  001C24  D79D               	goto	i2l371
  9069  001C26  0A07               	xorlw	7	; case 4
  9070  001C28  B4D8               	btfsc	status,2,c
  9071  001C2A  D7E6               	goto	i2l385
  9072  001C2C  0A01               	xorlw	1	; case 5
  9073  001C2E  B4D8               	btfsc	status,2,c
  9074  001C30  D7BC               	goto	i2l378
  9075  001C32  0A03               	xorlw	3	; case 6
  9076  001C34  B4D8               	btfsc	status,2,c
  9077  001C36  D7C6               	goto	i2l381
  9078  001C38  0A01               	xorlw	1	; case 7
  9079  001C3A  B4D8               	btfsc	status,2,c
  9080  001C3C  D7DD               	goto	i2l385
  9081  001C3E  0A0F               	xorlw	15	; case 8
  9082  001C40  B4D8               	btfsc	status,2,c
  9083  001C42  D7C4               	goto	i2l382
  9084  001C44  0A02               	xorlw	2	; case 10
  9085  001C46  B4D8               	btfsc	status,2,c
  9086  001C48  D72E               	goto	i2l355
  9087  001C4A  0A01               	xorlw	1	; case 11
  9088  001C4C  B4D8               	btfsc	status,2,c
  9089  001C4E  D742               	goto	i2l360
  9090  001C50  D7D7               	goto	i2l387
  9091  001C52                     __end_of_I2C1_ISR:
  9092                           	opt stack 0
  9093                           tosu	equ	0xFFF
  9094                           tosh	equ	0xFFE
  9095                           tosl	equ	0xFFD
  9096                           pclatu	equ	0xFFB
  9097                           pclath	equ	0xFFA
  9098                           tblptru	equ	0xFF8
  9099                           tblptrh	equ	0xFF7
  9100                           tblptrl	equ	0xFF6
  9101                           tablat	equ	0xFF5
  9102                           prodh	equ	0xFF4
  9103                           prodl	equ	0xFF3
  9104                           intcon	equ	0xFF2
  9105                           intcon3	equ	0xFF0
  9106                           postinc0	equ	0xFEE
  9107                           fsr0h	equ	0xFEA
  9108                           fsr0l	equ	0xFE9
  9109                           wreg	equ	0xFE8
  9110                           indf1	equ	0xFE7
  9111                           fsr1h	equ	0xFE2
  9112                           fsr1l	equ	0xFE1
  9113                           indf2	equ	0xFDF
  9114                           postinc2	equ	0xFDE
  9115                           postdec2	equ	0xFDD
  9116                           fsr2h	equ	0xFDA
  9117                           fsr2l	equ	0xFD9
  9118                           status	equ	0xFD8
  9119                           
  9120 ;; *************** function _I2C1_Stop *****************
  9121 ;; Defined at:
  9122 ;;		line 584 in file "i2c1.c"
  9123 ;; Parameters:    Size  Location     Type
  9124 ;;  completion_c    1    wreg     enum E5248
  9125 ;; Auto vars:     Size  Location     Type
  9126 ;;  completion_c    1    0[COMRAM] enum E5248
  9127 ;; Return value:  Size  Location     Type
  9128 ;;                  1    wreg      void 
  9129 ;; Registers used:
  9130 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9131 ;; Tracked objects:
  9132 ;;		On entry : 0/0
  9133 ;;		On exit  : 0/0
  9134 ;;		Unchanged: 0/0
  9135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9136 ;;      Params:         0       0       0       0       0       0       0       0       0
  9137 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9138 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9139 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9140 ;;Total ram usage:        0 bytes
  9141 ;; Hardware stack levels used:    1
  9142 ;; This function calls:
  9143 ;;		Nothing
  9144 ;; This function is called by:
  9145 ;;		_I2C1_ISR
  9146 ;; This function uses a non-reentrant model
  9147 ;;
  9148                           
  9149                           	psect	text47
  9150  002B08                     __ptext47:
  9151                           	opt stack 0
  9152  002B08                     _I2C1_Stop:
  9153                           	opt stack 23
  9154                           
  9155                           ;i2c1.c: 587: SSPCON2bits.PEN = 1;
  9156                           
  9157                           ;incstack = 0
  9158  002B08  84C5               	bsf	4037,2,c	;volatile
  9159                           
  9160                           ;i2c1.c: 594: }
  9161                           ;i2c1.c: 597: i2c1_state = S_MASTER_IDLE;
  9162  002B0A  0E00               	movlw	0
  9163  002B0C  6E41               	movwf	_i2c1_state,c
  9164  002B0E  0012               	return		;funcret
  9165  002B10                     __end_of_I2C1_Stop:
  9166                           	opt stack 0
  9167                           tosu	equ	0xFFF
  9168                           tosh	equ	0xFFE
  9169                           tosl	equ	0xFFD
  9170                           pclatu	equ	0xFFB
  9171                           pclath	equ	0xFFA
  9172                           tblptru	equ	0xFF8
  9173                           tblptrh	equ	0xFF7
  9174                           tblptrl	equ	0xFF6
  9175                           tablat	equ	0xFF5
  9176                           prodh	equ	0xFF4
  9177                           prodl	equ	0xFF3
  9178                           intcon	equ	0xFF2
  9179                           intcon3	equ	0xFF0
  9180                           postinc0	equ	0xFEE
  9181                           fsr0h	equ	0xFEA
  9182                           fsr0l	equ	0xFE9
  9183                           wreg	equ	0xFE8
  9184                           indf1	equ	0xFE7
  9185                           fsr1h	equ	0xFE2
  9186                           fsr1l	equ	0xFE1
  9187                           indf2	equ	0xFDF
  9188                           postinc2	equ	0xFDE
  9189                           postdec2	equ	0xFDD
  9190                           fsr2h	equ	0xFDA
  9191                           fsr2l	equ	0xFD9
  9192                           status	equ	0xFD8
  9193                           
  9194 ;; *************** function _I2C1_FunctionComplete *****************
  9195 ;; Defined at:
  9196 ;;		line 566 in file "i2c1.c"
  9197 ;; Parameters:    Size  Location     Type
  9198 ;;		None
  9199 ;; Auto vars:     Size  Location     Type
  9200 ;;		None
  9201 ;; Return value:  Size  Location     Type
  9202 ;;                  1    wreg      void 
  9203 ;; Registers used:
  9204 ;;		wreg, status,2, status,0
  9205 ;; Tracked objects:
  9206 ;;		On entry : 0/0
  9207 ;;		On exit  : 0/0
  9208 ;;		Unchanged: 0/0
  9209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9210 ;;      Params:         0       0       0       0       0       0       0       0       0
  9211 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9212 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9213 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9214 ;;Total ram usage:        0 bytes
  9215 ;; Hardware stack levels used:    1
  9216 ;; This function calls:
  9217 ;;		Nothing
  9218 ;; This function is called by:
  9219 ;;		_I2C1_ISR
  9220 ;; This function uses a non-reentrant model
  9221 ;;
  9222                           
  9223                           	psect	text48
  9224  002A8E                     __ptext48:
  9225                           	opt stack 0
  9226  002A8E                     _I2C1_FunctionComplete:
  9227                           	opt stack 23
  9228                           
  9229                           ;i2c1.c: 570: p_i2c1_trb_current++;
  9230                           
  9231                           ;incstack = 0
  9232  002A8E  0E06               	movlw	6
  9233  002A90  263B               	addwf	_p_i2c1_trb_current,f,c
  9234  002A92  0E00               	movlw	0
  9235  002A94  223C               	addwfc	_p_i2c1_trb_current+1,f,c
  9236                           
  9237                           ;i2c1.c: 573: if(--i2c1_trb_count == 0)
  9238  002A96  2E40               	decfsz	_i2c1_trb_count,f,c
  9239  002A98  D003               	goto	i2l390
  9240                           
  9241                           ;i2c1.c: 574: {
  9242                           ;i2c1.c: 575: i2c1_state = S_MASTER_SEND_STOP;
  9243  002A9A  0E04               	movlw	4
  9244  002A9C  6E41               	movwf	_i2c1_state,c
  9245                           
  9246                           ;i2c1.c: 576: }
  9247  002A9E  0012               	return	
  9248  002AA0                     i2l390:
  9249                           
  9250                           ;i2c1.c: 577: else
  9251                           ;i2c1.c: 578: {
  9252                           ;i2c1.c: 579: i2c1_state = S_MASTER_RESTART;
  9253  002AA0  0E01               	movlw	1
  9254  002AA2  6E41               	movwf	_i2c1_state,c
  9255  002AA4  0012               	return	
  9256  002AA6                     __end_of_I2C1_FunctionComplete:
  9257                           	opt stack 0
  9258                           tosu	equ	0xFFF
  9259                           tosh	equ	0xFFE
  9260                           tosl	equ	0xFFD
  9261                           pclatu	equ	0xFFB
  9262                           pclath	equ	0xFFA
  9263                           tblptru	equ	0xFF8
  9264                           tblptrh	equ	0xFF7
  9265                           tblptrl	equ	0xFF6
  9266                           tablat	equ	0xFF5
  9267                           prodh	equ	0xFF4
  9268                           prodl	equ	0xFF3
  9269                           intcon	equ	0xFF2
  9270                           intcon3	equ	0xFF0
  9271                           postinc0	equ	0xFEE
  9272                           fsr0h	equ	0xFEA
  9273                           fsr0l	equ	0xFE9
  9274                           wreg	equ	0xFE8
  9275                           indf1	equ	0xFE7
  9276                           fsr1h	equ	0xFE2
  9277                           fsr1l	equ	0xFE1
  9278                           indf2	equ	0xFDF
  9279                           postinc2	equ	0xFDE
  9280                           postdec2	equ	0xFDD
  9281                           fsr2h	equ	0xFDA
  9282                           fsr2l	equ	0xFD9
  9283                           status	equ	0xFD8
  9284                           
  9285 ;; *************** function _I2C1_BusCollisionISR *****************
  9286 ;; Defined at:
  9287 ;;		line 731 in file "i2c1.c"
  9288 ;; Parameters:    Size  Location     Type
  9289 ;;		None
  9290 ;; Auto vars:     Size  Location     Type
  9291 ;;		None
  9292 ;; Return value:  Size  Location     Type
  9293 ;;                  1    wreg      void 
  9294 ;; Registers used:
  9295 ;;		None
  9296 ;; Tracked objects:
  9297 ;;		On entry : 0/0
  9298 ;;		On exit  : 0/0
  9299 ;;		Unchanged: 0/0
  9300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9301 ;;      Params:         0       0       0       0       0       0       0       0       0
  9302 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9303 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9304 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9305 ;;Total ram usage:        0 bytes
  9306 ;; Hardware stack levels used:    1
  9307 ;; This function calls:
  9308 ;;		Nothing
  9309 ;; This function is called by:
  9310 ;;		_INTERRUPT_InterruptManager
  9311 ;; This function uses a non-reentrant model
  9312 ;;
  9313                           
  9314                           	psect	text49
  9315  002B22                     __ptext49:
  9316                           	opt stack 0
  9317  002B22                     _I2C1_BusCollisionISR:
  9318                           	opt stack 24
  9319                           
  9320                           ;incstack = 0
  9321  002B22  0012               	return		;funcret
  9322  002B24                     __end_of_I2C1_BusCollisionISR:
  9323                           	opt stack 0
  9324                           tosu	equ	0xFFF
  9325                           tosh	equ	0xFFE
  9326                           tosl	equ	0xFFD
  9327                           pclatu	equ	0xFFB
  9328                           pclath	equ	0xFFA
  9329                           tblptru	equ	0xFF8
  9330                           tblptrh	equ	0xFF7
  9331                           tblptrl	equ	0xFF6
  9332                           tablat	equ	0xFF5
  9333                           prodh	equ	0xFF4
  9334                           prodl	equ	0xFF3
  9335                           intcon	equ	0xFF2
  9336                           intcon3	equ	0xFF0
  9337                           postinc0	equ	0xFEE
  9338                           fsr0h	equ	0xFEA
  9339                           fsr0l	equ	0xFE9
  9340                           wreg	equ	0xFE8
  9341                           indf1	equ	0xFE7
  9342                           fsr1h	equ	0xFE2
  9343                           fsr1l	equ	0xFE1
  9344                           indf2	equ	0xFDF
  9345                           postinc2	equ	0xFDE
  9346                           postdec2	equ	0xFDD
  9347                           fsr2h	equ	0xFDA
  9348                           fsr2l	equ	0xFD9
  9349                           status	equ	0xFD8
  9350                           
  9351 ;; *************** function _EUSART1_Transmit_ISR *****************
  9352 ;; Defined at:
  9353 ;;		line 149 in file "eusart1.c"
  9354 ;; Parameters:    Size  Location     Type
  9355 ;;		None
  9356 ;; Auto vars:     Size  Location     Type
  9357 ;;		None
  9358 ;; Return value:  Size  Location     Type
  9359 ;;                  1    wreg      void 
  9360 ;; Registers used:
  9361 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9362 ;; Tracked objects:
  9363 ;;		On entry : 0/0
  9364 ;;		On exit  : 0/0
  9365 ;;		Unchanged: 0/0
  9366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9367 ;;      Params:         0       0       0       0       0       0       0       0       0
  9368 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9369 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9370 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9371 ;;Total ram usage:        0 bytes
  9372 ;; Hardware stack levels used:    1
  9373 ;; This function calls:
  9374 ;;		Nothing
  9375 ;; This function is called by:
  9376 ;;		_INTERRUPT_InterruptManager
  9377 ;; This function uses a non-reentrant model
  9378 ;;
  9379                           
  9380                           	psect	text50
  9381  0029BC                     __ptext50:
  9382                           	opt stack 0
  9383  0029BC                     _EUSART1_Transmit_ISR:
  9384                           	opt stack 24
  9385                           
  9386                           ;eusart1.c: 153: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
  9387                           
  9388                           ;incstack = 0
  9389  0029BC  0E08               	movlw	8
  9390  0029BE  6044               	cpfslt	_eusart1TxBufferRemaining,c	;volatile
  9391  0029C0  D012               	goto	i2l276
  9392                           
  9393                           ;eusart1.c: 154: {
  9394                           ;eusart1.c: 155: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
  9395  0029C2  5045               	movf	_eusart1TxTail,w,c
  9396  0029C4  0D01               	mullw	1
  9397  0029C6  0EAB               	movlw	low _eusart1TxBuffer
  9398  0029C8  24F3               	addwf	prodl,w,c
  9399  0029CA  6ED9               	movwf	fsr2l,c
  9400  0029CC  0E00               	movlw	high _eusart1TxBuffer
  9401  0029CE  20F4               	addwfc	prodh,w,c
  9402  0029D0  6EDA               	movwf	fsr2h,c
  9403  0029D2  50DF               	movf	indf2,w,c
  9404  0029D4  6EAD               	movwf	4013,c	;volatile
  9405  0029D6  2A45               	incf	_eusart1TxTail,f,c
  9406                           
  9407                           ;eusart1.c: 156: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
  9408  0029D8  0E07               	movlw	7
  9409  0029DA  6445               	cpfsgt	_eusart1TxTail,c
  9410  0029DC  D002               	goto	i2l277
  9411                           
  9412                           ;eusart1.c: 157: {
  9413                           ;eusart1.c: 158: eusart1TxTail = 0;
  9414  0029DE  0E00               	movlw	0
  9415  0029E0  6E45               	movwf	_eusart1TxTail,c
  9416  0029E2                     i2l277:
  9417                           
  9418                           ;eusart1.c: 159: }
  9419                           ;eusart1.c: 160: eusart1TxBufferRemaining++;
  9420  0029E2  2A44               	incf	_eusart1TxBufferRemaining,f,c	;volatile
  9421                           
  9422                           ;eusart1.c: 161: }
  9423  0029E4  0012               	return	
  9424  0029E6                     i2l276:
  9425                           
  9426                           ;eusart1.c: 162: else
  9427                           ;eusart1.c: 163: {
  9428                           ;eusart1.c: 164: PIE1bits.TX1IE = 0;
  9429  0029E6  989D               	bcf	3997,4,c	;volatile
  9430  0029E8  0012               	return	
  9431  0029EA                     __end_of_EUSART1_Transmit_ISR:
  9432                           	opt stack 0
  9433                           tosu	equ	0xFFF
  9434                           tosh	equ	0xFFE
  9435                           tosl	equ	0xFFD
  9436                           pclatu	equ	0xFFB
  9437                           pclath	equ	0xFFA
  9438                           tblptru	equ	0xFF8
  9439                           tblptrh	equ	0xFF7
  9440                           tblptrl	equ	0xFF6
  9441                           tablat	equ	0xFF5
  9442                           prodh	equ	0xFF4
  9443                           prodl	equ	0xFF3
  9444                           intcon	equ	0xFF2
  9445                           intcon3	equ	0xFF0
  9446                           postinc0	equ	0xFEE
  9447                           fsr0h	equ	0xFEA
  9448                           fsr0l	equ	0xFE9
  9449                           wreg	equ	0xFE8
  9450                           indf1	equ	0xFE7
  9451                           fsr1h	equ	0xFE2
  9452                           fsr1l	equ	0xFE1
  9453                           indf2	equ	0xFDF
  9454                           postinc2	equ	0xFDE
  9455                           postdec2	equ	0xFDD
  9456                           fsr2h	equ	0xFDA
  9457                           fsr2l	equ	0xFD9
  9458                           status	equ	0xFD8
  9459                           
  9460 ;; *************** function _EUSART1_Receive_ISR *****************
  9461 ;; Defined at:
  9462 ;;		line 168 in file "eusart1.c"
  9463 ;; Parameters:    Size  Location     Type
  9464 ;;		None
  9465 ;; Auto vars:     Size  Location     Type
  9466 ;;		None
  9467 ;; Return value:  Size  Location     Type
  9468 ;;                  1    wreg      void 
  9469 ;; Registers used:
  9470 ;;		None
  9471 ;; Tracked objects:
  9472 ;;		On entry : 0/0
  9473 ;;		On exit  : 0/0
  9474 ;;		Unchanged: 0/0
  9475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9476 ;;      Params:         0       0       0       0       0       0       0       0       0
  9477 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9478 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9479 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9480 ;;Total ram usage:        0 bytes
  9481 ;; Hardware stack levels used:    1
  9482 ;; This function calls:
  9483 ;;		Nothing
  9484 ;; This function is called by:
  9485 ;;		_INTERRUPT_InterruptManager
  9486 ;; This function uses a non-reentrant model
  9487 ;;
  9488                           
  9489                           	psect	text51
  9490  002AF6                     __ptext51:
  9491                           	opt stack 0
  9492  002AF6                     _EUSART1_Receive_ISR:
  9493                           	opt stack 24
  9494                           
  9495                           ;eusart1.c: 173: if(1 == RCSTA1bits.OERR)
  9496                           
  9497                           ;incstack = 0
  9498  002AF6  A2AB               	btfss	4011,1,c	;volatile
  9499  002AF8  0012               	return	
  9500                           
  9501                           ;eusart1.c: 174: {
  9502                           ;eusart1.c: 177: RCSTA1bits.SPEN = 0;
  9503  002AFA  9EAB               	bcf	4011,7,c	;volatile
  9504                           
  9505                           ;eusart1.c: 178: RCSTA1bits.SPEN = 1;
  9506  002AFC  8EAB               	bsf	4011,7,c	;volatile
  9507  002AFE  0012               	return	
  9508  002B00                     __end_of_EUSART1_Receive_ISR:
  9509                           	opt stack 0
  9510                           tosu	equ	0xFFF
  9511                           tosh	equ	0xFFE
  9512                           tosl	equ	0xFFD
  9513                           pclatu	equ	0xFFB
  9514                           pclath	equ	0xFFA
  9515                           tblptru	equ	0xFF8
  9516                           tblptrh	equ	0xFF7
  9517                           tblptrl	equ	0xFF6
  9518                           tablat	equ	0xFF5
  9519                           prodh	equ	0xFF4
  9520                           prodl	equ	0xFF3
  9521                           intcon	equ	0xFF2
  9522                           intcon3	equ	0xFF0
  9523                           postinc0	equ	0xFEE
  9524                           fsr0h	equ	0xFEA
  9525                           fsr0l	equ	0xFE9
  9526                           wreg	equ	0xFE8
  9527                           indf1	equ	0xFE7
  9528                           fsr1h	equ	0xFE2
  9529                           fsr1l	equ	0xFE1
  9530                           indf2	equ	0xFDF
  9531                           postinc2	equ	0xFDE
  9532                           postdec2	equ	0xFDD
  9533                           fsr2h	equ	0xFDA
  9534                           fsr2l	equ	0xFD9
  9535                           status	equ	0xFD8
  9536                           
  9537 ;; *************** function _ADC_ISR *****************
  9538 ;; Defined at:
  9539 ;;		line 130 in file "adc.c"
  9540 ;; Parameters:    Size  Location     Type
  9541 ;;		None
  9542 ;; Auto vars:     Size  Location     Type
  9543 ;;		None
  9544 ;; Return value:  Size  Location     Type
  9545 ;;                  1    wreg      void 
  9546 ;; Registers used:
  9547 ;;		None
  9548 ;; Tracked objects:
  9549 ;;		On entry : 0/0
  9550 ;;		On exit  : 0/0
  9551 ;;		Unchanged: 0/0
  9552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9553 ;;      Params:         0       0       0       0       0       0       0       0       0
  9554 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9555 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9556 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9557 ;;Total ram usage:        0 bytes
  9558 ;; Hardware stack levels used:    1
  9559 ;; This function calls:
  9560 ;;		Nothing
  9561 ;; This function is called by:
  9562 ;;		_INTERRUPT_InterruptManager
  9563 ;; This function uses a non-reentrant model
  9564 ;;
  9565                           
  9566                           	psect	text52
  9567  002B24                     __ptext52:
  9568                           	opt stack 0
  9569  002B24                     _ADC_ISR:
  9570                           	opt stack 24
  9571                           
  9572                           ;incstack = 0
  9573  002B24  0012               	return		;funcret
  9574  002B26                     __end_of_ADC_ISR:
  9575                           	opt stack 0
  9576                           tosu	equ	0xFFF
  9577                           tosh	equ	0xFFE
  9578                           tosl	equ	0xFFD
  9579                           pclatu	equ	0xFFB
  9580                           pclath	equ	0xFFA
  9581                           tblptru	equ	0xFF8
  9582                           tblptrh	equ	0xFF7
  9583                           tblptrl	equ	0xFF6
  9584                           tablat	equ	0xFF5
  9585                           prodh	equ	0xFF4
  9586                           prodl	equ	0xFF3
  9587                           intcon	equ	0xFF2
  9588                           intcon3	equ	0xFF0
  9589                           postinc0	equ	0xFEE
  9590                           fsr0h	equ	0xFEA
  9591                           fsr0l	equ	0xFE9
  9592                           wreg	equ	0xFE8
  9593                           indf1	equ	0xFE7
  9594                           fsr1h	equ	0xFE2
  9595                           fsr1l	equ	0xFE1
  9596                           indf2	equ	0xFDF
  9597                           postinc2	equ	0xFDE
  9598                           postdec2	equ	0xFDD
  9599                           fsr2h	equ	0xFDA
  9600                           fsr2l	equ	0xFD9
  9601                           status	equ	0xFD8
  9602                           tosu	equ	0xFFF
  9603                           tosh	equ	0xFFE
  9604                           tosl	equ	0xFFD
  9605                           pclatu	equ	0xFFB
  9606                           pclath	equ	0xFFA
  9607                           tblptru	equ	0xFF8
  9608                           tblptrh	equ	0xFF7
  9609                           tblptrl	equ	0xFF6
  9610                           tablat	equ	0xFF5
  9611                           prodh	equ	0xFF4
  9612                           prodl	equ	0xFF3
  9613                           intcon	equ	0xFF2
  9614                           intcon3	equ	0xFF0
  9615                           postinc0	equ	0xFEE
  9616                           fsr0h	equ	0xFEA
  9617                           fsr0l	equ	0xFE9
  9618                           wreg	equ	0xFE8
  9619                           indf1	equ	0xFE7
  9620                           fsr1h	equ	0xFE2
  9621                           fsr1l	equ	0xFE1
  9622                           indf2	equ	0xFDF
  9623                           postinc2	equ	0xFDE
  9624                           postdec2	equ	0xFDD
  9625                           fsr2h	equ	0xFDA
  9626                           fsr2l	equ	0xFD9
  9627                           status	equ	0xFD8
  9628                           
  9629                           	psect	text53
  9630  000000                     __ptext53:
  9631                           	opt stack 0
  9632                           tosu	equ	0xFFF
  9633                           tosh	equ	0xFFE
  9634                           tosl	equ	0xFFD
  9635                           pclatu	equ	0xFFB
  9636                           pclath	equ	0xFFA
  9637                           tblptru	equ	0xFF8
  9638                           tblptrh	equ	0xFF7
  9639                           tblptrl	equ	0xFF6
  9640                           tablat	equ	0xFF5
  9641                           prodh	equ	0xFF4
  9642                           prodl	equ	0xFF3
  9643                           intcon	equ	0xFF2
  9644                           intcon3	equ	0xFF0
  9645                           postinc0	equ	0xFEE
  9646                           fsr0h	equ	0xFEA
  9647                           fsr0l	equ	0xFE9
  9648                           wreg	equ	0xFE8
  9649                           indf1	equ	0xFE7
  9650                           fsr1h	equ	0xFE2
  9651                           fsr1l	equ	0xFE1
  9652                           indf2	equ	0xFDF
  9653                           postinc2	equ	0xFDE
  9654                           postdec2	equ	0xFDD
  9655                           fsr2h	equ	0xFDA
  9656                           fsr2l	equ	0xFD9
  9657                           status	equ	0xFD8
  9658                           
  9659                           	psect	rparam
  9660  0000                     tosu	equ	0xFFF
  9661                           tosh	equ	0xFFE
  9662                           tosl	equ	0xFFD
  9663                           pclatu	equ	0xFFB
  9664                           pclath	equ	0xFFA
  9665                           tblptru	equ	0xFF8
  9666                           tblptrh	equ	0xFF7
  9667                           tblptrl	equ	0xFF6
  9668                           tablat	equ	0xFF5
  9669                           prodh	equ	0xFF4
  9670                           prodl	equ	0xFF3
  9671                           intcon	equ	0xFF2
  9672                           intcon3	equ	0xFF0
  9673                           postinc0	equ	0xFEE
  9674                           fsr0h	equ	0xFEA
  9675                           fsr0l	equ	0xFE9
  9676                           wreg	equ	0xFE8
  9677                           indf1	equ	0xFE7
  9678                           fsr1h	equ	0xFE2
  9679                           fsr1l	equ	0xFE1
  9680                           indf2	equ	0xFDF
  9681                           postinc2	equ	0xFDE
  9682                           postdec2	equ	0xFDD
  9683                           fsr2h	equ	0xFDA
  9684                           fsr2l	equ	0xFD9
  9685                           status	equ	0xFD8
  9686                           
  9687                           	psect	temp
  9688  00004A                     btemp:
  9689                           	opt stack 0
  9690  00004A                     	ds	1
  9691  0000                     int$flags	set	btemp
  9692  0000                     wtemp6	set	btemp+1
  9693                           tosu	equ	0xFFF
  9694                           tosh	equ	0xFFE
  9695                           tosl	equ	0xFFD
  9696                           pclatu	equ	0xFFB
  9697                           pclath	equ	0xFFA
  9698                           tblptru	equ	0xFF8
  9699                           tblptrh	equ	0xFF7
  9700                           tblptrl	equ	0xFF6
  9701                           tablat	equ	0xFF5
  9702                           prodh	equ	0xFF4
  9703                           prodl	equ	0xFF3
  9704                           intcon	equ	0xFF2
  9705                           intcon3	equ	0xFF0
  9706                           postinc0	equ	0xFEE
  9707                           fsr0h	equ	0xFEA
  9708                           fsr0l	equ	0xFE9
  9709                           wreg	equ	0xFE8
  9710                           indf1	equ	0xFE7
  9711                           fsr1h	equ	0xFE2
  9712                           fsr1l	equ	0xFE1
  9713                           indf2	equ	0xFDF
  9714                           postinc2	equ	0xFDE
  9715                           postdec2	equ	0xFDD
  9716                           fsr2h	equ	0xFDA
  9717                           fsr2l	equ	0xFD9
  9718                           status	equ	0xFD8


Data Sizes:
    Strings     8
    Constant    118
    Data        0
    BSS         128
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     52      73
    BANK0           160     75     132
    BANK1           256      0      50
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    i2c1_tr_queue.ptrb_list.pbuffer	PTR unsigned char  size(2) Largest target is 0

    i2c1_tr_queue.pTrFlag	PTR enum E5248 size(2) Largest target is 0

    i2c1_tr_queue.ptrb_list	PTR struct . size(2) Largest target is 0
		 -> I2C1_MasterRead@trBlock(BANK0[6]), I2C1_MasterWrite@trBlock(BANK0[6]), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_1(CODE[8]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 10
		 -> ADC_Buffer(BANK0[10]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    TMR3_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR3_DefaultInterruptHandler(), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    I2C1_MasterWriteTRBBuild@ptrb.pbuffer	PTR unsigned char  size(2) Largest target is 0

    I2C1_MasterReadTRBBuild@ptrb.pbuffer	PTR unsigned char  size(2) Largest target is 0

    i2c1_object.pTrTail.ptrb_list.pbuffer	PTR unsigned char  size(2) Largest target is 0

    i2c1_object.pTrTail.pTrFlag	PTR enum E5248 size(2) Largest target is 0

    i2c1_object.pTrTail.ptrb_list	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterRead@trBlock(BANK0[6]), I2C1_MasterWrite@trBlock(BANK0[6]), 

    F5592.pbuffer	PTR unsigned char  size(2) Largest target is 0

    F5587.pbuffer	PTR unsigned char  size(2) Largest target is 0

    I2C1_ISR@pi2c_buf_ptr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    p_i2c1_trb_current.pbuffer	PTR unsigned char  size(2) Largest target is 0

    p_i2c1_trb_current	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterRead@trBlock(BANK0[6]), I2C1_MasterWrite@trBlock(BANK0[6]), NULL(NULL[0]), 

    i2c1_object.pTrHead.pTrFlag	PTR enum E5248 size(2) Largest target is 0

    i2c1_object.pTrHead.ptrb_list	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterRead@trBlock(BANK0[6]), I2C1_MasterWrite@trBlock(BANK0[6]), 

    S1075$pbuffer	PTR unsigned char  size(2) Largest target is 0

    p_i2c1_current.pbuffer	PTR unsigned char  size(2) Largest target is 0

    S1087$pTrFlag	PTR enum E5248 size(2) Largest target is 0

    p_i2c1_current.pTrFlag	PTR enum E5248 size(2) Largest target is 0

    S1087$ptrb_list	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterRead@trBlock(BANK0[6]), I2C1_MasterWrite@trBlock(BANK0[6]), 

    p_i2c1_current.ptrb_list	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterRead@trBlock(BANK0[6]), I2C1_MasterWrite@trBlock(BANK0[6]), 

    p_i2c1_current	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK0[6]), NULL(NULL[0]), 

    S1098$pTrHead	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK0[6]), 

    i2c1_object.pTrHead	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK0[6]), 

    S1098$pTrTail	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK0[6]), 

    i2c1_object.pTrTail	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK0[6]), 


Critical Paths under _main in COMRAM

    _sprintf->___ftmul
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___fttol->___ftmul
    ___lwtoft->___ftpack
    _XLCD_Initialize->_OpenXLCD
    _OpenXLCD->_SetDDRamAddr

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_I2C1_ISR

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   64005
                                             50 COMRAM     2     2      0
                                             74 BANK0      1     1      0
                  _ADC_GetConversion
                           _BusyXLCD
                  _SYSTEM_Initialize
                       _SetDDRamAddr
                       _WriteCmdXLCD
                      _WriteDataXLCD
                           ___lwtoft
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             43    36      7   60430
                                             34 BANK0     40    33      7
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               10     7      3   14328
                                              6 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             21 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13    10      3   14049
                                              6 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    3292
                                             35 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    6041
                                             41 COMRAM     9     3      6
                                              0 BANK0      6     6      0
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    2053
                                             21 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    2245
                                             27 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     634
                                             21 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     853
                                             21 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    3085
                                             29 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     772
                                             21 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     601
                                             21 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     641
                                             13 BANK0     15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    5034
                                             28 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    4618
                                             16 BANK0     12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     155
                                             21 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     738
                                             21 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             3     0      3    3014
                                             29 COMRAM     3     0      3
                  _ADC_GetConversion (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2893
                                             21 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _WriteDataXLCD                                        1     1      0      62
                                             21 COMRAM     1     1      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     310
                     _ADC_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _XLCD_Initialize
 ---------------------------------------------------------------------------------
 (2) _XLCD_Initialize                                      0     0      0     310
                           _BusyXLCD
                           _OpenXLCD
                       _SetDDRamAddr
                       _WriteCmdXLCD
 ---------------------------------------------------------------------------------
 (3) _OpenXLCD                                             1     1      0     186
                                             25 COMRAM     1     1      0
                           _BusyXLCD
                       _Delay10KTCYx
                       _DelayPORXLCD
                       _SetDDRamAddr
                       _WriteCmdXLCD
 ---------------------------------------------------------------------------------
 (1) _WriteCmdXLCD                                         1     1      0      62
                                             21 COMRAM     1     1      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (1) _SetDDRamAddr                                         4     4      0      62
                                             21 COMRAM     4     4      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (4) _DelayPORXLCD                                         1     1      0       0
                                             21 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Delay10KTCYx                                         2     2      0      31
                                             21 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (4) _BusyXLCD                                             0     0      0       0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (2) _DelayFor18TCY                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_GetConversion                                    5     3      2      31
                                             21 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                          19    19      0       1
                                              2 COMRAM    19    19      0
                            _ADC_ISR
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
               _I2C1_BusCollisionISR
                           _I2C1_ISR
                         _MEMORY_ISR
                   _PIN_MANAGER_INT0
                   _PIN_MANAGER_INT1
                   _PIN_MANAGER_INT2
                    _PIN_MANAGER_IOC
                           _TMR0_ISR
                           _TMR1_ISR
                           _TMR2_ISR
                           _TMR3_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR3_ISR                                             0     0      0       0
                   Absolute function *
       _TMR3_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (8) _TMR3_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (8) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR2_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR1_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR0_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _PIN_MANAGER_IOC                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _PIN_MANAGER_INT2                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _PIN_MANAGER_INT1                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _PIN_MANAGER_INT0                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _MEMORY_ISR                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _I2C1_ISR                                             2     2      0       0
                                              0 COMRAM     2     2      0
              _I2C1_FunctionComplete
                          _I2C1_Stop
 ---------------------------------------------------------------------------------
 (8) _I2C1_Stop                                            1     1      0       0
 ---------------------------------------------------------------------------------
 (8) _I2C1_FunctionComplete                                0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _I2C1_BusCollisionISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART1_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART1_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _ADC_ISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_GetConversion
   _BusyXLCD
     _DelayFor18TCY
   _SYSTEM_Initialize
     _ADC_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _XLCD_Initialize
       _BusyXLCD
         _DelayFor18TCY
       _OpenXLCD
         _BusyXLCD
           _DelayFor18TCY
         _Delay10KTCYx
         _DelayPORXLCD
         _SetDDRamAddr
           _DelayFor18TCY
         _WriteCmdXLCD
           _DelayFor18TCY
       _SetDDRamAddr
         _DelayFor18TCY
       _WriteCmdXLCD
         _DelayFor18TCY
   _SetDDRamAddr
     _DelayFor18TCY
   _WriteCmdXLCD
     _DelayFor18TCY
   _WriteDataXLCD
     _DelayFor18TCY
   ___lwtoft
     _ADC_GetConversion (ARG)
     ___ftpack (ARG)
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 _INTERRUPT_InterruptManager (ROOT)
   _ADC_ISR
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _I2C1_BusCollisionISR
   _I2C1_ISR
     _I2C1_FunctionComplete
     _I2C1_Stop
   _MEMORY_ISR
   _PIN_MANAGER_INT0
   _PIN_MANAGER_INT1
   _PIN_MANAGER_INT2
   _PIN_MANAGER_IOC
   _TMR0_ISR
   _TMR1_ISR
   _TMR2_ISR
   _TMR3_ISR
     Absolute function(Fake) *
     _TMR3_DefaultInterruptHandler *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      32       7       19.5%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     4B      84       5       82.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     34      49       1       77.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      FF      20        0.0%
DATA                 0      0      FF       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Mon Oct 26 12:46:15 2020

             _eusart1TxBufferRemaining 0044                            _SSPSTATbits 000FC7  
                                   l41 2918                                     l71 2482  
                                   l80 24B2                                     l65 2468  
                                   l74 2492                                     l83 24C2  
                                   l77 24A2                           ___awdiv@sign 0021  
                  ___wmul@multiplicand 0026                            __CFG_BORV$3 000000  
                      _timer0ReloadVal 0039                           __CFG_CP0$OFF 000000  
                         __CFG_CP1$OFF 000000                           __CFG_CP2$OFF 000000  
                         __CFG_CP3$OFF 000000                           ___ftadd@exp1 007B  
                         ___ftadd@exp2 007A                           ___ftadd@sign 0079  
                          ?_MEMORY_ISR 0001                                    l209 2976  
                                  l561 227A                                    l563 2280  
                                  l572 22B2                                    l581 22E2  
                                  l590 2370                                    l566 2292  
                                  l575 22C2                                    l584 22F2  
                                  l569 22A2                                    l578 22D2  
                                  l587 2348                                    l891 28C0  
                                  l894 28D0                                    l897 28E0  
                         __CFG_CPB$OFF 000000                                    _PR2 000FCB  
                         __CFG_CPD$OFF 000000                           __CFG_BOR$OFF 000000  
                      _timer1ReloadVal 0037                        __end_of_ADC_ISR 2B26  
                __size_of_WriteCmdXLCD 003E                           ___awmod@sign 001B  
                                  prod 000FF3                                    tosl 000FFD  
                                  wreg 000FE8                           __CFG_LVP$OFF 000000  
                     __end_of_I2C1_ISR 1C52                           __CFG_WDT$OFF 000000  
                                 l1400 18F6                                   l1410 130E  
                                 l1403 19C4                                   l1411 1468  
                                 l1420 0918                                   l1413 151E  
                                 l1421 08DC                                   l1406 1334  
                                 l1407 1258                                   l1431 098E  
                                 l1440 0B10                                   l1424 09D6  
                                 l1432 096E                                   l1441 0B78  
                                 l1417 0890                                   l1434 09A6  
                                 l1418 08AA                                   l1443 0B9E  
                                 l1435 09BE                                   l1427 093E  
                                 l1419 092E                        _timer3ReloadVal 0035  
                                 l1700 2132                                   l1436 103A  
                                 l1460 0DA6                                   l1444 0BE4  
                                 l1428 0A02                                   l1445 0CC8  
                                 l1437 0A1C                                   l1429 0944  
                                 l1462 0E66                                   l1454 0D2E  
                                 l1438 0A62                                   l1471 102C  
                                 l1463 0E4C                                   l1720 23A0  
                                 l1472 1012                                   l1448 0C6A  
                                 l1465 0E98                                   l1722 23DE  
                                 l1474 1060                                   l1466 0E9C  
                                 l1723 23C8                                   l1803 2016  
                                 l1651 25A6                                   l1475 1088  
                                 l1467 0ECC                                   l1459 0E3E  
                                 l1804 200A                                   l1652 259E  
                                 l1468 1004                                   l1725 2406  
                                 l1661 267E                                   l1821 2222  
                                 l1477 10B8                                   l1469 0F1E  
                                 l1726 23FC                                   l1750 15BA  
                                 l1670 26D0                                   l1662 268A  
                                 l1822 2238                                   l1478 10EA  
                                 l1719 23AA                                   l1655 25C6  
                                 l1815 2182                                   l1808 2504  
                                 l1832 2810                                   l1656 25D0  
                                 l1648 2578                                   l1664 26A0  
                                 l1809 2534                                   l1657 25DE  
                                 l1649 2588                                   l1665 2698  
                                 l1817 21AE                                   l1682 2AA8  
                                 l1826 2A26                                   l1754 15F4  
                                 l1690 20AC                                   l1818 21F0  
                                 l1691 20DC                                   l1819 2206  
                                 l1851 2A6E                                   l1764 1682  
                                 l1844 1EC4                                   l1836 1DF2  
                                 l1668 26B8                                   l1773 16D8  
                                 l1765 1674                                   l1757 1604  
                                 l1845 1EB4                                   l1693 211A  
                                 l1669 26C2                                   l1774 16CA  
                                 l1758 160E                                   l1838 1E98  
                                 l1694 210A                                   l1759 1690  
                                 l1847 1EEA                                   l1839 1E84  
                                 l1687 204C                                   l1791 1F28  
                                 l1776 170E                                   l1777 1738  
                                 l1881 264A                                   l1689 206A  
                                 l1793 1F54                                   l1778 1786  
                                 l1882 2658                                   l1794 1F8E  
                                 l1891 2720                                   l1699 213E  
                                 l1795 1FB6                                   l1892 272E  
                                 l1877 2616                                   l1797 1FF2  
                                 l1878 260A                                   l1798 1FE2  
                                 l1887 26F8                                   l1888 26EC  
                                 l1898 2752                                   l1899 2746  
                                 l6800 0E4C                                   l6752 0C44  
                                 l6744 0BE4                                   l5874 2560  
                                 l6772 0D34                                   l6676 096E  
                                 l6862 10E4                                   STR_1 0877  
                                 u6000 16E4                                   _IPEN 007E87  
                                 u6041 2166                                   u6130 25AA  
                                 u6061 2192                                   u6420 201C  
                                 u7060 1108                                   u6341 1F0C  
                                 u6190 26A4                                   u6361 1F38  
                                 u5730 2410                                   u6610 1ECE  
                                 u7227 2362                                   u5900 15E6  
                                 u7237 2AD4                                   u7247 2AAE  
                                 u5831 155A                                   u6551 1DCE  
                                 u5760 2472                                   u6640 261A  
                                 u7257 2B02                                   u5841 1578  
                                 u5690 2392                                   u5930 1646  
                                 u6570 1E18                                   u6490 2144  
                                 u6810 0AA8                                   u5675 27B2  
                                 u5870 15AC                                   u6670 26FC  
                                 u6575 1E0E                                   u6815 0A9C  
                                 u5970 169C                                   u6930 0D7A  
                                 u6850 0BB4                                   u6860 0BFA  
                                 u6960 0E7A                                   u6970 0E90  
                                 u6890 0C44                                   _TMR2 000FCC  
                                 _TMR3 000FB2                           __CFG_PWRT$ON 000000  
                                 _main 2276                           ___ftpack@arg 0016  
                         ___ftpack@exp 0019                                   fsr0h 000FEA  
                                 fsr1h 000FE2                                   fsr2h 000FDA  
                                 fsr0l 000FE9                                   indf1 000FE7  
                                 indf2 000FDF                                   fsr1l 000FE1  
                                 fsr2l 000FD9                                   btemp 004A  
               __size_of_WriteDataXLCD 003E                                   prodh 000FF4  
                                 prodl 000FF3                                   start 000E  
                        __CFG_IESO$OFF 000000                           _sprintf$4061 008F  
                        __CFG_MCLRE$ON 000000                           ___ftmul@cntr 0064  
                         ___param_bank 000000                           ___ftmul@sign 0065  
                         ___fttol@exp1 007B                           ___fttol@lval 0077  
                         _WriteCmdXLCD 2878                             _i2c1_state 0041  
                        __CFG_PLLDIV$5 000000         __size_of_OSCILLATOR_Initialize 000A  
        __end_of_OSCILLATOR_Initialize 2AF6                          ?_SetDDRamAddr 0001  
                                ?_main 0001                        __end_of___awdiv 25E8  
                    __end_of_I2C1_Stop 2B10                                  _EEADR 000FA9  
                      __end_of___ftadd 17AC                        __end_of___awmod 26DA  
                      __end_of___ftneg 2A34                        __end_of___lldiv 266A  
                      __end_of___ftmul 2276                                  _T0CON 000FD5  
                      ___awdiv@divisor 001E                                  _T1CON 000FCD  
                      __end_of___llmod 2740                        __end_of___ftsub 283A  
                      __end_of___fttol 1EFC                                  _T2CON 000FCA  
                                _T3CON 000FB1                                  i2l500 1CAA  
                                i2l510 1CF0                                  i2l502 1CB8  
                                i2l351 1A78                                  i2l360 1AD4  
                                i2l352 1A96                                  i2l520 1D3A  
                                i2l512 1CFE                                  i2l504 1CC6  
                                i2l361 1AE4                                  i2l354 1A9E  
                                i2l522 1D48                                  i2l514 1D0C  
                                i2l506 1CD4                                  i2l371 1B60  
                                i2l363 1B12                                  i2l355 1AA6  
                                i2l276 29E6                                  i2l348 1C0C  
                                i2l372 1B72                                  i2l356 1AB6  
                                i2l524 1D52                                  i2l516 1D1E  
                                i2l508 1CE2                                  i2l277 29E2  
                                i2l381 1BC4                                  i2l365 1B4C  
                                i2l349 1A20                                  i2l390 2AA0  
                                i2l382 1BCC                                  i2l374 1B96  
                                i2l358 1ACE                                  i2l526 1D60  
                                i2l518 1D2C                                  i2l383 1BEE  
                                i2l375 1B8E                                  i2l384 1BF4  
                                i2l528 1D6C                                  i2l385 1BF8  
                                i2l369 1B5A                                  i2l378 1BAA  
                                i2l387 1C00                                  i2l379 1BBC  
                      ___awdiv@counter 0020                                  _TMR0H 000FD7  
                                _TMR1H 000FCF                                  _TMR0L 000FD6  
                                _TMR1L 000FCE                                  _TMR3H 000FB3  
                                _TMR3L 000FB2                                  _PORTB 000F81  
                                _PORTD 000F83                          __CFG_USBDIV$2 000000  
                                _TRISD 000F95                  __size_of_Delay10KTCYx 0016  
         __end_of_I2C1_BusCollisionISR 2B24                          __CFG_WRT0$OFF 000000  
                        __CFG_WRT1$OFF 000000                          __CFG_WRT2$OFF 000000  
                        __CFG_WRT3$OFF 000000                           ___lltoft@exp 0026  
                 _EUSART1_Transmit_ISR 29BC                         __CFG_EBTR0$OFF 000000  
                       __CFG_FCMEN$OFF 000000                         __CFG_EBTR1$OFF 000000  
                       __CFG_EBTR2$OFF 000000                         __CFG_EBTR3$OFF 000000  
                     __end_of_TMR0_ISR 2B18                       __end_of_TMR1_ISR 2B16  
                     __end_of_TMR2_ISR 2B14                          __CFG_WRTB$OFF 000000  
                     __end_of_TMR3_ISR 29BC                          __CFG_WRTC$OFF 000000  
                        __CFG_WRTD$OFF 000000                         __CFG_EBTRB$OFF 000000  
       ??_TMR3_DefaultInterruptHandler 0001                __end_of_PIN_MANAGER_IOC 2B1A  
                      __end_of_dpowers 0829                                  _scale 1116  
                      __end_of_isdigit 2A76                          ___ftpack@sign 001A  
                                pclath 000FFA                                  tablat 000FF5  
                                status 000FD8                                  wtemp6 004B  
                      __end_of_sprintf 1116                         __CFG_ICPRT$OFF 000000  
                  __size_of_MEMORY_ISR 0002                        __initialization 292C  
                         __end_of_main 2382                       __end_of_BusyXLCD 292C  
                         _Delay10KTCYx 2AA6                  __size_of_DelayPORXLCD 0012  
                            ??_ADC_ISR 0001            ?_INTERRUPT_InterruptManager 0001  
                       ??_SetDDRamAddr 0016                       __end_of_OpenXLCD 24D4  
                          _i2c1_object 00B3                                 ??_main 0033  
                        ___fttol@sign1 0076                          __activetblptr 000002  
                        _WriteDataXLCD 283A                  _TMR3_InterruptHandler 00C1  
                 __size_of__tdiv_to_l_ 0132                  ?_EUSART1_Transmit_ISR 0001  
                      __CFG_CCP2MX$OFF 000000                                 _ADCON0 000FC2  
                               _ADCON2 000FC0                       ___llmod@dividend 0016  
                               ?_scale 0066                                 _ADRESH 000FC4  
                               _ADRESL 000FC3                                 _EEDATA 000FA8  
                               _CCPR2H 000FBC                                 _CCPR2L 000FBB  
                               _EECON2 000FA7                       ___awdiv@dividend 001C  
             __size_of_XLCD_Initialize 003C                       __end_of___ftpack 2430  
                     __end_of___lltoft 279C                                 i2l5162 1A78  
                               _TABLAT 000FF5                       __end_of___lwtoft 2A58  
                               _RCSTA1 000FAB                                 _OSCCON 000FD3  
                               _SPBRG1 000FAF                                 _SPBRGH 000FB0  
                               _SSPADD 000FC8                                 _SSPBUF 000FC9  
                               _TXREG1 000FAD                                 _TXSTA1 000FAC  
                         _DelayPORXLCD 2ACE                         __CFG_XINST$OFF 000000  
                     __end_of__powers_ 0850                         _p_i2c1_current 00BF  
                               ___ftge 24D4                                 ___wmul 29EA  
                            ??___awdiv 0020                              ??___ftadd 0076  
                            ??___awmod 001A                              ??___ftneg 0019  
                            ??___lldiv 001E                              ??___ftmul 0030  
                            ??___llmod 001E                              ??___ftsub 0033  
                            ??___fttol 0071               __end_of_PIN_MANAGER_INT0 2B20  
             __end_of_PIN_MANAGER_INT1 2B1E               __end_of_PIN_MANAGER_INT2 2B1C  
                               _fround 17AC                              ?_I2C1_ISR 0001  
                               clear_0 2932                                 clear_1 293E  
                               clear_2 294A                       ___awdiv@quotient 0022  
                      ___awmod@divisor 0018                        ___awmod@counter 001A  
                       ?_WriteDataXLCD 0001                  ___ftmul@f3_as_product 0061  
                            ??_isdigit 0016                           __mediumconst 0000  
                               tblptrh 000FF7                                 tblptrl 000FF6  
                               tblptru 000FF8               ADC_GetConversion@channel 001A  
                     ?_PIN_MANAGER_IOC 0001                              ??_sprintf 0089  
                      _eusart1RxBuffer 0100                        _eusart1TxBuffer 00AB  
                    _SYSTEM_Initialize 2ABC                             __accesstop 0060  
              __end_of__initialization 2950                        __CFG_PBADEN$OFF 000000  
                           ___ftadd@f1 0070                             ___ftadd@f2 0073  
                           ___ftge@ff1 0016                             ___ftge@ff2 0019  
                   ?_SYSTEM_Initialize 0001                          ___rparam_used 000001  
                           ___ftneg@f1 0016                         _i2c1_trb_count 0040  
                           ___ftmul@f1 002A                             ___ftmul@f2 002D  
                _I2C1_FunctionComplete 2A8E                   _I2C1_BusCollisionISR 2B22  
                           ___ftsub@f1 007C                             ___ftsub@f2 007F  
                           ___fttol@f1 006D                         __pcstackCOMRAM 0001  
                  _timer0ReloadVal8bit 003D                    ??_SYSTEM_Initialize 001B  
                            ?_TMR0_ISR 0001                              ?_TMR1_ISR 0001  
                            ?_TMR2_ISR 0001                             ___lltoft@c 001E  
                            ?_TMR3_ISR 0001                          __end_of_scale 1544  
                           ??_I2C1_ISR 0001                             ___lwtoft@c 001E  
                         ??_MEMORY_ISR 0001                 ??_EUSART1_Transmit_ISR 0001  
                           __div_to_l_ 202E            __end_of_EUSART1_Receive_ISR 2B00  
                      __div_to_l_@exp1 0021                        __div_to_l_@cntr 0020  
                              ??_scale 0033              __end_of_SYSTEM_Initialize 2ACE  
               __size_of_DelayFor18TCY 0008                        __div_to_l_@quot 001C  
                        _eusart1RxHead 00C7                          _eusart1TxHead 0046  
                        _eusart1RxTail 0043                             __pbssBANK0 00AB  
                           __pbssBANK1 0100                          _eusart1TxTail 0045  
                            ?_BusyXLCD 0001                        WriteCmdXLCD@cmd 0016  
                 __end_of_SetDDRamAddr 27EE                              ?_OpenXLCD 0001  
                      WriteSWSPI@input 0047                          __div_to_l_@f1 0016  
                        __div_to_l_@f2 0019                      ??_XLCD_Initialize 001B  
                   __end_of_MEMORY_ISR 2B22                  ?_I2C1_BusCollisionISR 0001  
                              ?___ftge 0016                      WriteDataXLCD@data 0016  
                              ?___wmul 0024                             ??_TMR0_ISR 0001  
                           ??_TMR1_ISR 0001                             ??_TMR2_ISR 0001  
                           ??_TMR3_ISR 0001                                _CCP2CON 000FBA  
                      ??_WriteDataXLCD 0016                                _ADC_ISR 2B24  
                              _BAUDCON 000FB8                                ?_fround 0066  
                            ?___ftpack 0016                              ?___lltoft 001E  
              __size_of_ADC_Initialize 0018                              ?___lwtoft 001E  
                            _I2C1_Stop 2B08                                _TBLPTRH 000FF7  
                              _TBLPTRL 000FF6                                _TBLPTRU 000FF8  
                              _OSCTUNE 000F9B                                _SSPCON1 000FC6  
                              _SSPCON2 000FC5                                _SSPSTAT 000FC7  
                           ??_BusyXLCD 0016                        __CFG_VREGEN$OFF 000000  
                           ??_OpenXLCD 001A                              _ADC_Value 00BA  
               ?_I2C1_FunctionComplete 0001                      __end_of__npowers_ 0877  
                              __Hparam 0000                             _scale$4060 0069  
                              __Lparam 0000                     _p_i2c1_trb_current 003B  
                      __size_of___ftge 0090                                ___awdiv 2564  
                        _DelayFor18TCY 2B00                                ___ftadd 1544  
                              ___awmod 266A                                ___ftneg 2A10  
                              ___lldiv 25E8                        __size_of___wmul 0026  
                              ___ftmul 2156                                ___llmod 26DA  
                              ___ftsub 27EE                                ___fttol 1DB8  
                         __psmallconst 0800                        __CFG_STVREN$OFF 000000  
                              __pcinit 292C                             ??___ftpack 001B  
                      __size_of_fround 025A                                __ramtop 0800  
                           ??___lltoft 0022                                __ptext0 2276  
                              __ptext1 0880                                __ptext2 1116  
                              __ptext3 2A58                                __ptext4 17AC  
                              __ptext5 29EA                                __ptext6 2156  
                              __ptext7 266A                                __ptext8 2564  
                              __ptext9 1EFC                             ??___lwtoft 0021  
                            _T0CONbits 000FD5                              _T1CONbits 000FCD  
                          ?__div_to_l_ 0016                                _dpowers 0801  
                _OSCILLATOR_Initialize 2AEC                              _T2CONbits 000FCA  
                              _isdigit 2A58                              _T3CONbits 000FB1  
                     ___awmod@dividend 0016               ??_PIN_MANAGER_Initialize 0016  
                           ?_I2C1_Stop 0001             __size_of_SYSTEM_Initialize 0012  
                              _sprintf 0880                   I2C1_ISR@pi2c_buf_ptr 00BD  
                              main@uwu 00AA                         __pintcode_body 1C52  
                 end_of_initialization 2950                          __Lmediumconst 0000  
                              int_func 1C52                 ??_I2C1_BusCollisionISR 0001  
                      ___lldiv@divisor 001A                        ___lldiv@counter 0022  
                       ?_DelayFor18TCY 0001                                postdec2 000FDD  
                              postinc0 000FEE                                postinc2 000FDE  
                       __tdiv_to_l_@f1 0016                         __tdiv_to_l_@f2 0019  
                    ?_PIN_MANAGER_INT0 0001                      ?_PIN_MANAGER_INT1 0001  
                    ?_PIN_MANAGER_INT2 0001                          ??__tdiv_to_l_ 001C  
                            _PORTBbits 000F81                     ??_PIN_MANAGER_INT0 0001  
                   ??_PIN_MANAGER_INT1 0001                     ??_PIN_MANAGER_INT2 0001  
                    __size_of_I2C1_ISR 024C                              _TRISAbits 000F92  
                            _TRISBbits 000F93                              _TRISDbits 000F95  
                __size_of_SetDDRamAddr 0052      I2C1_ISR@i2c_10bit_address_restart 003E  
                  __size_of__div_to_l_ 0128                            ___ftmul@exp 0060  
                       __end_of___ftge 2564                         __end_of___wmul 2A10  
              I2C1_MasterWrite@trBlock 00D8                      __size_of_TMR0_ISR 0002  
                    __size_of_TMR1_ISR 0002               I2C1_Stop@completion_code 0001  
                    __size_of_TMR2_ISR 0002                      __size_of_TMR3_ISR 002E  
                       _ADC_Initialize 2A76                 ?_OSCILLATOR_Initialize 0001  
                       __end_of_fround 1A06                           _SetDDRamAddr 279C  
                   SetDDRamAddr@DDaddr 0019                    start_initialization 292C  
                          ??_I2C1_Stop 0001        __size_of_PIN_MANAGER_Initialize 000C  
                  __end_of__tdiv_to_l_ 202E                        _XLCD_Initialize 28B6  
                      ___llmod@divisor 001A                      __size_of_BusyXLCD 003A  
                      ___llmod@counter 001E               __size_of_PIN_MANAGER_IOC 0002  
                      ??_DelayFor18TCY 0016                      __size_of_OpenXLCD 00A4  
                             ??___ftge 001C                               ??___wmul 0028  
                        ?_WriteCmdXLCD 0001                 __end_of_ADC_Initialize 2A8E  
                     __CFG_LPT1OSC$OFF 000000                               ?_ADC_ISR 0001  
                             ??_fround 0033                          sprintf@tmpval 00A0  
                       _eusart1RxCount 0042                             fround@prec 006F  
                    __size_of___ftpack 00AE                      __size_of___lltoft 005C  
                          __pbssCOMRAM 0035                      __size_of___lwtoft 0024  
        __size_of_EUSART1_Transmit_ISR 002E                          __pcstackBANK0 0060  
                        _i2c1_tr_queue 00DE                           _isdigit$3475 0017  
  INTERRUPT_InterruptManager@__portb__ 0015                ??_I2C1_FunctionComplete 0001  
         __size_of_EUSART1_Receive_ISR 000A                            sprintf@flag 0098  
                          sprintf@fval 00A4                            sprintf@prec 00A7  
               _PIN_MANAGER_Initialize 2AE0                              __pintcode 0008  
                       ??_WriteCmdXLCD 0016                               ?___awdiv 001C  
                             ?___ftadd 0070                               ?___awmod 0016  
                             ?___ftneg 0016                               ?___lldiv 0016  
                             ?___ftmul 002A                               ?___llmod 0016  
                             ?___ftsub 007C                              __npowers_ 0850  
                             ?___fttol 006D                          ?_Delay10KTCYx 0001  
                      ?_ADC_Initialize 0001                               _I2C1_ISR 1A06  
         ??_INTERRUPT_InterruptManager 0003                            __tdiv_to_l_ 1EFC  
                __end_of_WriteDataXLCD 2878                __end_of_XLCD_Initialize 28F2  
                         ??__div_to_l_ 001C                            __smallconst 0800  
                             ?_isdigit 0001                               ?_sprintf 0082  
                       __size_of_scale 042E                 I2C1_MasterRead@trBlock 00D2  
                       ___wmul@product 0028                               _LATDbits 000F8C  
                             _IPR1bits 000F9F                               _IPR2bits 000FA2  
                             _PIE1bits 000F9D                               _PIE2bits 000FA0  
                        ?_DelayPORXLCD 0001    __size_of_INTERRUPT_InterruptManager 1DB0  
                             _PIR1bits 000F9E                        OpenXLCD@lcdtype 001A  
                   __end_of__div_to_l_ 2156                               _PIR2bits 000FA1  
                             i2u472_48 29A6                       __CFG_WDTPS$32768 000000  
                       ??_Delay10KTCYx 0016                               _TMR0_ISR 2B16  
                             _TMR1_ISR 2B14                               _TMR2_ISR 2B12  
                             _TMR3_ISR 298E                      ??_PIN_MANAGER_IOC 0001  
                     __size_of_ADC_ISR 0002                             _ADCON0bits 000FC2  
                           _ADCON1bits 000FC1                      ___wmul@multiplier 0024  
                     Delay10KTCYx@unit 0017                            _INTCON2bits 000FF1  
                          _INTCON3bits 000FF0              __size_of_PIN_MANAGER_INT0 0002  
            __size_of_PIN_MANAGER_INT1 0002              __size_of_PIN_MANAGER_INT2 0002  
                             _BusyXLCD 28F2                             _ADC_Buffer 00C8  
                       ??_DelayPORXLCD 0016                             _EECON1bits 000FA6  
                             _OpenXLCD 2430                               __Hrparam 0000  
        __size_of_I2C1_BusCollisionISR 0002                               __Lrparam 0000  
                    _ADC_GetConversion 295E                 I2C1_ISR@i2c_bytes_left 003F  
              ??_OSCILLATOR_Initialize 0016                     ?_ADC_GetConversion 0016  
                     __size_of___awdiv 0084                       __size_of___ftadd 0268  
                     __size_of___awmod 0070                       __size_of___ftneg 0024  
                     __size_of___lldiv 0082                       __size_of___ftmul 0120  
                     __size_of___llmod 0066                       __size_of___ftsub 004C  
                     __size_of___fttol 0144                               ___ftpack 2382  
                          _fround$4058 006C                            _fround$4059 0069  
                             ___lltoft 2740                               ___lwtoft 2A34  
                     ?_XLCD_Initialize 0001                  _TMR1_InterruptHandler 00C5  
                  ??_ADC_GetConversion 0018                             sprintf@len 0094  
                           sprintf@exp 009E                             sprintf@val 009A  
                     __size_of_isdigit 001E                    I2C1_ISR@i2c_address 0048  
                             __ptext10 202E                               __ptext11 2740  
                             __ptext20 2382                               __ptext12 26DA  
                             __ptext21 283A                               __ptext13 25E8  
                             __ptext30 2B00                               __ptext22 2ABC  
                             __ptext14 1DB8                               __ptext31 2AE0  
                             __ptext23 28B6                               __ptext15 27EE  
                             __ptext40 2B16                               __ptext32 2AEC  
                             __ptext24 2430                               __ptext16 1544  
                             __ptext41 2B18                               __ptext33 2A76  
                             __ptext25 2878                               __ptext17 2A10  
                             __ptext50 29BC                               __ptext42 2B1A  
                             __ptext34 295E                               __ptext26 279C  
                             __ptext18 24D4                               __ptext51 2AF6  
                             __ptext43 2B1C                               __ptext27 2ACE  
                             __ptext19 2A34                               __ptext52 2B24  
                             __ptext44 2B1E                               __ptext36 298E  
                             __ptext28 2AA6                               __ptext53 0000  
                             __ptext45 2B20                               __ptext37 2B10  
                             __ptext29 28F2                               __ptext46 1A06  
                             __ptext38 2B12                               __ptext47 2B08  
                             __ptext39 2B14                               __ptext48 2A8E  
                             __ptext49 2B22                               __powers_ 0829  
                 __end_of_WriteCmdXLCD 28B6                       __size_of_sprintf 0896  
                        __size_of_main 010C              __end_of_ADC_GetConversion 298E  
                             int$flags 004A     __end_of_INTERRUPT_InterruptManager 1DB8  
           _INTERRUPT_InterruptManager 0008   __end_of_TMR3_DefaultInterruptHandler 2B12  
__size_of_TMR3_DefaultInterruptHandler 0002           _TMR3_DefaultInterruptHandler 2B10  
                  _EUSART1_Receive_ISR 2AF6                  __CFG_CPUDIV$OSC3_PLL4 000000  
                           _MEMORY_ISR 2B20                             _INTCONbits 000FF2  
                             isdigit@c 0018                               scale@scl 006C  
                 __end_of_Delay10KTCYx 2ABC                               intlevel2 0000  
                            sprintf@ap 0096                              sprintf@cp 0092  
                     __tdiv_to_l_@exp1 0024                       __tdiv_to_l_@cntr 0023  
                            sprintf@sp 0082                       __tdiv_to_l_@quot 001F  
                 ?_EUSART1_Receive_ISR 0001                       ___lldiv@dividend 0016  
              ?_PIN_MANAGER_Initialize 0001         __size_of_I2C1_FunctionComplete 0018  
                           _RCSTA1bits 000FAB          __end_of_I2C1_FunctionComplete 2AA6  
         __end_of_EUSART1_Transmit_ISR 29EA                       ??_ADC_Initialize 0016  
                __end_of_DelayFor18TCY 2B08                           ?__tdiv_to_l_ 0016  
                             sprintf@c 00A9                               sprintf@f 0084  
        ?_TMR3_DefaultInterruptHandler 0001                   __end_of_DelayPORXLCD 2AE0  
                     ___lldiv@quotient 001E                            _SSPCON1bits 000FC6  
                          _SSPCON2bits 000FC5                       _PIN_MANAGER_INT0 2B1E  
                     _PIN_MANAGER_INT1 2B1C                       _PIN_MANAGER_INT2 2B1A  
                   __CFG_FOSC$HSPLL_HS 000000                  ??_EUSART1_Receive_ISR 0001  
       __end_of_PIN_MANAGER_Initialize 2AEC                     __size_of_I2C1_Stop 0008  
                      _PIN_MANAGER_IOC 2B18                  _TMR2_InterruptHandler 00C3  
           __size_of_ADC_GetConversion 0030  
